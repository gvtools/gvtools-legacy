#!/bin/sh

############################################################################
#
# MODULE:       r.edge.detect
# AUTHOR(S):    Benjamin Ducke <benjamin.ducke AT oadigital.net>
# PURPOSE:      Sobel edge detection filter.
#
# USAGE:	This is an implementation of standard edge detectors
#		Sobel (default) and Prewitt (use "method=prewitt" to select),
#		using r.mfilter to do the actual work.
#
#		The Sobel implementation is done after Neteler and Mitasova:
#		Open Source GIS: A GRASS GIS Approach (1st ed., 2002), p. 245-246
#
#		The Prewitt implementation follows this: http://en.wikipedia.org/wiki/Prewitt
#
#		It is recommendable to first smooth the data (e.g. via r.smooth.gauss)
#		before running the edge detection over it. This will prevent
#		the edge detector from picking up small noise.
#
#		However, neither the Sobel nor the Prewitt detector work
#		very well with noisy data and/or high frequency data.
#		More advanced zero-crossing edge detection is available
#		in the module i.zc
#
#
# COPYRIGHT:    (C) 2010 by Benjamin Ducke
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################


#%Module
#% description: Runs an edge detection filter over the input data.
#% keywords: raster, sobel, prewitt, edge detection, geophysics, signals, filters
#%End

#%Option
#% key: input
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% description: Name of input raster map
#% gisprompt: old,cell,raster
#%End

#%Option
#% key: output
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% description: Name of output raster map
#% gisprompt: new,cell,raster
#%End

#%Option
#% key: method
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% options: sobel,prewitt
#% description: Name of output raster map
#% gisprompt: new,cell,raster
#% answer: sobel
#%End

#%Flag
#%  key: i
#%  description: Invert output grey scale
#%End

MODULE_NAME=r.edge.detect


if [ -z "$GISBASE" ] ; then
	echo "ERROR: You must be in GRASS GIS to run this program." 1>&2
	exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
	exec g.parser "$0" "$@"
fi


# setup temporary files for filter
TMP_FILE="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP_FILE" ] ; then
    g.message -e "Unable to create temporary file for filter. Aborting."
    exit 1
fi

# create filter descriptions
if [ "$GIS_OPT_METHOD" = "sobel" ] ; then
echo "TITLE     3x3 Sobel, (edge detection)" > $TMP_FILE
echo "MATRIX    3" >> $TMP_FILE
echo "-1 0 1" >> $TMP_FILE
echo "-2 0 2" >> $TMP_FILE
echo "-1 0 1" >> $TMP_FILE
echo "DIVISOR   1 " >> $TMP_FILE
echo "TYPE P" >> $TMP_FILE
echo "MATRIX    3" >> $TMP_FILE
echo "1 2 1" >> $TMP_FILE
echo "0 0 0" >> $TMP_FILE
echo "-1 -2 -1" >> $TMP_FILE
echo "DIVISOR   1 " >> $TMP_FILE
echo "TYPE P" >> $TMP_FILE
fi
if [ "$GIS_OPT_METHOD" = "prewitt" ] ; then
echo "TITLE     3x3 Prewitt, (edge detection)" > $TMP_FILE
echo "MATRIX    3" >> $TMP_FILE
echo "-1 0 1" >> $TMP_FILE
echo "-1 0 1" >> $TMP_FILE
echo "-1 0 1" >> $TMP_FILE
echo "DIVISOR   1 " >> $TMP_FILE
echo "TYPE P" >> $TMP_FILE
echo "MATRIX    3" >> $TMP_FILE
echo "-1 -1 -1" >> $TMP_FILE
echo "0 0 0" >> $TMP_FILE
echo "1 1 1" >> $TMP_FILE
echo "DIVISOR   1 " >> $TMP_FILE
echo "TYPE P" >> $TMP_FILE
fi

# Run edge detection
g.message "Filtering:"
r.mfilter.fp input="$GIS_OPT_INPUT" output="$GIS_OPT_OUTPUT" filter="$TMP_FILE" --o
g.message "Detecting edges:"
r.mapcalc "$GIS_OPT_OUTPUT=if($GIS_OPT_OUTPUT>0,$GIS_OPT_OUTPUT,null())"

INVERT=""
if [ "$GIS_FLAG_I" = "1" ] ; then
	INVERT="-n"
fi

# make greyscale table, rescale
r.colors --quiet map="$GIS_OPT_OUTPUT" color=grey $INVERT -e

g.message "Done."

exit 0

