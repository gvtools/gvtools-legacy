#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\branch work-in-progress
\selected 0
\color #d3faa9
\end_branch
\branch to-be-removed
\selected 0
\color #fab5af
\end_branch
\leftmargin 2cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 2.5cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle empty
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
GRASS and QGIS on Windows Compilation and Installation
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
http://www.webalice.it/marco.pasetti/temp/grass_wip/BuildFromSource.html !!!
 MARCOS NOTES !!!
\end_layout

\begin_layout Plain Layout
- NEED TO UPDATE: MinGW 5.1.4 plus binutils 2.18.50 (plus liberty.h from binutils
 source package).
\end_layout

\begin_layout Plain Layout
- LANGUAGE: change 
\begin_inset Quotes eld
\end_inset

folder
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Quotes eld
\end_inset

directory
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
- check these instructions for Win2000 references!
\end_layout

\begin_layout Plain Layout
- There are naming differences between QGIS bundled libs and the ones listed
 here (e.g.
 libgeos.dll instead of geos.dll).
 Adjust these instructions to use the same naming scheme!
\end_layout

\begin_layout Plain Layout
- On the other hand, the GRASS libs are (partly) no longer called libgrass_*
 but simply grass_*!!!
\end_layout

\begin_layout Plain Layout
- NVIZ NOT WORKING from current winterm.bat shell (works via gis.m, though).
 Problem: $GISBASE is not correctly export (as are a few others!).
 We need to export Unix shell style if we want to work from the shell! ALSO
 the executables search path looks really strange (maybe there is sth.
 in .bashrc or /etc/profile)!
\end_layout

\begin_layout Plain Layout
- /etc/profile could be generated on-the-fly with correct paths!
\end_layout

\begin_layout Plain Layout
- MAKE A SETUP PROGRAM WITH iexpress.exe !!!
\end_layout

\begin_layout Plain Layout
- This assumes that the user is doing all of this with administrator privileges.
 Is that really necessary for the whole process?
\end_layout

\begin_layout Plain Layout
- This assumes a clean system, i.e.
 one where no MSYS has been installed already and where we can assume that
 at the end of this compilation process, everything in /usr is meaningful
 for the GRASS installation!
\end_layout

\begin_layout Plain Layout
- Whenever a component from a binary source (e.g.
 pre-compiled MSYS packages) is used, reference needs to be given to the
 source code homepage, as well!
\end_layout

\begin_layout Plain Layout
- add software versions to all section headings
\end_layout

\begin_layout Plain Layout
- a little bit of additional info on the MinGW compiler is here: http://www.space
jack.org/games/mingw/
\end_layout

\begin_layout Plain Layout
- build DLLs for all libs in /usr/lib that don't have them (!?) What's the
 difference between .dll and dll.a: http://www.unidata.ucar.edu/software/netcdf/docs/
netcdf-install/Platform-Specific-Notes.html.
 See also here: http://geog-pc40.ulb.ac.be/grass/wingrass/README.extralibs (patch
 for Zlib):
\end_layout

\begin_layout Plain Layout
A dll.a is an import library.
\end_layout

\begin_layout Plain Layout
DLL's should be somewhere in the Path or in the current directory.
 Libraries (*.a and *.dll.a) should be in the default library search path (usually
 something like c:/mingw/mingw32/lib) or the directory they're in should
 be given with the appropriate option (-L for GCC).
\end_layout

\begin_layout Plain Layout
You link in the same way as ordinary libraries.
 GCC automatically uses the import library for the dll if it's available.
 See also http://www.mingw.org/docs.shtml#etc
\end_layout

\begin_layout Plain Layout
Notice that the name of the SYMLINK is embedded in the dll, not the actual
 name of the dll itself.
 Thus, since windows, the runtime-dynamic-loader, doesn't grok symlinks,
 it won't be able to find libz.1.1.dll.
\end_layout

\begin_layout Plain Layout
So, we can't play symlink games on cygwin/windows.
\end_layout

\begin_layout Plain Layout
What does this mean? EVERY dependent package MUST edit it's Makefile and
 use '-lz.1.1' instead of '-lz' if you want to link directly to the dll.
 Now, you can get around this by supplying an import lib called 'libz.dll.a'
 that *knows* that the dll is called 'libz.1.1.dll':
\end_layout

\begin_layout Plain Layout
gcc -shared -Wl,--out-implib=libz.dll.a -o libz.1.1.dll
\end_layout

\begin_layout Plain Layout
will do it, and everything will work.
 However, it forces users to use the import lib; they can never link directly
 to the dll unless they munge their own makefile.
 
\end_layout

\begin_layout Plain Layout
- check and add types of licenses to all dependencies!
\end_layout

\begin_layout Plain Layout
- remove /grassdbase and /tcl prior to packaging!
\end_layout

\end_inset


\end_layout

\begin_layout Author
Benjamin Ducke
\end_layout

\begin_layout Standard
This documents contains extensive instructions on how to get a fully functional
 version of GRASS GIS (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.grass.itc.it
\end_layout

\end_inset

) and Quantum GIS (QGIS; 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.qgis.org
\end_layout

\end_inset

) compiled and installed on Windows (2000 and XP, Vista untested).
 This is done using only open source tools which we will compile 
\begin_inset Quotes eld
\end_inset

from scratch
\begin_inset Quotes erd
\end_inset

 in order to have complete control over the process.
 Wherever possible, we will use the MSYS shell, as it provides a more convenient
 command line shell and makes it much easier to organize source codes, tools
 and compiled binaries in a self-contained directory.
 Only where the make process currently fails in MSYS, Window's own 
\emph on
cmd.exe
\emph default
 is used.
 Likewise, some components don't compile easily (or don't compile at all)
 with the MinGW suite and thus will be installed from available pre-compiled
 Windows binaries for the time being.
\end_layout

\begin_layout Standard
All software used here is open source software that comes with a GPL or
 GPL-like license.
 Please be aware that these licensing terms usually also apply to any product
 you derive and distribute from this codebase.
 Don't forget to consult the individual software's license agreement! You
 will find pointers to all individual source code packages (which include
 license statements) in this document.
\end_layout

\begin_layout Section
Useful Windows Tools
\end_layout

\begin_layout Standard
A bare Windows system does not come with even the basic tools like a decent
 text editor.
 In this section, we will give pointers to some good, free tools that you
 should really install to make your life easier.
\end_layout

\begin_layout Subsection
PSPad Text Editor
\end_layout

\begin_layout Standard
PSPad is a great free text editor.
 Since you will be editing a lot of textfiles and Window's own Notepad is
 more annoying than helpful, it's worth installing PSPad.
\end_layout

\begin_layout Standard
Get the software here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.pspad.com
\end_layout

\end_inset

 and install it wherever you like.
 
\end_layout

\begin_layout Standard
You may want to add the path to 
\emph on
PSPad.exe
\emph default
 to your system Path so that you will be able to launch the editor with
 an input file from the command line anytime.
 On Windows XP, you need to right-click on the 
\begin_inset Quotes eld
\end_inset

My Computer
\begin_inset Quotes erd
\end_inset

 icon and select 
\begin_inset Quotes eld
\end_inset

Properties
\begin_inset Quotes erd
\end_inset

 to get to the System Preferences dialog.
 Open the 
\begin_inset Quotes eld
\end_inset

Advanced
\begin_inset Quotes erd
\end_inset

 tab and click on 
\begin_inset Quotes eld
\end_inset

Environment Variables
\begin_inset Quotes erd
\end_inset

.
 You will see a list of 
\begin_inset Quotes eld
\end_inset

System variables
\begin_inset Quotes erd
\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Maybe enough to put this into the 
\begin_inset Quotes eld
\end_inset

User variables for X
\begin_inset Quotes erd
\end_inset

?
\end_layout

\end_inset

.
 Mark the 
\begin_inset Quotes eld
\end_inset

Path
\begin_inset Quotes erd
\end_inset

 entry and click on 
\begin_inset Quotes eld
\end_inset

Edit
\begin_inset Quotes erd
\end_inset

.
 In the entry field for 
\begin_inset Quotes eld
\end_inset

Variable value
\begin_inset Quotes erd
\end_inset

, add a semicolon at the end followed by the complete path to the directory
 that contains the 
\emph on
PSPad.exe 
\emph default
binary (e.g.
 
\emph on
C:
\backslash
Program Files
\backslash
PSPad editor
\emph default
).
\end_layout

\begin_layout Subsection
Data Compression Software
\end_layout

\begin_layout Standard
IzArc allows you to handle all types of file archives (ZIP, ARJ, etc.) easily
 using a GUI.
 Since a lot of the software you will be installing is packaged in some
 archive format and Window's own archive handling is rather primitive (if
 present at all), it's worth installing IzArc.
\end_layout

\begin_layout Standard
Get the software from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.izarc.net
\end_layout

\end_inset

 and install it wherever you like.
\end_layout

\begin_layout Standard
A handy tool to use from the command line is Un-Zip: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.info-zip.org/UnZip.html
\end_layout

\end_inset

; download from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gnuwin32.sourceforge.net/packages/unzip.htm
\end_layout

\end_inset

.
 You only need to install the 
\begin_inset Quotes eld
\end_inset

Binaries
\begin_inset Quotes erd
\end_inset

 to use the tool.
 After installtion, you may want to add the path to 
\emph on
unzip.exe
\emph default
 to your system Path so that you will be able to launch the editor with
 an input file from the command line anytime.
 The following instructions will assume that you have done so and can launch
 the 
\emph on
unzip.exe
\emph default
 command from the Windows command line.
\end_layout

\begin_layout Section
MinGW and MSYS
\begin_inset CommandInset label
LatexCommand label
name "sec:MinGW-and-MSYS"

\end_inset


\end_layout

\begin_layout Standard
If you wish to compile GRASS from source code then you will find a complete
 development environment in the MSYS and MINGW packages.
\end_layout

\begin_layout Standard
You will need to install the following software using administrator rights
 on your Windows System.
 Install the packages precisely in the order and using the same program
 versions as given in this section to avoid trouble.
\end_layout

\begin_layout Standard
Important: this document will assume that you also choose to install all
 software into the same folders as proposed here.
 If you choose different installation folders, you need to adjust all instructio
ns involving drive letters and folder names to your particular setting.
\end_layout

\begin_layout Subsection
MinGW 5.1.3
\end_layout

\begin_layout Standard
MinGW is a suite of compiler software (C and other programming languages)
 that is available freely for Windows.
 It is essentially a version of the GNU C compiler and make tools for Windows
 plus the most essential Win32 API files.
 This document has been written to work with MinGW as the basic tool for
 software compilation.
 If you choose to try and compile GRASS with a different compiler suite
 (such as Visual C), you will need to adjust many of the instructions given
 here to your specific software packages.
\end_layout

\begin_layout Standard
Download MinGW 5.1.3 from here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435
\end_layout

\end_inset

.
 You can choose to download and install directly or just download and install
 later.
 In any case, choose the 
\begin_inset Quotes eld
\end_inset

Current
\begin_inset Quotes erd
\end_inset

 version of the package when asked by the installer.
 Choose a 
\begin_inset Quotes eld
\end_inset

Full
\begin_inset Quotes erd
\end_inset

 install to have the full set of compilers available later.
 However, at this point of GRASS development (i.e.
 GRASS version 6.3), you can safely choose not to install the ADA, Java and
 Objective C compilers.
\end_layout

\begin_layout Standard
Install MinGW into 
\emph on
C:
\backslash
MinGW
\emph default
.
 Prior to installing the software in that location, the MinGW setup program
 will download and store all required packages in the directory you started
 it from.
\end_layout

\begin_layout Standard
Also, add 
\emph on
C:
\backslash
MinGW
\backslash
bin
\backslash

\emph default
 to your Environment Variables Path in the Windows system preferences, so
 you will be able to use the basic compiler tools from anywhere (including
 the 
\emph on
cmd.exe
\emph default
 prompt)!
\end_layout

\begin_layout Standard
DO NOT, however, add any other MSYS bin paths to your Windows environment
 (see next section)! This will result in trouble when you try to compile
 software through Windows' own 
\emph on
cmd.exe
\emph default
!
\end_layout

\begin_layout Subsubsection
Win32API 3.11
\end_layout

\begin_layout Standard
A critical part of the MinGW installation is an up-to-date copy of the Win32
 application programming interface (API) header and system library files.
 MinGW 5.1.3 comes with a version that you might need to replace with a newer
 one in order to avoid trouble when compiling software later.
 Make sure that at least version 3.11 of the API files has been downloaded
 and installed (version 3.11 is what was used for this instructions.
 With anything newer, you will be on your own).
\end_layout

\begin_layout Standard
If not, download the file 
\emph on
w32api-3.11.tar.gz
\emph default
 (or newer) from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435
\end_layout

\end_inset

.
 Open the archive file and extract the contained directories 
\emph on
include
\emph default
 and 
\emph on
lib
\emph default
 to 
\emph on
C:
\backslash
MinGW
\emph default
, over-writing the older versions of the files.
\end_layout

\begin_layout Subsection
MSYS 1.0.11
\end_layout

\begin_layout Standard
MSYS offers a minimal Unix-like environment to run on top of Windows.
 This is not as complete as Cygwin (of which MSYS is a fork), but much leaner
 and simpler.
 Among other things, MSYS will provide the basis for Unix configure scripts
 and makefiles to do their work and the command input terminal and 
\emph on
shell
\emph default
 for non-interactive GRASS usage.
\end_layout

\begin_layout Standard
Download the file 
\emph on
MSYS-1.0.11-2004.04.30-1.exe
\emph default
 available here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gd.tuwien.ac.at/gnu/mingw/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Install MSYS to C:
\backslash
msys
\backslash
1.0 and let the installer do the 
\begin_inset Quotes eld
\end_inset

normalization
\begin_inset Quotes erd
\end_inset

 and other post-installation jobs by just answering 
\begin_inset Quotes eld
\end_inset

y
\begin_inset Quotes erd
\end_inset

.
 Specify the path to MinGW as 
\emph on
C:/MinGW
\emph default
 (note: use Unix-style forward slash 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

!).
\end_layout

\begin_layout Standard
Make sure that the contents of the file 
\emph on
c:
\backslash
msys
\backslash
etc
\backslash
fstab
\emph default
 contains a line: 
\end_layout

\begin_layout LyX-Code
C:/MinGW /mingw
\end_layout

\begin_layout Standard
This will ensure that the MinGW tools will be visible when working from
 the MSYS shell.
\end_layout

\begin_layout Standard
Start the MSYS shell now and create the local subdirectory structure:
\end_layout

\begin_layout LyX-Code
mkdir /usr/local
\end_layout

\begin_layout LyX-Code
mkdir /usr/local/bin
\end_layout

\begin_layout LyX-Code
mkdir /usr/local/lib
\end_layout

\begin_layout LyX-Code
mkdir /usr/local/include
\end_layout

\begin_layout Standard
In addition, we will save a copy of the current Make tool (as we will need
 this version later to work with some older Makefiles):
\end_layout

\begin_layout LyX-Code
cp /bin/make.exe /bin/make-3.79.1.exe
\end_layout

\begin_layout Standard
After the basic MSYS setup is done, you should download and install the
 latest updates.
 Go to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435&package_id=24963
\end_layout

\end_inset

 and download 
\emph on
MSYS-1.0.11-20071204.tar.bz2
\emph default
 (or any later version you might find).
 Extract the contents of the archive to your MSYS installation base directory
 (C:
\backslash
msys
\backslash
1.0).
\end_layout

\begin_layout Standard
Do the same thing for the following update packages, available from the
 same site (do not take the
\emph on
 .src.tar.bz2
\emph default
 files, as these contain the package source codes):
\end_layout

\begin_layout LyX-Code
bash, bzip2, coreutils (snapshot), gawk, make, tar
\end_layout

\begin_layout Standard
Note: The 
\begin_inset Quotes eld
\end_inset

coreutils
\begin_inset Quotes erd
\end_inset

 package by default extracts to a subfolder within 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
 Move everything from there into the MSYS base directory.
\end_layout

\begin_layout Standard
Note: If you use a Windows archiving tool to install binaries into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
usr
\backslash
bin
\emph default
, they will not be seen from inside the MSYS shell! This is because MSYS
 automatically sets the contents of /
\emph on
usr/bin
\emph default
 to be the same as 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin, 
\emph default
which masks out anything in 
\emph on
C:
\backslash
msys
\backslash
usr
\backslash
bin
\emph default
.
 Either move things to 
\emph on
C:
\backslash
msys
\backslash
bin
\emph default
 by hand or extract from the MSYS command line.
\end_layout

\begin_layout Standard
Again, make a copy of the current (now updated Make tool):
\end_layout

\begin_layout LyX-Code
cp /bin/make.exe /bin/make-3.81.exe
\end_layout

\begin_layout Subsection
Supplementary Tools
\begin_inset CommandInset label
LatexCommand label
name "sub:Additional-Development-Tools"

\end_inset


\end_layout

\begin_layout Standard
You will also need a few additional packages to complete the MSYS programming
 environment.
 They come as compressed files with a 
\emph on
.tar.bz2
\emph default
 or 
\emph on
.tar.gz
\emph default
 file extension.
 You can extract them using MSYS commandline tools or IZArc.
 Download all of the packages listed here and install them as described
 below.
\end_layout

\begin_layout Subsubsection
Flex, Bison, CVS, Automake etc.
\end_layout

\begin_layout Standard
The main site for the following downloads is 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435&package_id=67879
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Get 
\emph on
regex-0.12-MSYS-1.0.11.tar.bz
\emph default
2
\emph on
, guile-1.8.2-MSYS-1.0.11.tar.bz2, libtool1.5-1.5.25a-1-bin.tar.bz2, libtool1.5-1.5.25a-1-dll.t
ar.bz2
\emph default
 and 
\emph on
gmp-4.2.1-MSYS-1.0.11.tar.bz2
\emph default
.
 These are needed for 
\emph on
flex
\emph default
 and 
\emph on
autogen
\emph default
 to work.
 Install all of them by unpacking the contents of folder 
\emph on
usr
\emph default
 in the zip file to 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
\end_layout

\begin_layout Itemize
Flex is available as an MSYS 1.0.11 package.
 Download the file 
\emph on
flex-2.5.33-MSYS-1.0.11-snapshot.tar.bz2
\emph default
 to
\emph on
 C:
\backslash
msys
\backslash
1.0
\emph default
.
 Install flex by unpacking the contents of folder 
\emph on
flex-2.5.33
\emph default
 in the archive to 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
\end_layout

\begin_layout Itemize
Also from the same server, get and install the MSYS packages for bison 2.3
 (
\emph on
bison-2.3-MSYS-1.0.11.tar.bz2
\emph default
).
 Copy the whole archive file to 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
\end_layout

\begin_layout Itemize
Get the CVS tools for MSYS from.
 Download the file 
\emph on
cvs-1.11.22-msys.tar.bz2
\emph default
 to
\emph on
 C:
\backslash
msys
\backslash
1.0
\emph default
.
\end_layout

\begin_layout Itemize
Get 
\emph on
automake-1.10-MSYS-1.0.11.tar.bz2
\emph default
, 
\emph on
autogen-5.9.2-MSYS-1.0.11.tar.bz2
\emph default
 and 
\emph on
autoconf-2.5-2.61-1-bin.tar.bz2
\emph default
.
 Install 
\emph on
autogen
\emph default
 by unpacking the contents of folder 
\emph on
usr
\emph default
 in the zipfile to 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
 Install all others by unpacking the contents of folder 
\emph on
usr
\emph default
 in the zipfile to 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local! 
\emph default
Then do:
\end_layout

\begin_deeper
\begin_layout LyX-Code
cp /usr/local/bin/autoconf-2.61 /usr/bin/autoconf
\end_layout

\begin_layout LyX-Code
cp /usr/local/bin/automake-1.10 /usr/bin/automake
\end_layout

\end_deeper
\begin_layout Itemize
For internationalization support (needed!), install 
\emph on
libiconv and gettext
\emph default
.
 For some reason, the MSYS ports do not work very well, so we will install
 the binary versions from the GNUWin32 project.
 Go to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=23617
\end_layout

\end_inset

.
 Download the following files (you will find them in the 
\begin_inset Quotes eld
\end_inset

gettext
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

libiconv
\begin_inset Quotes erd
\end_inset

 sections): 
\emph on
gettext-0.14.4-bin.zip
\emph default
, 
\emph on
gettext-0.14.4-dep.zip
\emph default
, 
\emph on
gettext-0.14.4-lib.zip
\emph default
, 
\emph on
libiconv-1.9.2-1-bin.zip,
\emph default
 
\emph on
libiconv-1.9.2-1-dep.zip
\emph default
 and 
\emph on
libiconv-1.9.2-1-lib.zip
\emph default
 and save them to any folder.
 If you open the zip files, you will find a file structure very similar
 to that in 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
 Just extract all folders in the zip files into the correspoding folders
 in 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
 (you can safely skip any 
\emph on
man
\emph default
, 
\emph on
contrib
\emph default
 and 
\emph on
manifest
\emph default
 folders).
\end_layout

\begin_layout Itemize
Get 
\emph on
m4-1.4.7-MSYS.tar.bz2
\emph default
 (note: you need to unfold the 
\begin_inset Quotes eld
\end_inset

msys-DTK-1.0.1
\begin_inset Quotes erd
\end_inset

 menu item on the download page).
 Install it by unpacking 
\emph on
m4.exe
\emph default
 to 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default

\backslash
bin.
\end_layout

\begin_layout Subsubsection
Subversion 1.4.6
\begin_inset CommandInset label
LatexCommand label
name "sub:Subversion"

\end_inset


\end_layout

\begin_layout Standard
Many projects now use the Subversion (SVN) software instead of CVS to provide
 access to shared source code repositories over the internet.
 This currently include GRASS and QGIS.
\end_layout

\begin_layout Standard
In order to check out sources from the repository, you need the Subversion
 client.
 Download the binary Windows installer 
\emph on
svn-1.4.6-setup.exe
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://subversion.tigris.org
\end_layout

\end_inset

 (or more precisely here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91
\end_layout

\end_inset

).
 This software only provides SVN client functionality, no server, but that
 is fine for our purposes.
 Launch the installer.
 Basically, you can install it to wherever you want, but to keep things
 neatly packaged, I recommend you install into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
svn
\emph default
.
\end_layout

\begin_layout Standard
The installer will automatically add that directory to your system PATH,
 so you will be able to start the SVN client from anywhere using the MSYS
 shell or Window's own 
\emph on
cmd.exe
\emph default
 (there is no GUI in this version of the client).
\end_layout

\begin_layout Subsubsection
Other Tools
\begin_inset CommandInset label
LatexCommand label
name "sub:Other-Tools"

\end_inset


\end_layout

\begin_layout Itemize
Get 
\emph on
termcap-20050421-MSYS-1.0.11.tar.bz
\emph default
2
\emph on
, 
\emph default
from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435&package_id=227249
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Some source code packages also need the tool 
\emph on
pkg-config
\emph default
.
 Compiling it from sources under MinGW is a serious exercise.
 Luckily, there are binaries for version 0.15.
 Download
\emph on
 glib-2.2.3-20040116.mingw.tar.bz2
\emph default
 and 
\emph on
pkgconfig-0.15.mingw.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://rt.openfoundry.org/Foundry/Project/Download/?Queue=168
\end_layout

\end_inset

 to any folder.
 Extract the 
\emph on
bin
\emph default
, 
\emph on
doc
\emph default
, 
\emph on
lib
\emph default
, 
\emph on
man
\emph default
 and 
\emph on
share
\emph default
 folders contained in both archives to 
\emph on
C:
\backslash
msys
\backslash
1.0.
 
\end_layout

\begin_layout Itemize
Wget is a commandline download manager.
 Get the file 
\emph on
wget-1.9.1-mingwPORT.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435&package_id=233332
\end_layout

\end_inset

, open the archive to locate the executable 
\emph on
wget.exe
\emph default
 and just copy that to 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin
\emph default
.
\end_layout

\begin_layout Itemize
Get BC, a command line calculator, from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gnuwin32.sourceforge.net/packages/bc.htm
\end_layout

\end_inset

.
 Download the 
\begin_inset Quotes eld
\end_inset

Binaries
\begin_inset Quotes erd
\end_inset

 file 
\emph on
bc-1.06-2-bin.zip
\emph default
 and save it to any folder.
 Extract only the file 
\emph on
bc.exe
\emph default
 in the 
\emph on
bin
\emph default
 directory into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin
\emph default
.
 Then download the 
\begin_inset Quotes eld
\end_inset

Dependencies
\begin_inset Quotes erd
\end_inset

 file 
\emph on
bc-1.06-2-dep.zip
\emph default
 into any folder.
 Extract the file 
\emph on
readline5
\emph default
.dll
\begin_inset Note Note
status open

\begin_layout Plain Layout
do we have this in our readline version, as well?
\end_layout

\end_inset

 into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin
\emph default
.
\end_layout

\begin_layout Subsubsection
Finishing up (important!)
\end_layout

\begin_layout Standard
Start an MSYS shell from the Windows Start menu and type in these commands
 to complete the installation for all downloaded packages:
\end_layout

\begin_layout LyX-Code
mkdir /usr/lib/pkgconfig
\end_layout

\begin_layout LyX-Code
cp /usr/bin/libiconv-2.dll /usr/bin/iconv.dll
\end_layout

\begin_layout LyX-Code
cp /usr/bin/libintl-8.dll /usr/bin/intl.dll
\end_layout

\begin_layout Standard
Next, edit the MSYS shell startup script 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
etc
\backslash
profile
\emph default
, and add an export statement for PKG_CONFIG_PATH so that the last few lines
 read:
\end_layout

\begin_layout LyX-Code
export MAKE_MODE=unix 
\end_layout

\begin_layout LyX-Code
export PS1='
\backslash
[
\backslash
033]0;$MSYSTEM:
\backslash
w
\backslash
007
\end_layout

\begin_layout LyX-Code

\backslash
033[32m
\backslash
]
\backslash
u@
\backslash
h 
\backslash
[
\backslash
033[33m
\backslash
w
\backslash
033[0m
\backslash
]
\end_layout

\begin_layout LyX-Code
$ '
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
export 
\color black
PKG_CONFIG_PATH="/usr/lib/pkgconfig"
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
alias clear=clsb
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cd "$HOME"
\end_layout

\begin_layout Subsection
Basic System Libraries
\end_layout

\begin_layout Standard
Next, we need to install a few additional libraries that GRASS and many
 other programs will require.
 
\end_layout

\begin_layout Standard
For these instructions (and the following sections), it will be assumed
 that you download all packages into the folder 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
src
\emph default
.
 We will refer to this as the 
\emph on
source directory
\emph default
.
\end_layout

\begin_layout Subsubsection
ZLib
\begin_inset CommandInset label
LatexCommand label
name "sub:ZLib"

\end_inset


\end_layout

\begin_layout Standard
ZLib includes compression routines used by many applications to compress
 raster files and save storage space.
\end_layout

\begin_layout Standard
Get 
\emph on
zlib-1.2.3.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.zlib.net
\end_layout

\end_inset

.
 Save it into the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout Standard
Start an MSYS shell from the Windows Start menu and follow these instructions
 precisely to configure and install 
\emph on
zlib.
\end_layout

\begin_layout Standard
Zlib version 1.2.3 needs to be patched to work with MSYS.
 Create a new textfile (e.g.
 with PSPad) with name 
\emph on
zlib-1.2.3.patch
\emph default
 with the following content:
\end_layout

\begin_layout LyX-Code
--- zlib-1.2.3/configure~       Mon Jul 11 22:11:57 2005
\end_layout

\begin_layout LyX-Code
+++ zlib-1.2.3/configure        Mon Dec 11 22:57:11 2006
\end_layout

\begin_layout LyX-Code
@@ -79,6 +79,11 @@
\end_layout

\begin_layout LyX-Code
   Linux | linux | GNU | GNU/*) LDSHARED=${LDSHARED-"$cc -shared -Wl,-soname,lib
z.so.1"};;
\end_layout

\begin_layout LyX-Code
   CYGWIN* | Cygwin* | cygwin* | OS/2* )
\end_layout

\begin_layout LyX-Code
              EXE='.exe';;
\end_layout

\begin_layout LyX-Code
+  MINGW32* )
\end_layout

\begin_layout LyX-Code
+             shared_ext='.dll'
\end_layout

\begin_layout LyX-Code
+             SFLAGS=${CFLAGS}
\end_layout

\begin_layout LyX-Code
+             LDSHARED=${LDSHARED-"$cc -shared -Wl,-soname,libz.dll.1"}
\end_layout

\begin_layout LyX-Code
+             EXE='.exe';;
\end_layout

\begin_layout LyX-Code
   QNX*)  # This is for QNX6.
 I suppose that the QNX rule below is for QNX2,QNX4
\end_layout

\begin_layout LyX-Code
          # (alain.bonnefoy@icbt.com)
\end_layout

\begin_layout LyX-Code
                  LDSHARED=${LDSHARED-"$cc -shared -Wl,-hlibz.so.1"};;
\end_layout

\begin_layout Standard
Save the text file as 
\emph on
zlib-1.2.3.patch
\emph default
 into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash

\emph default
.
\end_layout

\begin_layout Standard
Now enter these commands.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf zlib-1.2.3.tar.gz
\end_layout

\begin_layout LyX-Code
patch -p0 < zlib-1.2.3.patch
\end_layout

\begin_layout LyX-Code
cd zlib-1.2.3
\end_layout

\begin_layout LyX-Code
CFLAGS="-O2 -s" CXXFLAGS="-O2 -s" LDFLAGS=-s ./configure --shared --prefix=/usr
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
Ignore the errors at the end and do:
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
In addition, we will make a static version of libz and put that into 
\emph on
/mingw/lib
\emph default
.
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
cp libz.a /mingw/lib
\end_layout

\begin_layout LyX-Code
cp zlib.h zconf.h /mingw/include/
\end_layout

\begin_layout Standard
Now a few more things to satisfy some MinGW tools dependencies:
\end_layout

\begin_layout LyX-Code
cp /usr/lib/libz.dll /usr/bin/msys-z.dll
\end_layout

\begin_layout Subsubsection
PDCurses 3.3
\begin_inset CommandInset label
LatexCommand label
name "sub:PDCurses"

\end_inset


\end_layout

\begin_layout Standard
This library allows you to build and use the few remaining GRASS modules
 that use an interactive text screen input.
 A static version of this little library will sufficient for our purposes.
\end_layout

\begin_layout Standard
Download the file 
\emph on
PDCurses-3.3.tar.gz 
\emph default
from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pdcurses.sourceforge.net/
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf PDCurses-3.3.tar.gz
\end_layout

\begin_layout LyX-Code
cd PDCurses-3.3/win32
\end_layout

\begin_layout LyX-Code
make -f mingwin32.mak
\end_layout

\begin_layout Standard
(ignore the error about missing 
\emph on
copy
\emph default
 command)
\end_layout

\begin_layout LyX-Code
mv pdcurses.a libcurses.a
\end_layout

\begin_layout LyX-Code
install libcurses.a /usr/lib
\end_layout

\begin_layout LyX-Code
install libcurses.a /mingw/lib/
\end_layout

\begin_layout LyX-Code
cd ..
\end_layout

\begin_layout LyX-Code
install -m 644 curses.h /usr/include
\end_layout

\begin_layout LyX-Code
install -m 644 curses.h /mingw/include
\end_layout

\begin_layout LyX-Code
mkdir /mingw/include/readline
\end_layout

\begin_layout LyX-Code
cp *.h /mingw/include/readline/
\end_layout

\begin_layout Subsubsection
Readline
\begin_inset CommandInset label
LatexCommand label
name "sub:Readline"

\end_inset


\end_layout

\begin_layout Standard
Readline is a library that allows applications to make it more pleasant
 and efficient for the user to compose command line input.
 It is useful for many DBMS interface programs and GRASS command input.
\end_layout

\begin_layout Standard
Make sure that you have installed PDCurses as described in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:PDCurses"

\end_inset

!
\end_layout

\begin_layout Standard
Download the file 
\emph on
readline-5.2-20061112-src.zip
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gpsim.sourceforge.net/gpsimWin32/gpsimWin32.html
\end_layout

\end_inset

, save it somewhere and uncompress folder 
\emph on
readline
\emph default
 contained in the zip file to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
cd readline/5.2/readline-5.2-src
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout LyX-Code
install libreadline.a /mingw/lib/
\end_layout

\begin_layout LyX-Code
install readline.h /mingw/include/
\end_layout

\begin_layout Standard
To finish up, we need to make the shared Windows DLLs manually:
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libreadline*
\end_layout

\begin_layout LyX-Code
g++.exe -s -shared -o ./readline.dll -L/usr/lib *.o
\end_layout

\begin_layout LyX-Code
install readline.dll /usr/lib
\end_layout

\begin_layout Subsubsection
OpenSSL 0.9.8
\end_layout

\begin_layout Standard
This library is strictly necessary for secure, encrypted data transmission
 over the network.
 It is used by many types of applications that need to communicate data
 via a client-server infrastructure, such as DBMS.
\end_layout

\begin_layout Standard
Download the file 
\emph on
openssl-0.9.8e-3-MSYS-1.0.11.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435&package_id=67879
\end_layout

\end_inset

 and save it in any folder.
\end_layout

\begin_layout Standard
Install OpenSSL by unpacking the contents of folder 
\emph on
usr
\emph default
 in the zipfile to 
\emph on
C:
\backslash
msys
\backslash
1.0.
\end_layout

\begin_layout Standard
For compatibility with the PostgreSQL (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:PostgreSQL-8.2.5"

\end_inset

) configure script, we need to make some copies under different names:
\end_layout

\begin_layout LyX-Code
cp /usr/bin/msys-crypto-0.9.8.dll /usr/lib/libeay32.dll
\end_layout

\begin_layout LyX-Code
cp /usr/bin/msys-ssl-0.9.8.dll /usr/lib/libssleay32.dll
\end_layout

\begin_layout Subsubsection
OpenSSH 4.6
\end_layout

\begin_layout Standard
The 
\emph on
Secure SHell
\emph default
 provides a way for establishing a secure, encrypted terminal link over
 the network.
\end_layout

\begin_layout Standard
Download the files 
\emph on
minires-1.01-1-MSYS-1.0.11.tar.bz2
\emph default
 and 
\emph on
openssh-4.6p1-MSYS-1.0.11.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435&package_id=67879
\end_layout

\end_inset

 and save them in any folder.
\end_layout

\begin_layout Standard
Install 
\emph on
minires
\emph default
 by unpacking the contents of folder 
\emph on
usr
\emph default
 in the zipfile to 
\emph on
C:
\backslash
msys
\backslash
1.0.
\end_layout

\begin_layout Standard
Install OpenSSH by unpacking the contents of folder 
\emph on
usr
\emph default
 in the zipfile to 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
 Unpack the folders 
\emph on
etc
\emph default
 and 
\emph on
var
\emph default
 directly into 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
\end_layout

\begin_layout Subsubsection

\color red
Pthreads-win32
\begin_inset CommandInset label
LatexCommand label
name "sub:Pthreads-win32"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout

\color red
do we really need this? Right now, only GDAL assumes that Xerces-C needs
 pthreads, so the configure test program will not compile without it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pthreads-win32 is an Open Source Software implementation of the Threads
 component of the POSIX 1003.1c 1995 Standard (or later) for Microsoft's
 Win32 environment.
 It is currently used by GDAL and other programs.
 Get the 
\emph on
file pthreads-w32-2-8-0-release.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

ftp://sourceware.org/pub/pthreads-win32/
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf pthreads-w32-2-8-0-release.tar.gz
\end_layout

\begin_layout LyX-Code
cd pthreads-w32-2-8-0-release
\end_layout

\begin_layout LyX-Code
make clean GCE-inlined
\end_layout

\begin_layout LyX-Code
install pthreadGCE2.dll /usr/lib/libpthread.dll
\end_layout

\begin_layout LyX-Code
install pthread.h sched.h semaphore.h /usr/include/
\begin_inset Note Note
status open

\begin_layout Plain Layout
Many configure scripts will only find the lib and includes in /ming/.
\end_layout

\begin_layout Plain Layout
However, if they automatically pick it up, they may fail building since
 the pthread lib for Win32 is lacking/incomplete in many places (e.g.
 LibXML compilation fails)!
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
GDB 6.6
\end_layout

\begin_layout Standard
If you want to develop software yourself using the MinGW tools, you may
 want to install the GNU Debugger.
\end_layout

\begin_layout Standard
Download the file GDB-6.6.tar.bz2 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435&package_id=20507
\end_layout

\end_inset

 and save it to any folder.
 Extract the archive's contents to 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
\begin_inset Note Note
status open

\begin_layout Plain Layout
maybe some notes on how to use it?
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Notes on MSYS and MinGW
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
/usr/lib = /lib
\end_layout

\begin_layout Plain Layout
DLL dilema, static vs.
 shared, etc.
\end_layout

\begin_layout Plain Layout
When does MSYS use Windows pathnames, when Unix style?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
From the MSYS 
\emph on
README.rtf
\emph default
 document:
\end_layout

\begin_layout Quote
Msys will convert POSIX paths that are used as arguments to Win32 paths.
 This is done for any executable not in /bin and /usr/bin.
 If the executable is dependant on the msys-1.0.dll then it must be located
 in the /bin or /usr/bin directory.
 This means that you now have a POSIX environment that will automagically
 do the right thing w.r.t.
 changing the paths passed as arguments.
 Arguments beginning with a // are considered to be Win32 style switches
 and will be passed to the program with // converted to / to allow for the
 command.com/cmd.exe (Win32) style switch.
 An example of a Win32 style switch is `write //p /mydocs/msys-rocks.' In
 this example write (a.k.a.
 WordPad) exists in the c:
\backslash
winnt
\backslash
system32 path on my system.
 The //p becomes /p which tells write to print the document.
 And mydocs/msys-rocks converts to c:
\backslash
msys
\backslash
1.0
\backslash
mydocs
\backslash
msys-rocks so that write can find it.
 
\end_layout

\begin_layout Standard
Windows does not support dynamic links.
 In MSYS, 
\begin_inset Quotes eld
\end_inset

ln -s
\begin_inset Quotes erd
\end_inset

 just copies a file.
 In many cases, this will be alright, but it may waste space.
\end_layout

\begin_layout Subsubsection
MSYS and MinGW Annoyances
\end_layout

\begin_layout Standard
If you use a Windows archiving tool to install binaries into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
usr
\backslash
bin
\emph default
, they will not be seen from inside the MSYS shell! This is because MSYS
 automatically sets the contents of /
\emph on
usr/bin
\emph default
 to be the same as 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin, 
\emph default
which masks out anything in 
\emph on
C:
\backslash
msys
\backslash
usr
\backslash
bin
\emph default
.
 Either move things to 
\emph on
C:
\backslash
msys
\backslash
bin
\emph default
 by hand or extract from the MSYS command line.
\end_layout

\begin_layout Standard
This affects many tools that come as part of database packages or other
 things such as GDAL.
 For this reason, you need to manually move them out of 
\emph on
/usr/bin
\emph default
 and into 
\emph on
/usr/local/bin
\emph default
, where they will run just fine.
 If you follow the instructions in this document precisely, you should have
 all the required executables in the proper directories at the end.
\end_layout

\begin_layout Standard
It is a little more manual work, but has the effect of you ending up with
 a minimum subset of DLLs, EXEs and other dependencies in 
\emph on
/usr/local/bin
\emph default
 and 
\emph on
/usr/local/lib
\emph default
 which you can then move conveniently into another folder when creating
 the final binary package for GRASS.
\end_layout

\begin_layout Standard
For some reason, the standard paths for C API libraries and include files
 (
\emph on
/usr/lib
\emph default
 and 
\emph on
/usr/include
\emph default
) are not included in the default search path in MSYS.
 You can choose to either use 
\emph on
/mingw/lib
\emph default
 and 
\emph on
/mingw/include
\emph default
 or specify paths explicitly when compiling software (which is the approach
 taken in this document, wherever possible).
\end_layout

\begin_layout Standard
The folder that is visible as 
\emph on
/tmp
\emph default
 from within the MSYS shell is a strange sort of link that points to the
 real folder 
\emph on
C:
\backslash
Documents and Settings
\backslash
<username>
\backslash
Local Settings
\backslash
Temp
\emph default
.
 You can access its contents 
\emph on
from the BASH level
\emph default
 (obviously, BASH knows about the pecularities of this folder), e.g.
 you can list files in there using
\end_layout

\begin_layout LyX-Code
ls /tmp
\end_layout

\begin_layout Standard
but many other programs (e.g.
 
\emph on
du
\emph default
) will just hang when trying to access it! You can use 
\emph on
/c/Documents and settings/<username>/Local Settings/Temp
\emph default
 without problems, however!
\end_layout

\begin_layout Section
Visual Studio Express 2005
\begin_inset CommandInset label
LatexCommand label
name "sec:Visual-Studio-Express"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Re-install everything on a new drive and with simpler path in the order
 below!
\end_layout

\begin_layout Plain Layout
ALL BINARIES COMPILED WITH VC8 WILL ONLY RUN IF MSVCR80.dll IS IN THE PATH
 !!! CAN THIS BE RE-DISTRIBUTED W/O LEGAL PROBLEMS?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unfortunately, not all software described in this document can be compiled
 using MinGW at this point.
 For the rare cases where it's necessary, we need to install the Microsoft
 Visual C compiler (VC).
 We will use the 2005 version of the compiler tools (a.k.a VC version 8),
 as this has all we need, runs also fine on Windows 2000 and is less bloated
 than later versions.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Unfortunately, you also need to 
\emph on
first
\emph default
 download and install the 
\begin_inset Quotes eld
\end_inset

Visual C# 2005
\begin_inset Quotes erd
\end_inset

 installation program 
\emph on
vcssetup.exe
\emph default
.
 We don't need this at all, but the setup for VC is buggy and the IDE tools
 will not get installed completely without this.
 Just run 
\emph on
vcssetup.exe
\emph default
 and install into the default without selecting any additional packages.
 <-- THIS STILL TRUE?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A basic version of VC is free.
 Download the 
\begin_inset Quotes eld
\end_inset

Visual Studio Express 2005 Edition for C++
\begin_inset Quotes erd
\end_inset

 from here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.microsoft.com/express/2005/download/default.aspx
\end_layout

\end_inset

 (note: complete images for offline installation can be found here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.microsoft.com/express/2005/download/offline.aspx
\end_layout

\end_inset

).
 Run 
\emph on
vcsetup.exe
\emph default
 to install the software.
 It's enough to install the core compiler toolset.
 Be sure to also install the 
\begin_inset Quotes eld
\end_inset

Graphical IDE
\begin_inset Quotes erd
\end_inset

 as it contains some additional tools that may be needed later.
 Just install it to the default path.
 You want to keep all parts of this software neatly outside the MSYS directory
 structure in order to avoid accidentally packaging and re-distributing
 (parts of) it!
\end_layout

\begin_layout Standard
The installer suggest a ridiculously long base name for the installation
 which will result in a lot of unnecessary typing work for.
 It makes sense to choose a much simpler path for the installation, such
 a 
\emph on
C:
\backslash
vc8
\emph default
 (in the following instructions, this will be assumed as the installation
 directory for Visual C).
\end_layout

\begin_layout Standard
You may want to also download and install 
\begin_inset Quotes eld
\end_inset

Service Pack 1 for Visual C++
\begin_inset Quotes erd
\end_inset

 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.microsoft.com/downloads/details.aspx?FamilyID=7b0b0339-613a-46e6-ab4d-08
0d4d4a8c4e&displaylang=en
\end_layout

\end_inset

 (or using the Microsoft Update Service as suggested by the Visual C installer).
\end_layout

\begin_layout Standard
Next, you need to download and install the 
\begin_inset Quotes eld
\end_inset

Platform SDK
\begin_inset Quotes erd
\end_inset

 from the same web page, if you want to be able to compile OGDI (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:OGDI-3.1.6"

\end_inset

) and possibly other tools that depend on some of the Win32 API include
 files and libraries using VC.
 Instructions can be found here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.microsoft.com/express/2005/platformsdk/default.aspx
\end_layout

\end_inset

.
 You may have to install the 
\begin_inset Quotes eld
\end_inset

Windows Genuine Advantage
\begin_inset Quotes erd
\end_inset

 spyware first in order to download the SDK from the official page.
 Make sure to download the file 
\emph on
PSDK-x86.exe
\emph default
.
 Launch that file to install the SDK files.
 Again, the default path is ridiculous.
 We will assume that the software is installed in 
\emph on
C:
\backslash
SDKR2
\emph default
, instead.
\end_layout

\begin_layout Standard
If the installer is unable to connect to the server to download the .net
 framework (an add-on which we don't need but the installer insists on),
 try this URL: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://filehippo.com/download/file/daa4bc98eeb51fa3813db032f73c171cad36f7f3f69cae
860cc87a97f73ce3de/
\end_layout

\end_inset

 for downloading version 2, SP1 of the SDK.
 You might then want to use Windows Update to fix all those new security
 leaks you just introduced to our system by installing that software \SpecialChar \ldots{}

\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Again, you may want to also download and install the 
\begin_inset Quotes eld
\end_inset

Service Pack 1
\begin_inset Quotes erd
\end_inset

, available here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.microsoft.com/downloads/details.aspx?familyid=A55B6B43-E24F-4EA3-A93E-40
C0EC4F68E5&displaylang=en
\end_layout

\end_inset

.
\end_layout

\begin_layout Plain Layout
-> this seems only to add support for 64 Bit Windows on Server 2003 SP1.
 Not necessary.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
PERFORM STEPS 4 and 5 as detailed here
\end_layout

\begin_layout Plain Layout
http://www.microsoft.com/express/2005/platformsdk/default.aspx
\end_layout

\begin_layout Plain Layout
!!!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The paths to the newly installed Platform SDK include and library files
 need to be added to the VC environment.
\end_layout

\begin_layout Standard
Open the file 
\emph on
C:
\backslash
vs8
\backslash
Common7
\backslash
Tools
\backslash
vsvars32.bat
\emph default
 (this is assuming that you have installed VC in the default location).
 Edit the lines that set the PATH, INCLUDE and LIB locations so that they
 include the new SDK files and the standard 
\emph on
include
\emph default
 and 
\emph on
lib
\emph default
 directories of the MSYS tree.
 Assuming default installation locations (which are awfully long paths with
 plenty of whitespace), the lines should then look something like this:
\end_layout

\begin_layout LyX-Code
@set PATH=C:
\backslash
vs8
\backslash
Common7
\backslash
IDE;C:
\backslash
Programme
\backslash
vs8
\backslash
VC
\backslash
BIN;C:
\backslash
vs8
\backslash
Common7
\backslash
Tools;C:
\backslash
vs8
\backslash
SDK
\backslash
v2.0
\backslash
bin;C:
\backslash
WINNT
\backslash
Microsoft.NET
\backslash
Framework
\backslash
v2.0.50727;C:
\backslash
vs8
\backslash
VC
\backslash
VCPackages;C:
\backslash
SDKR2
\backslash
Bin;%PATH%
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
@set INCLUDE=C:
\backslash
vs8
\backslash
VC
\backslash
INCLUDE;C:
\backslash
SDKR2
\backslash
Include;C:
\backslash
msys
\backslash
1.0
\backslash
include;%INCLUDE%
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
@set LIB=C:
\backslash
vs8
\backslash
VC
\backslash
LIB;C:
\backslash
vs8
\backslash
SDK
\backslash
v2.0
\backslash
lib;C:
\backslash
SDKR2
\backslash
Lib;C:
\backslash
msys
\backslash
1.0
\backslash
lib;%LIB%
\end_layout

\begin_layout Standard
Next, edit the file 
\emph on
C:
\backslash
vs8
\backslash
VC
\backslash
VCProjectDefaults
\backslash
corewin_express.vsprops
\emph default
 file and change the part that reads:
\end_layout

\begin_layout LyX-Code
AdditionalDependencies="kernel32.lib"
\end_layout

\begin_layout Standard
to
\end_layout

\begin_layout LyX-Code
AdditionalDependencies="kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib
 advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib"
\end_layout

\begin_layout Standard
Finally, to enable Win32 application templates in the VC8 IDE, edit the
 file 
\emph on
AppSettings.htm
\emph default
 located in 
\emph on
C:
\backslash
vs8
\backslash
VC
\backslash
VCWizards
\backslash
AppWiz
\backslash
Generic
\backslash
Application
\backslash
html
\backslash
1033
\backslash

\emph default
.
 Comment out lines 441 - 444 so that they read:
\end_layout

\begin_layout LyX-Code
// WIN_APP.disabled = true;
\end_layout

\begin_layout LyX-Code
// WIN_APP_LABEL.disabled = true; 
\end_layout

\begin_layout LyX-Code
// DLL_APP.disabled = true; 
\end_layout

\begin_layout LyX-Code
// DLL_APP_LABEL.disabled = true; 
\end_layout

\begin_layout Standard
In order to be able and compile source code using Windows' 
\emph on
cmd.exe
\emph default
, you need to set a few system variables.
 VC comes with a little batch file 
\emph on
vcvars32.bat
\emph default
 that sits in the folder 
\emph on
VC
\backslash
bin
\emph default
 inside your Visual Studio Express installation folder.
 Run it in order to set up the current 
\emph on
cmd.exe
\emph default
 environment.
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Section

\color red
Cygwin 1.5.25-7
\begin_inset Note Note
status open

\begin_layout Plain Layout

\color red
We are basically setting this up for sockets support for now
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Cygwin"

\end_inset


\end_layout

\begin_layout Standard
Download the latest version of 
\emph on
setup.exe
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.cygwin.com/
\end_layout

\end_inset

 (just click the 
\begin_inset Quotes eld
\end_inset

Install Cygwin Now
\begin_inset Quotes erd
\end_inset

 icon on the top right of th page) and save it to any folder.
\end_layout

\begin_layout Standard
Run setup.exe.
 Choose 
\begin_inset Quotes eld
\end_inset

Download Without Installing
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Select any convenient folder as 
\begin_inset Quotes eld
\end_inset

Local Package Directory
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Confirm your network settings and choose a download site close to you.
\end_layout

\begin_layout Standard
You will now be presented with the 
\begin_inset Quotes eld
\end_inset

Select Packages
\begin_inset Quotes erd
\end_inset

 screen.
 We will only make a very minimal selection here.
 The easiest things is to just keep the default selection and press 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Once the packages have been downloaded, restart 
\emph on
setup.exe
\emph default
 and this time choose to 
\begin_inset Quotes eld
\end_inset

Install from Local Directory
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Make sure that the 
\begin_inset Quotes eld
\end_inset

Root Directory
\begin_inset Quotes erd
\end_inset

 is set to the same folder you chose previously.
\end_layout

\begin_layout Standard
Choose to install for 
\begin_inset Quotes eld
\end_inset

Just Me
\begin_inset Quotes erd
\end_inset

.
 and Press 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The Local Package Directory should be detected correctly.
 Press 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Leave the packages selection as it is and press 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
 The installation should now commence.
\end_layout

\begin_layout Standard
Copy 
\emph on
C:
\backslash
cygwin
\backslash
bin
\backslash
cygwin1.dll
\emph default
 to 
\emph on
C:
\backslash
MinGW
\backslash
lib
\emph default
.
\end_layout

\begin_layout Standard
Copy the files 
\emph on
cdefs.h
\emph default
, 
\emph on
config.h, cygwin.h, features.h, select.h, signal.h, socket.h, sysmacros.h, uio.h
 
\emph default
and
\emph on
 un.h
\emph default
 from 
\emph on
C:
\backslash
cygwin
\backslash
usr
\backslash
include
\backslash
sys
\emph default
 to 
\emph on
C:
\backslash
MinGW
\backslash
include
\backslash
sys
\emph default
.
\end_layout

\begin_layout Standard
Copy the files 
\emph on
_ansi.h, endian.h, features.h, newlib.h
\emph default
 and the whole folders 
\emph on
asm, cygwin, machine 
\emph default
and 
\emph on
netinet
\emph default
 from 
\emph on
C:
\backslash
cygwin
\backslash
usr
\backslash
include
\emph default
 to 
\emph on
C:
\backslash
MinGW
\backslash
include.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Note: getting support for Cygwin.dll into GRASS is possible in theory but
 very complex and it is unclear whether sockets it will ever work due to
 the fact that MinGW only supports a subset of Cygwin's capabilities.
 It is unclear whether things like sockets in the filesystem work without
 further Cygwin components.
 In addition, much of the code has already been altered for compilation
 on MINGW, steering it away from Cygwin, which is closer to Linux! The code
 for sockets assumes a Unix system and thus does very general things, such
 as directory separators, the path to /tmp (which does not really exist
 on MSYS!) etc wrong, calling for A LOT of changes in many places of the
 GRASS lib and driver source codes.
 Thus, the attempt to get sockets supported via Cygwin1.dll on MinGW has
 been aborted at this point.
 All changed files have been packaged into 
\emph on
cygwin-dll-support.zip
\emph default
 and copied to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout Plain Layout
A more promising approach seems to be this one as outlined by Glynn Clements:
\end_layout

\begin_layout Quote
Although WinSock is modelled on the "BSD sockets API", the problem is that
 the BSD sockets API isn't actually a self-contained API, but an extension
 to the core Unix API.
\end_layout

\begin_layout Quote
So, while WinSock provides BSD-style socket(), bind(), listen(), accept(),
 connect() etc functions, it differs in one very important aspect.
\end_layout

\begin_layout Quote
The descriptors which those functions return on Unix are normal file descriptors
, which work with read() and write(), and can be passed to fdopen() to get
 a FILE* which works with the <stdio.h> functions.
\end_layout

\begin_layout Quote
OTOH, the WinSock versions return an abstract handle which doesn't appear
 to be compatible with the POSIX functions in the MSVCRT.
\end_layout

\begin_layout Quote
Looking at MSDN, it appears that you ought to be able to convert the SOCKET
 to a descriptor using _open_osfhandle(), but I never got it to work.
\end_layout

\begin_layout Quote
> > Or do we need a more complex compatibility layer, such as provided by
 > > the Mozilla cross platform SDK: > > http://www.xulplanet.com/tutorials/mozsdk
/sockets.php ???
\end_layout

\begin_layout Quote
There's no need to go that far.
 It would be easier to just have separate Unix and Windows versions of all
 the relevant functions than to use a third-party layer such as NSPR or
 APR.
\end_layout

\begin_layout Quote
> > If anyone could cut out the work that needs to be done more precisely
 > > for me, I would like to give it a try ...
\end_layout

\begin_layout Quote
Essentially, the code in lib/gis/unix_socks.c (which will use WinSock SOCKETs)
 needs to be reconciled with the code which requires descriptors, namely:
\end_layout

\begin_layout Quote
lib/raster/io_sock.c lib/raster/rem_io.c
\end_layout

\begin_layout Quote
lib/driver/main.c lib/driver/connect_sock.c lib/driver/command.c
\end_layout

\begin_layout Quote
You can probably get around the use of read() and write() by using recv()
 and send() instead.
 The latter functions are part of WinSock, so work with SOCKETs.
\end_layout

\begin_layout Quote
Note that you'll need to use -DUSE_TCP to use TCP sockets instead of Unix-domain
 sockets.
\end_layout

\begin_layout Quote
Alternatively, you might be able to use Windows named pipes instead; AFAICT,
 those are closer to Unix-domain sockets than to Unix named pipes.
\end_layout

\begin_layout Subsection*
Further changes to the include files
\end_layout

\begin_layout Subsubsection*
/mingw/include/cygwin/stdint.h
\end_layout

\begin_layout Plain Layout
Copied 
\emph on
C:
\backslash
cygwin
\backslash
include
\backslash
stdint.h
\emph default
 to this location to have an isolated version to be referenced by 
\emph on
/mingw/include/cygwin/types.h
\emph default
.
 
\end_layout

\begin_layout Plain Layout
Extensive commenting out of definitions to avoid clashes with MinGW's integer
 types:
\end_layout

\begin_layout Plain Layout
line 43: 
\end_layout

\begin_layout LyX-Code
//typedef __loff_t loff_t;
\end_layout

\begin_layout Plain Layout
line 52:
\end_layout

\begin_layout LyX-Code
//typedef __dev16_t dev_t;
\end_layout

\begin_layout Plain Layout
line 111: 
\end_layout

\begin_layout LyX-Code
//typedef __ino32_t ino_t;
\end_layout

\begin_layout Plain Layout
line 182:
\end_layout

\begin_layout LyX-Code
//typedef __uint16_t u_int16_t;
\end_layout

\begin_layout Plain Layout
line 186: 
\end_layout

\begin_layout LyX-Code
//typedef __uint32_t u_int32_t;
\end_layout

\begin_layout Plain Layout
line 190:
\end_layout

\begin_layout LyX-Code
//typedef __uint64_t u_int64_t;
\end_layout

\begin_layout Plain Layout
line 195: 
\end_layout

\begin_layout LyX-Code
//typedef __int32_t register_t;
\end_layout

\begin_layout Plain Layout
line 205: 
\end_layout

\begin_layout LyX-Code
//typedef unsigned mode_t;
\end_layout

\begin_layout Subsubsection*
/mingw/include/errno.h (line 70):
\end_layout

\begin_layout LyX-Code
// added from Cygwin's sys/errno.h
\end_layout

\begin_layout LyX-Code
#define ENOTSOCK 108 /* Socket operation on non-socket */
\end_layout

\begin_layout LyX-Code
#define ECONNREFUSED 111 /* Connection refused */
\end_layout

\begin_layout LyX-Code
#define EADDRINUSE 112 /* Address already in use */
\end_layout

\begin_layout LyX-Code
#define ETIMEDOUT 116 /* Connection timed out */
\end_layout

\begin_layout Subsubsection*
/ming/include/sys/signal.h:
\end_layout

\begin_layout Plain Layout
This is a massively reduced version of Cygwin's signal.h.
\end_layout

\begin_layout Plain Layout
It contains not much more then the definitions needed by GRASS to compile.
\end_layout

\begin_layout Plain Layout
Also, one conflicting definition has been commented out:
\end_layout

\begin_layout LyX-Code
//typedef unsigned long sigset_t;
\end_layout

\begin_layout Subsubsection*
/ming/include/cygwin/if.h:
\end_layout

\begin_layout Plain Layout
lines 18 + 19: include files from 
\begin_inset Quotes eld
\end_inset

cygwin
\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

sys
\begin_inset Quotes erd
\end_inset

 to avoid circular dependencies with MinGW's include files:
\end_layout

\begin_layout LyX-Code
#include <cygwin/types.h> 
\end_layout

\begin_layout LyX-Code
#include <cygwin/socket.h>
\end_layout

\begin_layout Plain Layout
line 74 ++: commented out definition to avoid having to include more header
 files:
\end_layout

\begin_layout LyX-Code
struct ifconf { 
\end_layout

\begin_layout LyX-Code
  int ifc_len;         /* size of buffer */ 
\end_layout

\begin_layout LyX-Code
  union { 
\end_layout

\begin_layout LyX-Code
    //caddr_t ifcu_buf; 
\end_layout

\begin_layout LyX-Code
    //struct ifreq *ifcu_req; 
\end_layout

\begin_layout LyX-Code
  } ifc_ifcu; 
\end_layout

\begin_layout LyX-Code
};
\end_layout

\begin_layout Subsubsection*
/mingw/include/sys/stat.h
\end_layout

\begin_layout Plain Layout
line 75: added some definitions taken from Cygwin's 
\emph on
sys/stat.h
\emph default
:
\end_layout

\begin_layout LyX-Code
#define _IFMT 0170000 /* type of file */ 
\end_layout

\begin_layout LyX-Code
#define _IFSOCK 0140000 /* socket */ 
\end_layout

\begin_layout LyX-Code
#define S_ISSOCK(m) (((m)&_IFMT) == _IFSOCK)
\end_layout

\begin_layout Subsubsection*
/mingw/include/sys/types.h
\end_layout

\begin_layout Plain Layout
A few definitions were added here in order to avoid trouble with needing
 the full-blown definitions in Cygwin's sys/types.h (which would then conflict
 with MinGW's in turn\SpecialChar \ldots{}
).
\end_layout

\begin_layout Plain Layout
Starting at line 118: added the definition block for 
\begin_inset Quotes eld
\end_inset

fd_set
\begin_inset Quotes erd
\end_inset

 from Cygwin's version of the file
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Plain Layout
\SpecialChar \ldots{}
 BEFORE the statement 
\end_layout

\begin_layout LyX-Code
#endif /* Not RC_INVOKED */
\end_layout

\begin_layout Subsection*
Changes to GRASS source files
\end_layout

\begin_layout LyX-Code
cp /mingw/lib/cygwin1.dll /ming/lib/socket.dll
\end_layout

\begin_layout LyX-Code
cp /mingw/lib/cygwin1.dll /usr/bin
\end_layout

\begin_layout Plain Layout
For BSD style sockets support via Cygwin's Linux compatibility DLL (see
 
\begin_inset CommandInset ref
LatexCommand vref
reference "Cygwin"

\end_inset

), we need to hack the 
\emph on
configure
\emph default
 script a little bit.
 Find the following statement at ca.
 line 6576:
\end_layout

\begin_layout LyX-Code
if { (eval echo configure:6578: 
\backslash
"$ac_link
\backslash
") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then
\end_layout

\begin_layout Plain Layout
and change it to:
\end_layout

\begin_layout LyX-Code
if { (eval echo configure:6578: 
\backslash
"$ac_link
\backslash
") 1>&5; (eval "$ac_link -lsocket") 2>&5; } && test -s conftest${ac_exeext};
 then
\end_layout

\begin_layout Subsubsection*
lib/gis/Makefile, lib/driver/Makefile, lib/raster/Makefile (line 4): 
\end_layout

\begin_layout Plain Layout
added 
\begin_inset Quotes eld
\end_inset

-lcygwin1
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
EXTRA_LIBS = $(XDRLIB) $(DATETIMELIB) $(INTLLIB) -lcygwin1
\end_layout

\begin_layout Subsection*
lib/driver/main.c
\end_layout

\begin_layout Plain Layout
changed all 
\begin_inset Quotes erd
\end_inset

__MINGW32__
\begin_inset Quotes erd
\end_inset

 clauses to:
\end_layout

\begin_layout LyX-Code
#ifdef __MINGW322__
\end_layout

\begin_layout Plain Layout
...
 to prevent Unix specific code from being skipped
\end_layout

\begin_layout Plain Layout
Instead of
\end_layout

\begin_layout LyX-Code
#include <signal.h>
\end_layout

\begin_layout Plain Layout
we include
\end_layout

\begin_layout LyX-Code
#include <sys/signal.h>
\end_layout

\begin_layout Plain Layout
for more complete POSIX definitions.
\end_layout

\begin_layout Subsection*
lib/driver/connect_sock.c
\end_layout

\begin_layout Plain Layout
changed all 
\begin_inset Quotes erd
\end_inset

__MINGW32__
\begin_inset Quotes erd
\end_inset

 clauses to:
\end_layout

\begin_layout LyX-Code
#ifdef __MINGW322__
\end_layout

\begin_layout Plain Layout
...
 to prevent Unix specific code from being skipped
\end_layout

\begin_layout Subsubsection*
lib/gis/unix_socks.c (line 41):
\end_layout

\begin_layout Plain Layout
changed 
\begin_inset Quotes erd
\end_inset

__MINGW32__
\begin_inset Quotes erd
\end_inset

 clause to:
\end_layout

\begin_layout LyX-Code
#ifdef __MINGW322__
\end_layout

\begin_layout Plain Layout
...
 to prevent Winsock code from being used
\end_layout

\begin_layout Subsubsection*
lib/raster/io_sock.c (line 13): 
\end_layout

\begin_layout Plain Layout
changed 
\begin_inset Quotes erd
\end_inset

__MINGW32__
\begin_inset Quotes erd
\end_inset

 clause to:
\end_layout

\begin_layout LyX-Code
#ifdef __MINGW322__
\end_layout

\begin_layout Plain Layout
...
 to prevent Winsock code from being used
\end_layout

\begin_layout Subsubsection*
lib/raster/rem_io.c: 
\end_layout

\begin_layout Plain Layout
changed all 
\begin_inset Quotes erd
\end_inset

__MINGW32__
\begin_inset Quotes erd
\end_inset

 clauses to:
\end_layout

\begin_layout LyX-Code
#ifdef __MINGW322__
\end_layout

\begin_layout Plain Layout
...
 to prevent Unix specific code from being skipped
\end_layout

\begin_layout Plain Layout
Instead of
\end_layout

\begin_layout LyX-Code
#include <signal.h>
\end_layout

\begin_layout Plain Layout
we include
\end_layout

\begin_layout LyX-Code
#include <sys/signal.h>
\end_layout

\begin_layout Plain Layout
for more complete POSIX definitions.
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Scripting Languages
\begin_inset CommandInset label
LatexCommand label
name "sec:Scripting-Languages"

\end_inset


\end_layout

\begin_layout Standard
A lot of the software discussed here supports scripting in Tcl, Perl and/or
 Python.
 Some installers or tools need a certain scripting language (e.g.
 SQLite, 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:SQLite"

\end_inset

, needs Tcl, R, 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:R-2.6.0-from-bins"

\end_inset

, needs Perl).
 Thus, it is recommended to install everything in this section.
\end_layout

\begin_layout Subsection

\color red
Tcl/Tk 8.4.15
\color inherit

\begin_inset CommandInset label
LatexCommand label
name "sub:Tcl/Tk-old"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
GET RID OF THIS IF 8.5.1 works !!!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tcl/Tk is a venerable programming language and GUI toolkit for rapid development
 of stable applications.
\end_layout

\begin_layout Standard
Tcl support is mandatory for SQLite database support (even if you choose
 not to install SQLite's Tcl bindings!) and also useful for the traditional
 GRASS GUI.
 Tcl/Tk 8.4 is a lightweight and stable package, so you don't need to think
 twice about installing this, really.
\end_layout

\begin_layout Standard
Get 8.4.15 (both 
\emph on
tcl8.4.15-src.tar.gz
\emph default
 and 
\emph on
tk8.4.15-src.tar.gz
\emph default
) from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.tcl.tk/software/tcltk/downloadnow84.html
\end_layout

\end_inset

 and save both to the 
\emph on
source
\emph default
 directory.
\end_layout

\begin_layout Standard
Compile and install Tcl:
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzvf tcl8.4.15-src.tar.gz
\end_layout

\begin_layout LyX-Code
cd tcl8.4.15/win
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr/local
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout LyX-Code
cp /usr/local/bin/tclsh84.exe /usr/local/bin/tclsh.exe
\end_layout

\begin_layout Standard
Install the Tk GUI widgets:
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzvf tk8.4.15-src.tar.gz
\end_layout

\begin_layout LyX-Code
cd tk8.4.15/win
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr/local
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout LyX-Code
cp /usr/local/bin/wish84.exe /usr/local/bin/wish.exe
\end_layout

\begin_layout Standard
Give it a test-run:
\end_layout

\begin_layout LyX-Code
wish
\end_layout

\begin_layout Standard
Should start a Tk window and a Tcl shell.
 Type
\end_layout

\begin_layout LyX-Code
exit
\end_layout

\begin_layout Standard
To close both.
\end_layout

\begin_layout Subsubsection
\begin_inset Branch to-be-removed
status collapsed

\begin_layout Standard
ActiveTcl 8.4.16
\end_layout

\begin_layout Standard
This is an alternative to the open source Tcl which comes bundled with a
 lot of additional stuff.
 At the moment, there seems to be no reason for running ActiveTcl instead
 of the open source version, as far as GRASS is concerned.
 These notes stay here for historical reasons.
\end_layout

\begin_layout Standard
Download 
\emph on
ActiveTcl8.4.16.0.282109-win32-ix86-threaded.exe
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.activestate.com
\end_layout

\end_inset

 and save it into any folder.
 This contains binary shared libraries and header files for development.
 Start the 
\emph on
ex
\emph default
e file and install Tcl/Tk.
\end_layout

\begin_layout Standard
For our purposes, it's enough to install for the current user only.
\end_layout

\begin_layout Standard
Disable the registry settings.
\end_layout

\begin_layout Standard
Install the software into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
tcl
\emph default
.
\end_layout

\begin_layout Standard
Install the demos into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
tcl
\emph default

\backslash

\emph on
demos
\emph default
.
\end_layout

\begin_layout Standard
Uninstall the GPL version of TclTk:
\end_layout

\begin_layout LyX-Code
rm /usr/local/lib/libtcl*
\end_layout

\begin_layout LyX-Code
rm /usr/local/lib/libtk*
\end_layout

\begin_layout LyX-Code
rm /usr/local/lib/tcl* -rf
\end_layout

\begin_layout LyX-Code
rm /usr/local/lib/tk* -rf
\end_layout

\begin_layout LyX-Code
rm /usr/local/bin/tcl*
\end_layout

\begin_layout LyX-Code
rm /usr/local/bin/tk*
\end_layout

\begin_layout LyX-Code
rm /usr/local/bin/wish*
\end_layout

\begin_layout LyX-Code
rm /usr/local/include/tcl*
\end_layout

\begin_layout LyX-Code
rm /usr/local/include/tk*
\end_layout

\begin_layout Standard
Now, copy the mandatory ActiveTcl binaries and headers into place:
\end_layout

\begin_layout LyX-Code
cp /tcl/bin/tclsh* /usr/local/bin
\end_layout

\begin_layout LyX-Code
cp /tcl/wish* /usr/local/bin
\end_layout

\begin_layout LyX-Code
cp /tcl/bin/tcl84.dll /usr/local/bin
\end_layout

\begin_layout LyX-Code
cp /tcl/bin/tk84.dll /usr/local/bin
\end_layout

\begin_layout LyX-Code
cp /tcl/lib/tcl8.4 /usr/local/lib/ -R
\end_layout

\begin_layout LyX-Code
cp /tcl/lib/tk8.4 /usr/local/lib/ -R
\end_layout

\begin_layout LyX-Code
cp /tcl/include/* /usr/local/include -R
\end_layout

\begin_layout Standard
We have all we need now.
 You can remove the 
\emph on
tcl
\emph default
 directory:
\end_layout

\begin_layout LyX-Code
rm /tcl -rf
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tcl/Tk 8.5.1
\begin_inset CommandInset label
LatexCommand label
name "sub:Tcl/Tk"

\end_inset


\end_layout

\begin_layout Standard
Tcl/Tk is a venerable programming language and GUI toolkit for rapid development
 of stable applications.
\end_layout

\begin_layout Standard
Tcl support is mandatory for SQLite database support (even if you choose
 not to install SQLite's Tcl bindings!) and also useful for the traditional
 GRASS GUI.
 Tcl/Tk 8.5 is a lightweight and stable package, so you don't need to think
 twice about installing this, really.
\end_layout

\begin_layout Standard
Get 8.5.1 (both 
\emph on
tcl8.5.1-src.tar.gz
\emph default
 and 
\emph on
tk8.5.1-src.tar.gz
\emph default
) from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.tcl.tk/software/tcltk/download.html
\end_layout

\end_inset

 and save both to the 
\emph on
source
\emph default
 directory.
\end_layout

\begin_layout Standard
Compile and install Tcl:
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzvf tcl8.5.1-src.tar.gz
\end_layout

\begin_layout LyX-Code
cd tcl8.5.1/win
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr/local
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout LyX-Code
cp /usr/local/bin/tclsh85.exe /usr/local/bin/tclsh.exe
\end_layout

\begin_layout Standard
Install the Tk GUI widgets:
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzvf tk8.5.1-src.tar.gz
\end_layout

\begin_layout LyX-Code
cd tk8.5.1/win
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr/local
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout LyX-Code
cp /usr/local/bin/wish84.exe /usr/local/bin/wish.exe
\end_layout

\begin_layout Standard
Give it a test-run:
\end_layout

\begin_layout LyX-Code
wish
\end_layout

\begin_layout Standard
Should start a Tk window and a Tcl shell.
 Type
\end_layout

\begin_layout LyX-Code
exit
\end_layout

\begin_layout Standard
To close both.
\end_layout

\begin_layout Subsection
Perl 5.6.1
\begin_inset CommandInset label
LatexCommand label
name "sub:Perl-5.6.1"

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
We need to copy a minimal Perl system across to the final installation target
 if we want the user later to be able and use R.cmd for R package maintenance!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Perl is an efficient scripting language required e.g.
 by 
\emph on
R.cmd
\emph default
 to manage R packages.
\end_layout

\begin_layout Standard
Download the file 
\emph on
perl-5.6.1-MSYS-1.0.11.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435&package_id=67879
\end_layout

\end_inset

 and save it to any folder.
 Install Perl by unpacking the contents of folder 
\emph on
usr
\emph default
 in the zipfile to 
\emph on
C:
\backslash
msys
\backslash
1.0
\emph default
.
\end_layout

\begin_layout Subsection
Python 2.5.2
\begin_inset CommandInset label
LatexCommand label
name "sub:Python"

\end_inset


\end_layout

\begin_layout Standard
Python is the primary scripting language used by GDAL, Quantum GIS and (soon)
 GRASS.
 We will simply use the binary installer for Windows.
\end_layout

\begin_layout Standard
Download the official installer for Python version 2.5.2 (
\emph on
python-2.5.2.msi
\emph default
) from here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.python.org/download/windows/
\end_layout

\end_inset

 and run it.
 Since our aim is to create a self-contained package in the end, choose
 
\begin_inset Quotes eld
\end_inset

Install just for me
\begin_inset Quotes erd
\end_inset

 and install into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
python
\emph default
 (choose to not register the extensions).
\end_layout

\begin_layout Standard
Also, you may want to add 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
python
\backslash

\emph default
 to your Environment Variables Path in the Windows system preferences to
 make your life easier when compiling applications with Qt support.
\end_layout

\begin_layout Standard
You may also want to add a line:
\end_layout

\begin_layout LyX-Code
export PATH="$PATH:/usr/local/python"
\end_layout

\begin_layout Standard
to 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
etc
\backslash
profile 
\emph default
to make it more convenient for you to start the Python interpreter from
 the MSYS shell.
 
\end_layout

\begin_layout Standard
Note, however, that the python interactive shell seems not to work under
 MSYS at the moment!
\end_layout

\begin_layout Standard
Finally, copy 
\emph on
python25.dll
\emph default
 to 
\emph on
c:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
bin:
\end_layout

\begin_layout LyX-Code
cp /usr/local/python/python25.dll /usr/local/bin/
\end_layout

\begin_layout Subsubsection
NumPy 1.0.4
\end_layout

\begin_layout Standard
In addition, we will install NumPy, which is a fast array facility that
 is needed by GDAL and QGIS for their Python (SWIG) interfaces.
\end_layout

\begin_layout Standard
Get the file 
\emph on
numpy-1.0.4.win32-py2.5.msi
\emph default
 (i.e.
 the version for Python 2.5!) from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://numpy.scipy.org/
\end_layout

\end_inset

 and save it to any folder.
\end_layout

\begin_layout Standard
Launch the MSI installer file.
 Select 
\begin_inset Quotes eld
\end_inset

Install just for me
\begin_inset Quotes erd
\end_inset

 and choose to install into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
python
\emph default
 (the path to your local python installation should be correctly predicted
 by the installer).
\end_layout

\begin_layout Subsubsection
Setuptools
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

setuptools
\begin_inset Quotes erd
\end_inset

 are a Python extension that is used by GDAL to deploy its Python bindings.
 Installation is done via a little Python tool (more details here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://peak.telecommunity.com/DevCenter/EasyInstall#installation-instructions
\end_layout

\end_inset

).
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
wget -c http://peak.telecommunity.com/dist/ez_setup.py
\end_layout

\begin_layout LyX-Code
python ez_setup.py
\end_layout

\begin_layout Standard
And that's it!
\end_layout

\begin_layout Subsubsection
Python Extensions for Windows
\end_layout

\begin_layout Standard
The Python GUI for GRASS needs these extensions to work.
\end_layout

\begin_layout Standard
Go to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=78018
\end_layout

\end_inset

, download the file 
\emph on
pywin32-210.win32-py2.5.exe 
\emph default
and save it to any folder.
\end_layout

\begin_layout Standard
Run the 
\emph on
.exe
\emph default
 file.
 The installer should correctly predict the path to your Python installation
 to be 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
python
\backslash

\emph default
.
 Commence the installation with default settings.
\end_layout

\begin_layout Subsection
SWIG 1.3.34
\end_layout

\begin_layout Standard
SWIG is an interface 
\begin_inset Quotes eld
\end_inset

glue
\begin_inset Quotes erd
\end_inset

 that connects low-level programming APIs such as C/C++ to high-level ones,
 such as Python.
 It is used by a number of programmes to provide access to low-level functions
 for script programmers.
\end_layout

\begin_layout Standard
Download 
\emph on
swig-1.3.34.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.swig.org/download.html
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout Standard

\color red
First, you will need to copy a library so that the configure script will
 run through.
\begin_inset Note Note
status open

\begin_layout Plain Layout

\color red
clearly not an optimal solution.
 Is guile really needed, anyhow?
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\color red
cp /bin/libltdl-3.dll /bin/msys-ltdl-3.dll
\end_layout

\begin_layout Standard
Next configure and compile the software:
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf swig-1.3.34.tar.gz
\end_layout

\begin_layout LyX-Code
cd swig-1.3.34
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
This should generate SWIG interfaces for all scripting languages installed
 up to this point (plus a whole bunch of others).
\end_layout

\begin_layout Section
Database Support
\begin_inset CommandInset label
LatexCommand label
name "sec:Database-Support"

\end_inset


\end_layout

\begin_layout Standard
GRASS supports storage of vector map attributes in a number of different
 DBMS.
 
\end_layout

\begin_layout Standard
For these instructions, it will be assumed that you download source file
 packages listed in this section into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
src
\emph default
.
 We will refer to this as the 
\emph on
source
\emph default
 directory.
\end_layout

\begin_layout Subsection
ODBC 
\begin_inset CommandInset label
LatexCommand label
name "ODBC"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Do we need to re-distribute the renamed DLLs? Is that legal?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ODBC support is part of the standard Win32 functionality.
 A recent version of MinGW's Win32 API should have the necessary header
 file 
\emph on
sql.h
\emph default
.
 In addition, you need to copy over
\emph on
 odbc32.dll
\emph default
 to a location where the MSYS shell and the GRASS configure script can see
 it.
 On a Windows 2000 system, the library we need is located in 
\emph on
C:
\backslash
WINNT
\backslash
system32
\emph default
.
 On XP it is in 
\emph on
C:
\backslash
WINDOWS
\backslash
system32
\emph default
.
\end_layout

\begin_layout Standard
You also need to rename the library to 
\emph on
odbc.dll
\emph default
 so the GRASS and GDAL configure scripts will detect it.
 E.g., on a Windows 2000 system, do:
\end_layout

\begin_layout LyX-Code
cp /c/WINDOWS/system32/odbc32.dll /usr/lib/odbc.dll
\end_layout

\begin_layout LyX-Code
cp /c/WINDOWS/system32/odbc32.dll /usr/lib/odbcinst.dll
\end_layout

\begin_layout Standard
Note: In order to correctly parse the declarations in the odbc header files
 (
\emph on
sqltype.h
\emph default
, etc.), the file 
\emph on
/mingw/include/windows.h
\emph default
 needs to be included in every source file that uses ODBC function calls
 (especially important for GRASS ODBC support: see notes in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Configuration-and-Installation"

\end_inset

).
\end_layout

\begin_layout Standard
Note: Windows' own 
\emph on
odbc32.dll
\emph default
 is not free software and cannot be re-distributed freely! This should not
 be necessary, however, as every Windows installation should come with a
 copy of it.
 To make sure you do not accidentally re-distribute a copy, you may want
 to delete 
\emph on
odbc.dll
\emph default
 from 
\emph on
/usr/lib
\emph default
 after you have finished linking your software to it.
\end_layout

\begin_layout Subsection
SQLite 3.5.6
\begin_inset CommandInset label
LatexCommand label
name "sub:SQLite"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
UPDATE: this is what 
\begin_inset Quotes eld
\end_inset

The Definitive Guide to SQLite
\begin_inset Quotes erd
\end_inset

 says:
\end_layout

\begin_layout Plain Layout
9.
 Unpack the SQLite tarball.
 Issue this command:
\end_layout

\begin_layout Plain Layout
tar -xzvf sqlite-3.3.4.tar.gz
\end_layout

\begin_layout Plain Layout
10.
 Move into the unpacked directory:
\end_layout

\begin_layout Plain Layout
cd sqlite-3.3.4
\end_layout

\begin_layout Plain Layout
11.
 Create the Makefile.
 For a single-threaded DLL, run
\end_layout

\begin_layout Plain Layout
./configure
\end_layout

\begin_layout Plain Layout
12.
 If you want to create a multithreaded DLL, run
\end_layout

\begin_layout Plain Layout
./configure --enable-threads
\end_layout

\begin_layout Plain Layout
13.
 Build the source:
\end_layout

\begin_layout Plain Layout
make
\end_layout

\begin_layout Plain Layout
14.
 Create the SQLite DLL:
\end_layout

\begin_layout Plain Layout
dllwrap --dllname sqlite3.dll --def sqlite3.def *.o
\end_layout

\begin_layout Plain Layout
15.
 Create the import library:
\end_layout

\begin_layout Plain Layout
dlltool --def sqlite3.def --dllname sqlite3.dll --output-lib sqlite3.lib
\end_layout

\begin_layout Plain Layout
You now have a functional SQLite DLL and import library.
 To build a version of the SQLite
\end_layout

\begin_layout Plain Layout
CLP that links against the SQLite DLL you just created, within the MSYS
 environment run the
\end_layout

\begin_layout Plain Layout
command
\end_layout

\begin_layout Plain Layout
gcc -I .
 src/shell.c -o sqlite3.exe sqlite3.lib
\end_layout

\begin_layout Plain Layout
Now from Windows Explorer, navigate to the temporary folder and double-click
 on sqlite3.exe.
\end_layout

\begin_layout Plain Layout
You now have a working SQLite CLP, which uses the SQLite DLL you created.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
SQLite is a drop-in replacement for DBF as a file-based attribute data storage
 that is more flexible and less limited (e.g.
 no 2 GB maximum file size limit, long field names, etc.).
\end_layout

\begin_layout Standard
Download 
\emph on
sqlite-3.5.6.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.sqlite.org
\end_layout

\end_inset

 and save it into the 
\emph on
source
\emph default
 directory.
 
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzvf sqlite-3.5.6.tar.gz
\end_layout

\begin_layout LyX-Code
cd sqlite-3.5.6
\end_layout

\begin_layout LyX-Code
./configure --bindir=/usr/local/bin --prefix=/usr --disable-static --enable-share
d --disable-tcl
\begin_inset Note Note
status open

\begin_layout Plain Layout
because this does not work with Tcl/Tk 8.5 currently! Not needed, anyway.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next fix the 
\emph on
Makefile
\emph default
.
 Open it in a text editor and find the lines that specify the READLINE_FLAGS
 and LIBREADLINE variables (this needs to be done after every run of the
 
\emph on
configure
\emph default
 script and before starting 
\emph on
make
\emph default
!).
 Change them to this:
\end_layout

\begin_layout LyX-Code
# Compiler options needed for programs that use the readline() library.
 
\end_layout

\begin_layout LyX-Code
# 
\end_layout

\begin_layout LyX-Code
READLINE_FLAGS = -DHAVE_READLINE=1 -I/usr/include
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# The library that programs using readline() must link against.
 
\end_layout

\begin_layout LyX-Code
# 
\end_layout

\begin_layout LyX-Code
LIBREADLINE = -L/usr/lib -lreadline -lcurses 
\end_layout

\begin_layout Standard
Next, compile the source code:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
We now need to create the DLL files for Win32 and install all needed binaries
 and header files manually, as the 
\begin_inset Quotes eld
\end_inset

make install
\begin_inset Quotes erd
\end_inset

 fails for various reasons with MinGW:
\end_layout

\begin_layout LyX-Code
make sqlite3.dll
\end_layout

\begin_layout LyX-Code
cp sqlite3.dll /usr/lib/sqlite3.dll
\end_layout

\begin_layout LyX-Code
cp sqlite3.h /usr/include
\end_layout

\begin_layout LyX-Code
cp sqlite3.exe /usr/local/bin
\end_layout

\begin_layout Subsection
MySQL 5.0.51a from source
\begin_inset CommandInset label
LatexCommand label
name "sub:MySQL-src"

\end_inset


\end_layout

\begin_layout Standard
Note: Installation from source does not work with MinGW, yet.
 For now, use the installation from binaries instructions given in the next
 section!
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
MySQL is currently not adequately prepared for compilation on modern MinGW
 systems.
 Many include files assume a Windows machine instead of something 
\begin_inset Quotes eld
\end_inset

Cygwin like
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Plain Layout

\color red
Currently, compilation aborts with:
\end_layout

\begin_layout LyX-Code

\color red
In file included from ../include/my_global.h:311,
\end_layout

\begin_layout LyX-Code

\color red
from strxmov.c:33:
\end_layout

\begin_layout LyX-Code

\color red
C:/MinGW/bin/../lib/gcc/mingw32/3.4.2/../../../../include/stdio.h:369: error: syntax
 error before '(' token
\end_layout

\begin_layout LyX-Code

\color red
C:/MinGW/bin/../lib/gcc/mingw32/3.4.2/../../../../include/stdio.h:369: error: syntax
 error before "const"
\end_layout

\begin_layout Plain Layout

\color red
In folder 
\begin_inset Quotes eld
\end_inset

strings
\begin_inset Quotes erd
\end_inset

, which are the cross-platform string processing routines.
 This maybe something todo with some system headers not being included properly/
in proper order.
\end_layout

\begin_layout Plain Layout

\color red
There are hints here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://dev.mysql.com/doc/refman/5.0/en/windows-client-compiling.html
\end_layout

\end_inset

, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.dvrsol.com/programming.html#mymingw
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\color red
MAYBE CHANGE ALL *cygwin* to *mingw* in the configure script?
\color inherit
 NO! Many instances for mingw are already in there.
\end_layout

\begin_layout Plain Layout

\color red
[pthreads support can be added using this: ftp://sourceware.org/pub/pthreads-win3
2]
\end_layout

\begin_layout Plain Layout
Download the Community Server source code of MySQL from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://dev.mysql.com/downloads/mysql/5.0.html
\end_layout

\end_inset

 (
\emph on
file mysql-5.0.51a.tar.gz
\emph default
; you can skip the registration!) and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf mysql-5.0.51a.tar.gz
\end_layout

\begin_layout LyX-Code
cd mysql-5.0.51a
\end_layout

\begin_layout Plain Layout
The configure script needs a slight modification: on line 21626 (search
 for string 
\begin_inset Quotes eld
\end_inset

how to check if pid exists
\begin_inset Quotes erd
\end_inset

 to get close to it), change
\end_layout

\begin_layout LyX-Code
*cygwin*)
\end_layout

\begin_layout Plain Layout
to
\end_layout

\begin_layout LyX-Code
*mingw*)
\end_layout

\begin_layout Plain Layout
Now, configure the sources:
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --with-openssl=/usr --without-l
ibedit --with-readline
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout Plain Layout
Note: The compilation will break fairly early, because MySQL configure fails
 to detect the system readline and the internal version does not compile.
 So we need to copy a version of the external MinGW sources in its place.
 
\end_layout

\begin_layout Plain Layout
Note: this needs to be done again after a 
\begin_inset Quotes eld
\end_inset

configure
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

make clean
\begin_inset Quotes erd
\end_inset

 run:
\end_layout

\begin_layout LyX-Code
cd cmd-line-utils/ 
\end_layout

\begin_layout LyX-Code
mv readline readline-org
\end_layout

\begin_layout LyX-Code
cp /src/readline/5.2/readline-5.2-src ./readline -R
\end_layout

\begin_layout LyX-Code
cd readline
\end_layout

\begin_layout LyX-Code
make clean
\end_layout

\begin_layout LyX-Code
cd /src/mysql-5.0.51a
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\color black
MySQL 5.0.51a from binaries
\color inherit

\begin_inset CommandInset label
LatexCommand label
name "sub:MySQL-bins"

\end_inset


\end_layout

\begin_layout Standard
Download the file 
\emph on
mysql-noinstall-5.0.51a-win32.zip
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://dev.mysql.com/get/Downloads/MySQL-5.0/mysql-noinstall-5.0.45-win32.zip/from/pic
k#mirrors
\end_layout

\end_inset

 and save it to any folder.
\end_layout

\begin_layout Standard
Uncompress the zip file's contents, below the top level directory 
\emph on
mysql-5.0.51a-win32
\emph default
, to 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
mysql, 
\emph default
so that the subfolders 
\emph on
bin
\emph default
, 
\emph on
data
\emph default
, 
\emph on
Docs
\emph default
, etc.
 go directly into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
mysql.
\end_layout

\begin_layout Standard
In order to get headers and DLLs to work with MinGW, a few adjustments are
 needed.
\end_layout

\begin_layout Standard
First, the 
\emph on
libmysql.def
\emph default
 file shipped with the MySQL binaries is missing mangled function names
 which the MinGW linker needs.
 Open the file 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
mysql
\backslash
include
\backslash
libmysql.def
\emph default
 in a text editor and make sure it has the following content:
\end_layout

\begin_layout LyX-Code
LIBRARY         LIBMYSQL
\end_layout

\begin_layout LyX-Code
VERSION         6.0
\end_layout

\begin_layout LyX-Code
EXPORTS
\end_layout

\begin_layout LyX-Code
        _dig_vec_lower
\end_layout

\begin_layout LyX-Code
        _dig_vec_upper
\end_layout

\begin_layout LyX-Code
        bmove_upp
\end_layout

\begin_layout LyX-Code
        delete_dynamic
\end_layout

\begin_layout LyX-Code
        free_defaults
\end_layout

\begin_layout LyX-Code
        getopt_compare_strings
\end_layout

\begin_layout LyX-Code
        getopt_ull_limit_value
\end_layout

\begin_layout LyX-Code
        handle_options
\end_layout

\begin_layout LyX-Code
        init_dynamic_array
\end_layout

\begin_layout LyX-Code
        insert_dynamic
\end_layout

\begin_layout LyX-Code
        int2str
\end_layout

\begin_layout LyX-Code
        is_prefix
\end_layout

\begin_layout LyX-Code
        list_add
\end_layout

\begin_layout LyX-Code
        list_delete
\end_layout

\begin_layout LyX-Code
        load_defaults
\end_layout

\begin_layout LyX-Code
        my_end
\end_layout

\begin_layout LyX-Code
        my_getopt_print_errors
\end_layout

\begin_layout LyX-Code
        my_init
\end_layout

\begin_layout LyX-Code
        my_malloc
\end_layout

\begin_layout LyX-Code
        my_memdup
\end_layout

\begin_layout LyX-Code
        my_no_flags_free
\end_layout

\begin_layout LyX-Code
        my_path
\end_layout

\begin_layout LyX-Code
        mysql_get_parameters
\end_layout

\begin_layout LyX-Code
        my_print_help
\end_layout

\begin_layout LyX-Code
        my_print_variables
\end_layout

\begin_layout LyX-Code
        my_realloc
\end_layout

\begin_layout LyX-Code
        my_strdup
\end_layout

\begin_layout LyX-Code
        mysql_thread_end
\end_layout

\begin_layout LyX-Code
        mysql_thread_init
\end_layout

\begin_layout LyX-Code
        myodbc_remove_escape
\end_layout

\begin_layout LyX-Code
        mysql_affected_rows
\end_layout

\begin_layout LyX-Code
        mysql_autocommit
\end_layout

\begin_layout LyX-Code
        mysql_stmt_bind_param
\end_layout

\begin_layout LyX-Code
        mysql_stmt_bind_result
\end_layout

\begin_layout LyX-Code
        mysql_change_user
\end_layout

\begin_layout LyX-Code
        mysql_character_set_name
\end_layout

\begin_layout LyX-Code
        mysql_close
\end_layout

\begin_layout LyX-Code
        mysql_commit
\end_layout

\begin_layout LyX-Code
        mysql_data_seek
\end_layout

\begin_layout LyX-Code
        mysql_debug
\end_layout

\begin_layout LyX-Code
        mysql_dump_debug_info
\end_layout

\begin_layout LyX-Code
        mysql_eof
\end_layout

\begin_layout LyX-Code
        mysql_errno
\end_layout

\begin_layout LyX-Code
        mysql_error
\end_layout

\begin_layout LyX-Code
        mysql_escape_string
\end_layout

\begin_layout LyX-Code
        mysql_hex_string
\end_layout

\begin_layout LyX-Code
        mysql_stmt_execute
\end_layout

\begin_layout LyX-Code
        mysql_stmt_fetch
\end_layout

\begin_layout LyX-Code
        mysql_stmt_fetch_column
\end_layout

\begin_layout LyX-Code
        mysql_fetch_field
\end_layout

\begin_layout LyX-Code
        mysql_fetch_field_direct
\end_layout

\begin_layout LyX-Code
        mysql_fetch_fields
\end_layout

\begin_layout LyX-Code
        mysql_fetch_lengths
\end_layout

\begin_layout LyX-Code
        mysql_fetch_row
\end_layout

\begin_layout LyX-Code
        mysql_field_count
\end_layout

\begin_layout LyX-Code
        mysql_field_seek
\end_layout

\begin_layout LyX-Code
        mysql_field_tell
\end_layout

\begin_layout LyX-Code
        mysql_free_result
\end_layout

\begin_layout LyX-Code
        mysql_get_client_info
\end_layout

\begin_layout LyX-Code
        mysql_get_host_info
\end_layout

\begin_layout LyX-Code
        mysql_get_proto_info
\end_layout

\begin_layout LyX-Code
        mysql_get_server_info
\end_layout

\begin_layout LyX-Code
        mysql_get_client_version
\end_layout

\begin_layout LyX-Code
        mysql_get_ssl_cipher
\end_layout

\begin_layout LyX-Code
        mysql_info
\end_layout

\begin_layout LyX-Code
        mysql_init
\end_layout

\begin_layout LyX-Code
        mysql_insert_id
\end_layout

\begin_layout LyX-Code
        mysql_kill
\end_layout

\begin_layout LyX-Code
        mysql_set_server_option
\end_layout

\begin_layout LyX-Code
        mysql_list_dbs
\end_layout

\begin_layout LyX-Code
        mysql_list_fields
\end_layout

\begin_layout LyX-Code
        mysql_list_processes
\end_layout

\begin_layout LyX-Code
        mysql_list_tables
\end_layout

\begin_layout LyX-Code
        mysql_more_results
\end_layout

\begin_layout LyX-Code
        mysql_next_result
\end_layout

\begin_layout LyX-Code
        mysql_num_fields
\end_layout

\begin_layout LyX-Code
        mysql_num_rows
\end_layout

\begin_layout LyX-Code
        mysql_odbc_escape_string
\end_layout

\begin_layout LyX-Code
        mysql_options
\end_layout

\begin_layout LyX-Code
        mysql_stmt_param_count
\end_layout

\begin_layout LyX-Code
        mysql_stmt_param_metadata
\end_layout

\begin_layout LyX-Code
        mysql_ping
\end_layout

\begin_layout LyX-Code
        mysql_stmt_result_metadata
\end_layout

\begin_layout LyX-Code
        mysql_query
\end_layout

\begin_layout LyX-Code
        mysql_read_query_result
\end_layout

\begin_layout LyX-Code
        mysql_real_connect
\end_layout

\begin_layout LyX-Code
        mysql_real_escape_string
\end_layout

\begin_layout LyX-Code
        mysql_real_query
\end_layout

\begin_layout LyX-Code
        mysql_refresh
\end_layout

\begin_layout LyX-Code
        mysql_rollback
\end_layout

\begin_layout LyX-Code
        mysql_row_seek
\end_layout

\begin_layout LyX-Code
        mysql_row_tell
\end_layout

\begin_layout LyX-Code
        mysql_select_db
\end_layout

\begin_layout LyX-Code
        mysql_stmt_send_long_data
\end_layout

\begin_layout LyX-Code
        mysql_send_query
\end_layout

\begin_layout LyX-Code
        mysql_shutdown
\end_layout

\begin_layout LyX-Code
        mysql_ssl_set
\end_layout

\begin_layout LyX-Code
        mysql_stat
\end_layout

\begin_layout LyX-Code
        mysql_stmt_affected_rows
\end_layout

\begin_layout LyX-Code
        mysql_stmt_close
\end_layout

\begin_layout LyX-Code
        mysql_stmt_reset
\end_layout

\begin_layout LyX-Code
        mysql_stmt_data_seek
\end_layout

\begin_layout LyX-Code
        mysql_stmt_errno
\end_layout

\begin_layout LyX-Code
        mysql_stmt_error
\end_layout

\begin_layout LyX-Code
        mysql_stmt_free_result
\end_layout

\begin_layout LyX-Code
        mysql_stmt_num_rows
\end_layout

\begin_layout LyX-Code
        mysql_stmt_row_seek
\end_layout

\begin_layout LyX-Code
        mysql_stmt_row_tell
\end_layout

\begin_layout LyX-Code
        mysql_stmt_store_result
\end_layout

\begin_layout LyX-Code
        mysql_store_result
\end_layout

\begin_layout LyX-Code
        mysql_thread_id
\end_layout

\begin_layout LyX-Code
        mysql_thread_safe
\end_layout

\begin_layout LyX-Code
        mysql_use_result
\end_layout

\begin_layout LyX-Code
        mysql_warning_count
\end_layout

\begin_layout LyX-Code
        mysql_stmt_sqlstate
\end_layout

\begin_layout LyX-Code
        mysql_sqlstate
\end_layout

\begin_layout LyX-Code
        mysql_get_server_version
\end_layout

\begin_layout LyX-Code
        set_dynamic
\end_layout

\begin_layout LyX-Code
        strcend
\end_layout

\begin_layout LyX-Code
        strcont
\end_layout

\begin_layout LyX-Code
        strdup_root
\end_layout

\begin_layout LyX-Code
        strfill
\end_layout

\begin_layout LyX-Code
        strinstr
\end_layout

\begin_layout LyX-Code
        strmake
\end_layout

\begin_layout LyX-Code
        strmov
\end_layout

\begin_layout LyX-Code
        strxmov
\end_layout

\begin_layout LyX-Code
        mysql_stmt_prepare
\end_layout

\begin_layout LyX-Code
        mysql_stmt_init
\end_layout

\begin_layout LyX-Code
        mysql_stmt_insert_id
\end_layout

\begin_layout LyX-Code
        mysql_stmt_attr_get
\end_layout

\begin_layout LyX-Code
        mysql_stmt_attr_set
\end_layout

\begin_layout LyX-Code
        mysql_stmt_field_count
\end_layout

\begin_layout LyX-Code
        client_errors
\end_layout

\begin_layout LyX-Code
        mysql_set_local_infile_default
\end_layout

\begin_layout LyX-Code
        mysql_set_local_infile_handler
\end_layout

\begin_layout LyX-Code
        mysql_disable_reads_from_master
\end_layout

\begin_layout LyX-Code
        mysql_disable_rpl_parse
\end_layout

\begin_layout LyX-Code
        mysql_enable_reads_from_master
\end_layout

\begin_layout LyX-Code
        mysql_enable_rpl_parse
\end_layout

\begin_layout LyX-Code
        mysql_master_query
\end_layout

\begin_layout LyX-Code
        mysql_rpl_parse_enabled
\end_layout

\begin_layout LyX-Code
        mysql_rpl_probe
\end_layout

\begin_layout LyX-Code
        mysql_rpl_query_type
\end_layout

\begin_layout LyX-Code
        mysql_slave_query
\end_layout

\begin_layout LyX-Code
        mysql_embedded
\end_layout

\begin_layout LyX-Code
        mysql_server_init
\end_layout

\begin_layout LyX-Code
        mysql_server_end
\end_layout

\begin_layout LyX-Code
        mysql_set_character_set
\end_layout

\begin_layout LyX-Code
        mysql_get_character_set_info
\end_layout

\begin_layout LyX-Code
        get_defaults_options
\end_layout

\begin_layout LyX-Code
        modify_defaults_file
\end_layout

\begin_layout LyX-Code
      mysql_affected_rows@4
\end_layout

\begin_layout LyX-Code
      mysql_close@4
\end_layout

\begin_layout LyX-Code
      mysql_error@4
\end_layout

\begin_layout LyX-Code
      mysql_escape_string@12
\end_layout

\begin_layout LyX-Code
      mysql_fetch_fields@4
\end_layout

\begin_layout LyX-Code
      mysql_fetch_lengths@4
\end_layout

\begin_layout LyX-Code
      mysql_fetch_row@4
\end_layout

\begin_layout LyX-Code
      mysql_free_result@4
\end_layout

\begin_layout LyX-Code
      mysql_init@4
\end_layout

\begin_layout LyX-Code
      mysql_num_fields@4
\end_layout

\begin_layout LyX-Code
      mysql_options@12
\end_layout

\begin_layout LyX-Code
      mysql_query@8
\end_layout

\begin_layout LyX-Code
      mysql_real_connect@32
\end_layout

\begin_layout LyX-Code
      mysql_real_escape_string@16
\end_layout

\begin_layout LyX-Code
      mysql_stmt_bind_param@8
\end_layout

\begin_layout LyX-Code
      mysql_stmt_bind_result@8
\end_layout

\begin_layout LyX-Code
      mysql_stmt_close@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_error@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_execute@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_fetch@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_free_result@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_init@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_param_count@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_prepare@12
\end_layout

\begin_layout LyX-Code
      mysql_stmt_result_metadata@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_store_result@4
\end_layout

\begin_layout LyX-Code
      mysql_store_result@4
\end_layout

\begin_layout LyX-Code
      mysql_use_result@4
\end_layout

\begin_layout LyX-Code
      myodbc_remove_escape@8
\end_layout

\begin_layout LyX-Code
      mysql_autocommit@8
\end_layout

\begin_layout LyX-Code
      mysql_change_user@16
\end_layout

\begin_layout LyX-Code
      mysql_character_set_name@4
\end_layout

\begin_layout LyX-Code
      mysql_commit@4
\end_layout

\begin_layout LyX-Code
      mysql_connect
\end_layout

\begin_layout LyX-Code
      mysql_create_db
\end_layout

\begin_layout LyX-Code
      mysql_debug@4
\end_layout

\begin_layout LyX-Code
      mysql_dump_debug_info@4
\end_layout

\begin_layout LyX-Code
      mysql_eof@4
\end_layout

\begin_layout LyX-Code
      mysql_fetch_field@4
\end_layout

\begin_layout LyX-Code
      mysql_fetch_field_direct@8
\end_layout

\begin_layout LyX-Code
      mysql_field_count@4
\end_layout

\begin_layout LyX-Code
      mysql_field_seek@8
\end_layout

\begin_layout LyX-Code
      mysql_field_tell@4
\end_layout

\begin_layout LyX-Code
      mysql_get_client_info@0
\end_layout

\begin_layout LyX-Code
      mysql_get_client_version@0
\end_layout

\begin_layout LyX-Code
      mysql_get_host_info@4
\end_layout

\begin_layout LyX-Code
      mysql_get_proto_info@4
\end_layout

\begin_layout LyX-Code
      mysql_get_server_info@4
\end_layout

\begin_layout LyX-Code
      mysql_get_server_version@4
\end_layout

\begin_layout LyX-Code
      mysql_hex_string@12
\end_layout

\begin_layout LyX-Code
      mysql_kill@8
\end_layout

\begin_layout LyX-Code
      mysql_list_dbs@8
\end_layout

\begin_layout LyX-Code
      mysql_list_fields@12
\end_layout

\begin_layout LyX-Code
      mysql_list_processes@4
\end_layout

\begin_layout LyX-Code
      mysql_list_tables@8
\end_layout

\begin_layout LyX-Code
      mysql_more_results@4
\end_layout

\begin_layout LyX-Code
      mysql_next_result@4
\end_layout

\begin_layout LyX-Code
      mysql_num_rows@4
\end_layout

\begin_layout LyX-Code
      mysql_ping@4
\end_layout

\begin_layout LyX-Code
      mysql_real_query@12
\end_layout

\begin_layout LyX-Code
      mysql_rollback@4
\end_layout

\begin_layout LyX-Code
      mysql_row_tell@4
\end_layout

\begin_layout LyX-Code
      mysql_select_db@8
\end_layout

\begin_layout LyX-Code
      mysql_set_server_option@8
\end_layout

\begin_layout LyX-Code
      mysql_shutdown@8
\end_layout

\begin_layout LyX-Code
      mysql_sqlstate@4
\end_layout

\begin_layout LyX-Code
      mysql_ssl_set@24
\end_layout

\begin_layout LyX-Code
      mysql_stat@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_affected_rows@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_attr_get@12
\end_layout

\begin_layout LyX-Code
      mysql_stmt_attr_set@12
\end_layout

\begin_layout LyX-Code
      mysql_stmt_data_seek@12
\end_layout

\begin_layout LyX-Code
      mysql_stmt_errno@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_fetch_column@16
\end_layout

\begin_layout LyX-Code
      mysql_stmt_field_count@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_insert_id@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_num_rows@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_param_metadata@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_reset@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_row_seek@8
\end_layout

\begin_layout LyX-Code
      mysql_stmt_row_tell@4
\end_layout

\begin_layout LyX-Code
      mysql_stmt_send_long_data@16
\end_layout

\begin_layout LyX-Code
      mysql_stmt_sqlstate@4
\end_layout

\begin_layout LyX-Code
      mysql_thread_end@0
\end_layout

\begin_layout LyX-Code
      mysql_thread_id@4
\end_layout

\begin_layout LyX-Code
      mysql_thread_init@0
\end_layout

\begin_layout LyX-Code
      mysql_thread_safe@0
\end_layout

\begin_layout LyX-Code
      mysql_warning_count@4
\end_layout

\begin_layout LyX-Code
      mysql_errno@4
\end_layout

\begin_layout LyX-Code
      mysql_insert_id@4
\end_layout

\begin_layout Standard
Now, re-generate the libraries:
\end_layout

\begin_layout LyX-Code

\size footnotesize
cd /usr/local/mysql
\end_layout

\begin_layout LyX-Code

\size footnotesize
dlltool --input-def include/libmySQL.def --dllname bin/libmysql.dll --output-lib
 bin/libmysqlclient.a -k
\end_layout

\begin_layout Standard
Note: This creates a library definition file 
\emph on
libmysqlclient.a
\emph default
 to which every program that wants to use the MySQL C API needs to link
 in addition to 
\emph on
libmysql.dll
\emph default
!
\end_layout

\begin_layout Standard
You need to adjust some lines in 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
mysql
\backslash
include
\backslash
mysql.h
\emph default
.
 Locate the paragraph that reads:
\end_layout

\begin_layout LyX-Code
#ifndef my_socket_defined
\end_layout

\begin_layout LyX-Code
#ifdef __WIN__
\end_layout

\begin_layout LyX-Code
#define my_socket SOCKET
\end_layout

\begin_layout LyX-Code
#else
\end_layout

\begin_layout LyX-Code
typedef int my_socket;
\end_layout

\begin_layout LyX-Code
#endif /* __WIN__ */
\end_layout

\begin_layout LyX-Code
#endif /* my_socket_defined */
\end_layout

\begin_layout LyX-Code
#endif /* _global_h */
\end_layout

\begin_layout Standard
And change it to:
\end_layout

\begin_layout LyX-Code
#ifndef my_socket_defined
\end_layout

\begin_layout LyX-Code
#ifdef __WIN__
\end_layout

\begin_layout LyX-Code
typedef int my_socket;
\end_layout

\begin_layout LyX-Code
#endif /* __WIN__ */
\end_layout

\begin_layout LyX-Code
#endif /* my_socket_defined */
\end_layout

\begin_layout LyX-Code
#endif /* _global_h */
\end_layout

\begin_layout Standard
In 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
etc
\backslash
profile
\emph default
, extend the system path to include the MySQL programs:
\end_layout

\begin_layout LyX-Code
export PATH="$PATH:/usr/local/mysql/bin:/usr/local/mysql/scripts"
\end_layout

\begin_layout Standard
Unfortunately, we need to do a little more clean-up work so that other software
 will be able to link to the MySQL libraries later
\begin_inset Note Note
status open

\begin_layout Plain Layout
This may prevent software linking to MySQL w/o MSYS/MinGW !!!
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Open the file 
\emph on
C:
\backslash
msys
\backslash
local
\backslash
mysql
\backslash
include
\backslash
config-win.h
\emph default
 in a text editor.
 
\end_layout

\begin_layout Standard
Remove the entire code block that re-defines the function 
\begin_inset Quotes eld
\end_inset

rint
\begin_inset Quotes erd
\end_inset

 (ca.
 lines 227-232):
\end_layout

\begin_layout LyX-Code
inline double rint(double nr)
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
  double f = floor(nr);
\end_layout

\begin_layout LyX-Code
  double c = ceil(nr);
\end_layout

\begin_layout LyX-Code
  return (((c-nr) >= (nr-f)) ? f :c);
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Remove the line (ca.
 line 216) that re-defines the function 
\begin_inset Quotes eld
\end_inset

popen
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
#define popen(A,B) _popen((A),(B))
\end_layout

\begin_layout Standard
Next, open the 
\emph on
C:
\backslash
msys
\backslash
local
\backslash
mysql
\backslash
scripts
\backslash
mysql_config
\emph default
 in a text editor.
 This script tells other programs where to find MySQL libraries and include
 files.
 We need to fill in some information manually.
 Locate the 
\emph on
first
\emph default
 occurrences of the lines that define the items 
\begin_inset Quotes eld
\end_inset

pkglibdir
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

pkgincludedir
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

libs
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

cflags
\begin_inset Quotes erd
\end_inset

 and change them to the following:
\end_layout

\begin_layout LyX-Code
pkglibdir='/usr/local/mysql/bin'
\end_layout

\begin_layout LyX-Code
pkgincludedir='/usr/local/mysql/include'
\end_layout

\begin_layout LyX-Code
libs="-L$pkglibdir -lz -leay32 -lssleay32 -lmysql -lmysqlclient"
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
around line 100; remove the second lib= statement!
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
cflags="-I$pkgincludedir " #note: end space!
\end_layout

\begin_layout Standard
Note: contract the two original 
\emph on
libs=
\emph default
 statements into just one.
\end_layout

\begin_layout Standard

\color red
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Standard

\color black
Finally, copy all DLLs and executables needed for complete MySQL client
 operations support to the distribution directories:
\end_layout

\begin_layout LyX-Code

\color black
cd /usr/local/mysql/bin
\end_layout

\begin_layout LyX-Code

\color black
cp libmysql.dll /usr/local/bin
\end_layout

\begin_layout LyX-Code

\color black
cp 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color red
which cmdlline prgs are needed? shared files?
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
PostgreSQL 8.3.0
\begin_inset CommandInset label
LatexCommand label
name "sub:PostgreSQL"

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Configure script simply assumes that Readline does not work on MSYS and
 skips it.
 Is this really true?
\end_layout

\begin_layout Plain Layout
This builds a static 
\begin_inset Quotes eld
\end_inset

libpq.a
\begin_inset Quotes erd
\end_inset

 in addition to 
\begin_inset Quotes eld
\end_inset

libpq.dll
\begin_inset Quotes erd
\end_inset

 is that necessary? Turn it off in configure options?
\end_layout

\begin_layout Plain Layout

\color red
Further features that could be considererd: Bonjour, PAM, LDAP, Tcl, Python,
 Perl
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Download the file 
\emph on
postgresql-8.3.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.postgresql.org/ftp/source/v8.3.0/
\end_layout

\end_inset

 and save in the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xjf postgresql-8.3.0.tar.bz2
\end_layout

\begin_layout LyX-Code
cd postgresql-8.3.0
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --with-libs=/usr/lib --with-includes=/usr/include
 --bindir=/usr/local/bin --with-openssl
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout LyX-Code
\begin_inset Note Note
status open

\begin_layout Plain Layout
the following steps are already for packaging!
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
cp /usr/lib/*.dl* /usr/local/bin/
\end_layout

\begin_layout LyX-Code
cp /usr/lib/postgresql/*.dll /usr/local/bin/ -R
\begin_inset Note Note
status open

\begin_layout Plain Layout
for client support, only libpq.dll is required!
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Standard
PostGIS
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Does GRASS still have PostGIS support? Anyhow, Quantum GIS sure does! Maybe
 the PostGIS extensions only need to be available on the server!
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
GEOS 2.2.3
\begin_inset CommandInset label
LatexCommand label
name "sub:GEOS"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
GEOS 3.0.0 does not work with QGIS!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Geos is a C++ library of topological functions.
 It is used for efficient retrieval of GIS data from DBMS using topological
 queries and operations.
 GEOS is a dependency of both PostGIS and GDAL.
\end_layout

\begin_layout Standard
Download the file 
\emph on
geos-2.2.3.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://geos.refractions.net/
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xjv geos-2.2.3.tar.bz2
\end_layout

\begin_layout LyX-Code
cd geos-2.2.3
\end_layout

\begin_layout Standard
The MinGW version used here includes a definition for the 
\emph on
gettimeofday()
\emph default
 system function.
 GEOS is not aware of this and includes another copy of the same function.
 We need to disable the GEOS copy.
 Edit the file 
\emph on
timeval.h
\emph default
 in the folder 
\emph on
geos-2.2.3
\backslash
source
\backslash
headers
\backslash
geos
\emph default
.
 On line 13, replace:
\end_layout

\begin_layout LyX-Code
#ifdef _WIN32
\end_layout

\begin_layout Standard
with:
\end_layout

\begin_layout LyX-Code
#if defined(_WIN32) && defined(_MSC_VER)
\end_layout

\begin_layout Standard
Now, go ahead with the compilation process.
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --disable-static --enable-share
d --enable-python
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Section
GDAL/OGR
\begin_inset CommandInset label
LatexCommand label
name "sub:GDAL/OGR"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
UPDATE: GRASS 6.3.0 NO LONGER *NEEDS* A GDAL/OGR LIB WITH GRASS SUPPORT! NO
 MORE CIRC DEP!
\end_layout

\begin_layout Plain Layout
BUT IS STILL NEEDED for anything else that needs to access GRASS data via
 GDAL (e.g.
 QGIS!)!!!
\end_layout

\begin_layout Plain Layout
Most important resources:
\end_layout

\begin_layout Plain Layout
http://trac.osgeo.org/gdal/wiki/BuildHints
\end_layout

\begin_layout Plain Layout
http://trac.osgeo.org/gdal/wiki/BuildingWithMinGW
\end_layout

\begin_layout Plain Layout
This is what happens if one of the dependencies (in this cas libjasper.a)
 is static:
\end_layout

\begin_layout LyX-Code
*** Warning: This system can not link to static lib archive /usr/lib/libjasper.la.
 
\end_layout

\begin_layout LyX-Code
*** I have the capability to make that library automatically link in when
 
\end_layout

\begin_layout LyX-Code
*** you link to this library.
 But I can only do this if you have a 
\end_layout

\begin_layout LyX-Code
*** shared version of the library, which you do not appear to have.
 
\end_layout

\begin_layout LyX-Code
libtool: link: rm -fr .libs/libgdal.a .libs/libgdal.la .libs/libgdal.lai
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
*** The inter-library dependencies that have been dropped here will be 
\end_layout

\begin_layout LyX-Code
*** automatically added whenever a program is linked with this library 
\end_layout

\begin_layout LyX-Code
*** or is declared to -dlopen it.
\end_layout

\begin_layout LyX-Code
*** Since this library must not contain undefined symbols, 
\end_layout

\begin_layout LyX-Code
*** because either the platform does not support them or 
\end_layout

\begin_layout LyX-Code
*** it was explicitly requested with -no-undefined, 
\end_layout

\begin_layout LyX-Code
*** libtool will only create a static version of it.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
libtool: link: using piecewise archive linking...
 
\end_layout

\begin_layout Plain Layout
...
 and we get a static GDAL lib! Not good.
\end_layout

\begin_layout Plain Layout
REMAINING PROBLEMS:
\end_layout

\begin_layout Plain Layout
- Perl SWIG fails during make:
\end_layout

\begin_layout Plain Layout
Makefile_Geo__GDAL:333: warning: overriding commands for target `.c.o' 
\end_layout

\begin_layout Plain Layout
Makefile_Geo__GDAL:330: warning: ignoring old commands for target `.c.o' 
\end_layout

\begin_layout Plain Layout
make[3]: *** No rule to make target `Makefile', needed by `gdal_wrap.o'.
 Stop.
 
\end_layout

\begin_layout Plain Layout
make[3]: Leaving directory `/src/gdal-1.5.0/swig/perl' 
\end_layout

\begin_layout Plain Layout
make[2]: *** [build] Error 2 
\end_layout

\begin_layout Plain Layout
make[2]: Leaving directory `/src/gdal-1.5.0/swig/perl' 
\end_layout

\begin_layout Plain Layout
make[1]: *** [build] Error 2 
\end_layout

\begin_layout Plain Layout
make[1]: Leaving directory `/src/gdal-1.5.0/swig' 
\end_layout

\begin_layout Plain Layout
make: *** [swig-modules] Error 2 
\end_layout

\begin_layout Plain Layout
- STATIC LIBS NEED TO BE BUILD, AS WELL
\end_layout

\begin_layout Plain Layout
configure option --enable-static=no will result in this:
\end_layout

\begin_layout LyX-Code
mingw32-g++.exe: gdalinfo.o: No such file or directory
\end_layout

\begin_layout LyX-Code
make[1]: *** [gdalinfo.exe] Error 1
\end_layout

\begin_layout LyX-Code
make[1]: Leaving directory `/src/gdal-1.5.0/apps'
\end_layout

\begin_layout LyX-Code
make: *** [apps-target] Error 2
\end_layout

\begin_layout Plain Layout
\SpecialChar \ldots{}
 and then all sources have to be cleaned and the compilation restarted!
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout Standard
GDAL (and the included OGR) are a set of libraries and command line tools
 for processing of many standard GIS formats.
 The command line tools are valuable by themselves, but what's more important
 for our purposes is the fact the many open source GIS programs are able
 to link to the GDAL library which allows them to read and write a plethora
 of GIS file formats.
\end_layout

\begin_layout Standard
GDAL is a collecation of raster format readers/writers, while OGR provides
 vector format handling.
\end_layout

\begin_layout Standard
GDAL is essential for both GRASS and Quantum GIS to be able to convert between
 different raster (GDAL) and vector (OGR) GIS file formats.
 The GDAL library itself is complex and will use a number of external tools
 and libraries to optionally support more file formats.
 Depending on what formats you are interested in, you will need to install
 additional packages as described here.
\end_layout

\begin_layout Standard
Building GDAL with MinGW/MSYS is still officially unsupported, although
 a lot of people seem to be doing exactly this.
 All in all, the process is sufficiently smooth now, although some rough
 edges remain.
 So be sure to follow these instructions precisely.
\end_layout

\begin_layout Standard
We will first go through all GDAL dependencies, step by step (in the same
 order as they appear in the GDAL list of configure options), before we
 configure and compile GDAL itself!
\end_layout

\begin_layout Subsection
GRASS
\end_layout

\begin_layout Standard
Having GRASS support in GDAL is mandatory for most of the GRASS data import
 modules to work.
 This cannot be done the first time you compile GDAL, as there is a circular
 dependency between GRASS and GDAL.
 See the notes at the end of section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:GDAL/OGR"

\end_inset

 on how to enable GRASS support in GDAL once GRASS has been installed.
\end_layout

\begin_layout Subsection
CFITSIO 3.060 (FITS)
\end_layout

\begin_layout Standard
FITS (Flexible Image Transport System) is a format used mainly in astronomy.
 However, it is simple, flexible and supports arbitrary image types (also
 multi-spectral).
 FITS is supported through the CFITSIO library.
\end_layout

\begin_layout Standard
Download the file 
\emph on
cfitsio3060.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://heasarc.gsfc.nasa.gov/docs/software/fitsio/fitsio.html
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf cfitsio3060.tar.gz
\end_layout

\begin_layout LyX-Code
cd cfitsio
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
Create the shared DLL manually:
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libcfitsio.a
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
g++.exe -s -shared -o libcfitsio.dll buffers.o cfileio.o checksum.o compress.o
 drvrfile.o drvrmem.o drvrnet.o drvrsmem.o drvrgsiftp.o editcol.o edithdu.o eval_l.o
 eval_y.o eval_f.o fitscore.o getcol.o getcolb.o getcold.o getcole.o getcoli.o getcolj.o
 getcolk.o getcoll.o getcols.o getcolsb.o getcoluk.o getcolui.o getcoluj.o getkey.o
 group.o grparser.o histo.o iraffits.o modkey.o putcol.o putcolb.o putcold.o putcole.o
 putcoli.o putcolj.o putcolk.o putcoluk.o putcoll.o putcols.o putcolsb.o putcolu.o
 putcolui.o putcoluj.o putkey.o region.o scalnull.o swapproc.o wcssub.o wcsutil.o
 imcompress.o quantize.o ricecomp.o pliocomp.o fits_hcompress.o fits_hdecompress.o
 f77_wrap1.o f77_wrap2.o f77_wrap3.o f77_wrap4.o
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
install libcfitsio.dll /usr/lib
\end_layout

\begin_layout Subsection
PCRaster 2.0 (internal)
\end_layout

\begin_layout Standard
PCRaster support is now internal in GDAL, so no need to download, compile
 and install the API separately.
\end_layout

\begin_layout Subsection

\color black
NetCDF 3.6.2
\end_layout

\begin_layout Standard
NetCDF supports creation and access of array-oriented scientific data sets.
\end_layout

\begin_layout Standard
Download 
\emph on
netcdf.tar.gz 
\emph default
from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.unidata.ucar.edu/software/netcdf/
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout Standard
The compilation of shared libraries (DLLs) is current a bit broken on MinGW,
 so we need to make an intermediate static version:
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf netcdf.tar.gz
\end_layout

\begin_layout LyX-Code
cd netcdf-3.6.2
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --disable-examples --enable-c-o
nly --disable-shared
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
To finish up, we now need to make the shared Windows DLLs manually:
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libnetcdf.*
\end_layout

\begin_layout LyX-Code
cd libsrc
\end_layout

\begin_layout LyX-Code
g++.exe -s -shared -o ./libnetcdf.dll -L/usr/lib *.o
\end_layout

\begin_layout LyX-Code
install libnetcdf.dll /usr/lib
\end_layout

\begin_layout Subsection

\color red
OGDI 3.1.6
\color inherit

\begin_inset CommandInset label
LatexCommand label
name "sub:OGDI-3.1.6"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
NOT DONE YET
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color black
Note: Building OGDI on MinGW does currently not work because there is no
 working Makefile for a 
\emph on
mingw32
\emph default
 
\emph on
GCC
\emph default
 host.
 The 
\emph on
win32
\emph default
 Make target assumes the MS Visual C compiler.
 Thus, we will use the Visual C compiler 
\emph on
and
\emph default
 Platform SDK for this, which you need to have installed and working at
 this point (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Visual-Studio-Express"

\end_inset

).
\end_layout

\begin_layout Standard
The Open Geographic Datastore Interface (OGDI) is an API that uses a client/serv
er infrastructure for geospatial data exchange over a TCP/IP network.
\end_layout

\begin_layout Standard
Download the file 
\emph on
ogdi-3.1.6.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://ogdi.sourceforge.net/
\end_layout

\end_inset

 to the 
\emph on
source
\emph default
 folder.
 Note: the main link on the webpage points to version 3.1.5 of the source.
 Browse the download archives to find version 3.1.6!
\end_layout

\begin_layout Standard
Launch a 
\emph on
cmd.exe
\emph default
 window.
\end_layout

\begin_layout Standard
Locate and start the Visual C setup batch file 
\emph on
vcvars32.bat
\emph default
.
 If you have set up VS8 as suggested (
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Visual-Studio-Express"

\end_inset

), then you need to run:
\end_layout

\begin_layout LyX-Code
C:
\backslash
vs8
\backslash
VC
\backslash
bin
\backslash
vcvars32.bat
\end_layout

\begin_layout Standard
Make sure that the C compiler works by changing into any directory and launching
 
\emph on
cl.exe
\emph default
.
 You should get a short usage message from the compiler.
\end_layout

\begin_layout Standard
Next, setup and launch the actual compilation (make sure to get all 
\begin_inset Quotes eld
\end_inset


\backslash

\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 right, exactly as shown below):
\end_layout

\begin_layout LyX-Code
set PATH=%PATH%;C:
\backslash
msys
\backslash
1.0
\backslash
bin
\end_layout

\begin_layout LyX-Code
cd c:
\backslash
msys
\backslash
1.0
\backslash
src
\end_layout

\begin_layout LyX-Code
tar -xzf ogdi-3.1.6.tar.gz
\end_layout

\begin_layout LyX-Code
cd ogdi-3.1.6
\end_layout

\begin_layout LyX-Code
set TOPDIR=c:/msys/1.0/src/ogdi-3.1.6
\end_layout

\begin_layout LyX-Code
set TARGET=win32
\end_layout

\begin_layout LyX-Code
set CFG=release
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
The make process will abort in directory 
\emph on
external
\backslash
expat
\emph default
 due to a problem in the 
\emph on
makefile
\emph default
.
 Simply compile the sources one at a time (there aren't many; remember that
 you can paste text into the 
\emph on
cmd.exe
\emph default
 window by right-clicking on its titlebar):
\end_layout

\begin_layout LyX-Code
cd external
\backslash
expat
\backslash
OBJ.win32
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /D_WINDOWS /DWIN32 /D_MBCS /Dhypot=_hypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK
 /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=SIGTERM /DSIGALRM=SIGTERM   /Dpopen=_p
open /Dpclose=_pclose /DMISSING_DLFCN_H /GX /Gi- /Gy /Od /DNDEBUG /W3 /YX
 /MD /c /Fpheaders.pch -DVERSION=
\backslash
"expat_1.95.1
\backslash
" -DPACKAGE="expat"  ../xmlparse.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /D_WINDOWS /DWIN32 /D_MBCS /Dhypot=_hypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK
 /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=SIGTERM /DSIGALRM=SIGTERM   /Dpopen=_p
open /Dpclose=_pclose /DMISSING_DLFCN_H /GX /Gi- /Gy /Od /DNDEBUG /W3 /YX
 /MD /c /Fpheaders.pch -DVERSION=
\backslash
"expat_1.95.1
\backslash
" -DPACKAGE="expat"  ../xmltok.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /D_WINDOWS /DWIN32 /D_MBCS /Dhypot=_hypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK
 /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=SIGTERM /DSIGALRM=SIGTERM   /Dpopen=_p
open /Dpclose=_pclose /DMISSING_DLFCN_H /GX /Gi- /Gy /Od /DNDEBUG /W3 /YX
 /MD /c /Fpheaders.pch -DVERSION=
\backslash
"expat_1.95.1
\backslash
" -DPACKAGE="expat"  ../xmlrole.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cd ..
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
Again, the make process will fail, this time in 
\emph on
ogdi
\backslash
c-api
\emph default
 and we will compile the sources individually
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
might be better to instead fix the MAKE command in the makefiles and get
 rid of those warnings at the same time!
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
cd ogdi
\backslash
c-api
\backslash
OBJ.win32
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecs_dyna.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecsregex.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecssplit.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecsassoc.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecshash.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecstile.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSI GPIPE=SIGTERM /DSIGHUP=
SIGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../server.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecsdist.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecslist.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecsinfo.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecsgeo.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecs_xdr.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSI GPIPE=SIGTERM /DSIGHUP=
SIGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecs_xdrz.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../gmath.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../client.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cl.exe /nologo /I..
 /Ic:/msys/1.0/src/ogdi-3.1.6/include/win32 /Ic:/msys/1.0/src/ogdi-3.1.6/ogdi/include
  /Ic:/msys/1.0/src/ogdi-3.1.6/external/zlib /Ic:/msys/1.0/src/ogdi-3.1.6/proj
 /Ic:/msys/1.0/src/ogdi-3.1.6/external/expat /D_WINDOWS /D WIN32 /D_MBCS /Dhypot=_h
ypot /DNO_DIRENT_H /DSIGQUIT=SIGBREAK /Dioctl=Ioctl /DSIGPIPE=SIGTERM /DSIGHUP=S
IGTERM /DSIGALRM=SIGTERM   /Dpopen=_popen /Dpclose=_pclose /DMISSING_DLFCN_H
 /GX /Gi- /Gy /Od /DNDEBUG   /W3 /YX /MD /c /Fpheaders.pch -DMODULES_PATH="
\backslash
"/usr/local/lib/ogdi/
\backslash
"" ../ecs_capabilities.c
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
cd ..
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
This should generate the OGDI DLL file.
 Now step back into the main directory and continue the make process:
\end_layout

\begin_layout LyX-Code
cd ..
\backslash
..
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
The code will compile with a lot of warnings (due to the makefile being
 for version 6 of VC), but it should compile.
 You then need to copy the DLLs and tools manually.
 Open the file c:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
ogdi-3.1.6
\backslash
 ogdi
\backslash
include
\backslash
ecs_util.h and delete the lines:
\end_layout

\begin_layout LyX-Code
#else
\end_layout

\begin_layout LyX-Code
#include <dlfcn.h>
\end_layout

\begin_layout Standard
...
 near the top of the file!
\end_layout

\begin_layout Standard
The rest is done easiest using the MSYS shell:
\end_layout

\begin_layout LyX-Code
cd /src/ogdi-3.1.6
\end_layout

\begin_layout LyX-Code
cd bin/win32
\end_layout

\begin_layout LyX-Code
cp *.dll /usr/local/bin
\end_layout

\begin_layout LyX-Code
cp *.dll /usr/lib
\end_layout

\begin_layout LyX-Code
cp *.exe /usr/local/bin
\end_layout

\begin_layout LyX-Code
cd ../../include/win32
\end_layout

\begin_layout LyX-Code
cp rpc /usr/include -R
\end_layout

\begin_layout LyX-Code
cd ../../ogdi/include
\end_layout

\begin_layout LyX-Code
cp *.h /usr/include
\end_layout

\begin_layout Standard
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Subsection
HDF
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
More info here: http://trac.osgeo.org/gdal/wiki/HDF
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Hierarchical Data Format (HDF) is a format for management and exchange
 of large, structured scientific datasets.
 HDF version 5 is not fully compatible with version 4, thus both versions
 need to be installed for full HDF support in GDAL.
\end_layout

\begin_layout Standard
Both versions of HDF lack support for compilation with MinGW.
 Unfortunately, the Windows binaries provided by the HDF project team have
 been linked against the SZIP (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://hdf.ncsa.uiuc.edu/doc_resource/SZIP/
\end_layout

\end_inset

) Compression Library, which is more restrictive than a GPL style license
 and can thus not be used here.
\end_layout

\begin_layout Standard
Therefore, we will use Visual C to compile and install under Windows.
\end_layout

\begin_layout Subsubsection
Szip 2.1
\begin_inset CommandInset label
LatexCommand label
name "sub:Szip-2.1"

\end_inset


\end_layout

\begin_layout Standard
Szip provides fast and efficient compression support for both HDF4 and 5.
\end_layout

\begin_layout Standard
Download the file 
\emph on
szip-2.1.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://hdf.ncsa.uiuc.edu/doc_resource/SZIP/
\end_layout

\end_inset

 and save it to the source folder.
\end_layout

\begin_layout Standard
Since the licensing terms for Szip forbids the usage of its encoding functions
 without a commercial license, we will disable encoding support.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf szip-2.1.tar.gz
\end_layout

\begin_layout LyX-Code
cd szip-2.1
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --enable-static=no --enable-sha
red=yes --enable-encoding=no
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
Finally, create and install the shared DLL binary:
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libsz.*
\end_layout

\begin_layout LyX-Code
cd libs/.src
\end_layout

\begin_layout LyX-Code
g++.exe -s -shared -o libsz.dll -L/usr/lib *.o
\end_layout

\begin_layout LyX-Code
install libsz.dll /usr/lib
\end_layout

\begin_layout Subsubsection
HDF 4.2r2
\begin_inset CommandInset label
LatexCommand label
name "sub:HDF-4.2r2"

\end_inset


\end_layout

\begin_layout Standard
Download the file 
\emph on
HDF4.2r2.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://hdf.ncsa.uiuc.edu/
\end_layout

\end_inset

 and copy it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf HDF4.2r2.tar.gz
\end_layout

\begin_layout Standard
Now, start a 
\emph on
cmd.exe
\emph default
 Window and setup the VC compiler environment
\begin_inset Note Note
status open

\begin_layout Plain Layout
"C:
\backslash
Programme
\backslash
Microsoft Visual Studio 8
\backslash
VC
\backslash
bin
\backslash
vcvars32.bat"
\end_layout

\end_inset

: Locate and start the Visual C setup batch file 
\emph on
vcvars32.bat
\emph default
 (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Visual-Studio-Express"

\end_inset

).
 Make sure that the C compiler works by changing into any directory and
 launching 
\emph on
cl.exe
\emph default
.
 You should get a short usage message from the compiler.
\end_layout

\begin_layout Standard
Now, setup and compile the source (the following instructions closely follow
 Section VIII of the software's included 
\emph on
INSTALL_WINDOWS.txt
\emph default
 document):
\end_layout

\begin_layout LyX-Code
cd C:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
HDF4.2r2
\backslash
windows
\end_layout

\begin_layout LyX-Code
set HDF4_EXT_ZLIB=libz.dll
\end_layout

\begin_layout LyX-Code
set HDF4_EXT_JPEG=libjpeg.a
\end_layout

\begin_layout LyX-Code
set HDF4_EXT_SZIP=libsz.dll
\end_layout

\begin_layout LyX-Code
copy_hdf.bat
\end_layout

\begin_layout LyX-Code
hdf4build.bat vs8
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
HDF 5-1.6.6
\begin_inset CommandInset label
LatexCommand label
name "sub:HDF-5-1.6.6"

\end_inset


\end_layout

\begin_layout Standard

\color red
WORK IN PROGRESS: The build process currently seems to require Visual C++
 6.0 (of which there is no free version).
 However, 1.8.0 will support building with MS Visual Studio 8, so we will
 have to wait for the next version to be released.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Download the file 
\emph on
hdf5-1.6.6.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://hdf.ncsa.uiuc.edu/
\end_layout

\end_inset

 and copy it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf hdf5-1.6.6.tar.gz
\end_layout

\begin_layout LyX-Code
cd hdf5-1.6.6
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr
\end_layout

\begin_layout Plain Layout
Unfortunately, some mingling with the HDF5 source code is required for getting
 this to compile under MinGW.
\end_layout

\begin_layout Plain Layout
Open the file 
\emph on
hdf5-1.6.6
\backslash
src
\backslash
H5FDstream.c
\emph default
 in a text editor.
 Find the following two lines at the beginning of the file and delete them:
\end_layout

\begin_layout LyX-Code
#include <netdb.h> /* gethostbyname */
\end_layout

\begin_layout LyX-Code
#include <netinet/in.h> /* socket stuff */
\end_layout

\begin_layout Plain Layout
In their place, add a line that reads:
\end_layout

\begin_layout LyX-Code
#include </mingw/include/winsock.h>
\end_layout

\begin_layout Plain Layout
Finally, replace all occurrences of the string 
\begin_inset Quotes eld
\end_inset

EWOULDBLOCK
\begin_inset Quotes erd
\end_inset

 with 
\begin_inset Quotes eld
\end_inset

WSAEWOULDBLOCK
\begin_inset Quotes erd
\end_inset

.
 Then, continue with the compilation process:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Plain Layout
THIS MIGHT WORK FOR MINGW: taken from http://davinci.asu.edu/index.php/Building_Dav
inci_for_Windows !!!
\end_layout

\begin_layout Plain Layout
***
\end_layout

\begin_layout Plain Layout
hdf5-1.6.5
\end_layout

\begin_layout Plain Layout
tar zxvf hdf5-1.6.5.tar.gz 
\end_layout

\begin_layout Plain Layout
cd hdf5-1.6.5
\end_layout

\begin_layout Plain Layout
./configure --prefix=/mingw
\end_layout

\begin_layout Plain Layout
make
\end_layout

\begin_layout Plain Layout
make install (after the changes)
\end_layout

\begin_layout Plain Layout
* change 1 
\end_layout

\begin_layout Plain Layout
In the file File: src/H5FDstream.c Replace the lines:
\end_layout

\begin_layout Plain Layout
#include <netdb.h> /* gethostbyname */
\end_layout

\begin_layout Plain Layout
#include <netinet/in.h>
\end_layout

\begin_layout Plain Layout
With:
\end_layout

\begin_layout Plain Layout
#if __MINGW32__
\end_layout

\begin_layout Plain Layout
#define EWOULDBLOCK WSAEWOULDBLOCK
\end_layout

\begin_layout Plain Layout
#else
\end_layout

\begin_layout Plain Layout
#include <netdb.h> /* gethostbyname */
\end_layout

\begin_layout Plain Layout
#include <netinet/in.h> /* socket stuff */
\end_layout

\begin_layout Plain Layout
#endif
\end_layout

\begin_layout Plain Layout
* change 2 
\end_layout

\begin_layout Plain Layout
In the MINGW file mingw/objidl.h (this might be dangerous)
\end_layout

\begin_layout Plain Layout
changed STORAGELAYOUT to STORAGELAYOUT2 
\end_layout

\begin_layout Plain Layout
After the compilation, changed it back to STORAGELAYOUT
\end_layout

\begin_layout Plain Layout
* changes 3 
\end_layout

\begin_layout Plain Layout
In the file
\end_layout

\begin_layout Plain Layout
src/Makefile
\end_layout

\begin_layout Plain Layout
Added lib -lwsock32
\end_layout

\begin_layout Plain Layout
* change 4 
\end_layout

\begin_layout Plain Layout
In the file tools/misc/h5repart.c Int he line
\end_layout

\begin_layout Plain Layout
#if defined(WIN32) && ! defined (__MWERKS__) && ! defined (__MINGW32__)
\end_layout

\begin_layout Plain Layout
added MINGW32
\end_layout

\begin_layout Plain Layout
* change 5 
\end_layout

\begin_layout Plain Layout
In the file perform/zip_perf.c
\end_layout

\begin_layout Plain Layout
ignored the line #include <sys/uio.h> if compiling ander MINGW32
\end_layout

\begin_layout Plain Layout
These changes were performed at iomedley to work with MinGW
\end_layout

\begin_layout Plain Layout
* 1.File: configure and 2.
 configure.ac 
\end_layout

\begin_layout Plain Layout
changed giflib-4.1.4 to libgif
\end_layout

\begin_layout Plain Layout
* 3.
 File: mungelibs modified 
\end_layout

\begin_layout Plain Layout
* 4.
 File: Makefile.in 
\end_layout

\begin_layout Plain Layout
LIBTIFF = libtiff.a LIBTIFFDIR = tiff-3.8.2
\end_layout

\begin_layout Plain Layout
LIBGIF = libgif.a LIBGIFDIR = libgif
\end_layout

\begin_layout Plain Layout
CPPFLAGS=-I.
 -I$(LIBTIFFDIR)/libtiff -I$(LIBJPEGDIR) -I$(LIBGIFDIR) @CPPFLAGS@
\end_layout

\begin_layout Plain Layout
Made the section $(LIBTIFF) to $(LIBTIFF): cd $(LIBTIFFDIR) && $(MAKE)
\end_layout

\begin_layout Plain Layout
* 5.
 File: io_tiff.c 
\end_layout

\begin_layout Plain Layout
changed "ushort" to "unsigned short"
\end_layout

\begin_layout Plain Layout
* 6.
 
\end_layout

\begin_layout Plain Layout
Removed the old libtiff directory.
 Added new dir tiff-3.8.2
\end_layout

\begin_layout Plain Layout
* 7.
 
\end_layout

\begin_layout Plain Layout
giflib-4.1.4 is not used anymore but libgiff instead
\end_layout

\begin_layout Plain Layout
* 8.
 io_lablib3.c 
\end_layout

\begin_layout Plain Layout
added
\end_layout

\begin_layout Plain Layout
#ifdef _WIN32 #define mkstemp(p) open(_mktemp(p), _O_CREAT | _O_SHORT_LIVED
 | _O_EXCL) #endif
\end_layout

\begin_layout Plain Layout
These changes were performed at Davinci to work with MinGW
\end_layout

\begin_layout Plain Layout
* 1.
 configure * 2.
 configure.ac 
\end_layout

\begin_layout Plain Layout
Added -lwsock32 at HDF5 link flags
\end_layout

\begin_layout Plain Layout
Makefile
\end_layout

\begin_layout Plain Layout
LIBS = -lreadline -lhdf5 -lz -lm -lregex -lwsock32 -lltdlc
\end_layout

\begin_layout Plain Layout
* 3.
 parser.h 
\end_layout

\begin_layout Plain Layout
* 3.1 #commented out the include dos.h and relevant things 
\end_layout

\begin_layout Plain Layout
* 3.2 removed the definitions for w_readline 
\end_layout

\begin_layout Plain Layout
* 4.
 ff_modules.c 
\end_layout

\begin_layout Plain Layout
* 4.1 added 
\end_layout

\begin_layout Plain Layout
1.
 ifdef __MINGW32__ 
\end_layout

\begin_layout Plain Layout
2.
 include <dirent.h> 
\end_layout

\begin_layout Plain Layout
3.
 endif 
\end_layout

\begin_layout Plain Layout
* 4.2 removed ifdefs around find_next_file_with_prefixl 
\end_layout

\begin_layout Plain Layout
* 5.
 dvio_themis.c 
\end_layout

\begin_layout Plain Layout
1.
 if defined(___CYGWIN__) || defined(__MINGW32__) 
\end_layout

\begin_layout Plain Layout
* 6.
 Added file win_mmap.h under win32 
\end_layout

\begin_layout Plain Layout
* 7.
 File: ff.c Line: 1750 
\end_layout

\begin_layout Plain Layout
added some ifdefs
\end_layout

\begin_layout Plain Layout
* 8.
 ff_loadvan.c 
\end_layout

\begin_layout Plain Layout
changed uint to unsigned int
\end_layout

\begin_layout Plain Layout
* 9.
 ff_struct.c 
\end_layout

\begin_layout Plain Layout
1.
 if !( defined( __CYGWIN__) || defined(__MINGW32__)) 
\end_layout

\begin_layout Plain Layout
* 10.
 ff_bin5.c 
\end_layout

\begin_layout Plain Layout
included win_mmap
\end_layout

\begin_layout Plain Layout
* 11.
 header.c 
\end_layout

\begin_layout Plain Layout
changed ushort to unsigned short
\end_layout

\begin_layout Plain Layout
* 12 main.c 
\end_layout

\begin_layout Plain Layout
fixed SIGUSR1 defined ctime_r as ctime changed drand48 to rand
\end_layout

\begin_layout Plain Layout
* 13.
 util.c 
\end_layout

\begin_layout Plain Layout
commented out dos.h
\end_layout

\begin_layout Plain Layout
* 14.
 dvio_tdb.c 
\end_layout

\begin_layout Plain Layout
changed ushort to unsigned short
\end_layout

\begin_layout Plain Layout
* 15.
 
\end_layout

\begin_layout Plain Layout
Makefile.in Makefile added flags
\end_layout

\begin_layout Plain Layout
* 16.
 io_loadmod.c 
\end_layout

\begin_layout Plain Layout
defined strok_r as strok
\end_layout

\begin_layout Plain Layout
* 17.
 system.c 
\end_layout

\begin_layout Plain Layout
Did a workaround for mkstemp
\end_layout

\begin_layout Plain Layout
* 18.
 ff_display.c 
\end_layout

\begin_layout Plain Layout
Added system support for mingw when displaying image 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Download the file 
\emph on
HDF5-1.6.6.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://hdf.ncsa.uiuc.edu/
\end_layout

\end_inset

 and copy it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf hdf5-1.6.6.tar.gz
\end_layout

\begin_layout Standard
You then need to extract the file 
\emph on
all.zip
\emph default
 in the 
\emph on
windows
\emph default
 subdirectory in place.
\end_layout

\begin_layout Standard
Now, start a 
\emph on
cmd.exe
\emph default
 Window and setup the VC compiler environment
\begin_inset Note Note
status open

\begin_layout Plain Layout
"C:
\backslash
Programme
\backslash
Microsoft Visual Studio 8
\backslash
VC
\backslash
bin
\backslash
vcvars32.bat"
\end_layout

\end_inset

: Locate and start the Visual C setup batch file 
\emph on
vcvars32.bat
\emph default
 (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Visual-Studio-Express"

\end_inset

).
 Make sure that the C compiler works by changing into any directory and
 launching 
\emph on
cl.exe
\emph default
.
 You should get a short usage message from the compiler.
\end_layout

\begin_layout LyX-Code
cd C:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
hdf5-1.6.6
\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Kakadu
\end_layout

\begin_layout Standard
Note: Kakadu (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.kakadusoftware.com/
\end_layout

\end_inset

) is an alternative implementation of JPEG2000, against which GDAL may be
 linked, but it is commmercial software and will thus not be covered here.
 Instead, we use Jasper (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Jasper"

\end_inset

) to provide JPEG2000 support in GDAL.
\end_layout

\begin_layout Subsection

\color black
Jasper 1.900.1
\color inherit

\begin_inset CommandInset label
LatexCommand label
name "sub:Jasper"

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Further hints here: http://trac.osgeo.org/gdal/wiki/JasPer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Jasper provides a free implementation of the JPEG-2000 digital image standard.
\end_layout

\begin_layout Standard
Note: Jasper can also be compiled with GeoJP2-support for embedding SRS
 info in the JPEG-200 image.
 But this is proprietary software (no GPL or comparable license) which cannot
 be included here (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://students.ee.sun.ac.za/~riaanvdd/jpeg2000.htm
\end_layout

\end_inset

)!
\end_layout

\begin_layout Standard
Note: more detailed compilation and usage instructions can be found in the
 PDf-file: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.ece.uvic.ca/~mdadams/jasper/jasper.pdf
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Download the file 
\emph on
jasper-1.900.1.zip
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.ece.uvic.ca/~mdadams/jasper/
\end_layout

\end_inset

 to any directory and unzip the package contents to the 
\emph on
source
\emph default
 folder (note: select 
\begin_inset Quotes eld
\end_inset

Extract all
\begin_inset Quotes erd
\end_inset

 in IzArc and choose 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
sr
\emph default
c as target folder.
 Make sure that the file 
\emph on
configure
\emph default
 has been extracted to the target directory!).
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
cd jasper-1.900.1
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --enable-shared=yes --enable-st
atic=no
\end_layout

\begin_layout Standard
One of the included demo programs will fail to build due to the missing
 
\begin_inset Quotes eld
\end_inset

sleep
\begin_inset Quotes erd
\end_inset

 implementation in MinGW.
 Open C:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
jasper-1.900.1
\backslash
src
\backslash
appl
\backslash
Makefile in a text editor and delete the item 
\begin_inset Quotes eld
\end_inset

tmrdemo$(EXEEXT)
\begin_inset Quotes erd
\end_inset


\emph on
 
\emph default
at the end of the line starting with 
\begin_inset Quotes eld
\end_inset

bin_PROGRAMS =
\begin_inset Quotes erd
\end_inset

 (should be at line 99 of the file).
 Now create the library and programs:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
This creates a static version of the Jasper library, so we need to make
 the dynamic DLL manually:
\end_layout

\begin_layout LyX-Code
gcc -shared -o libjasper.dll src/libjasper/base/.libs/*.o src/libjasper/bmp/.libs/*.o
 src/li bjasper/jp2/.libs/*.o src/libjasper/jpc/.libs/*.o src/libjasper/jpg/.libs/*.o
 src/libjasper/mi f/.libs/*.o src/libjasper/pgx/.libs/*.o src/libjasper/pnm/.libs/*.o
 src/libjasper/ras/.libs/*.
 o 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
rm /usr/lib/libjasper.*
\end_layout

\begin_layout LyX-Code
install libjasper.dll /usr/lib
\end_layout

\begin_layout Standard
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Subsection
ECW
\begin_inset Note Note
status open

\begin_layout Plain Layout
what are the licensing terms? Login: benjamin.ducke@ufg.uni-kiel.de Pwd: BenECW07
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ECW provides a file format for storing 
\emph on
very
\emph default
 large raster maps.
 It is provided with a free license that can be used in GPL'd projects.
\end_layout

\begin_layout Standard
You need to register on the company's website in order to download the Image
 Compression SDK: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.ermapper.com/
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
MrSID
\end_layout

\begin_layout Standard
MrSID is a raster image format developed by LizardTech (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.lizardtech.com/
\end_layout

\end_inset

).
 No open source implementation of this standard is currently available,
 so we will not discuss it here any further.
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Standard
GRIB
\end_layout

\begin_layout Standard
GRIB (GRIdded Binary) is a format used by meteorologists.
 GRIB support is currently in GDAL 1.5.0, but it is unclear, how to enable
 it and which of the many APIs to use (see list here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/GRIB
\end_layout

\end_inset

).
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Curl 7.18.0
\end_layout

\begin_layout Standard
Curl is a tool and C library that provide an easy way to transfer files
 from a URL.
 It is needed by GDAL for WMS functionality.
\end_layout

\begin_layout Standard
Download the file 
\emph on
curl-7.18.0.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://curl.haxx.se/
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf curl-7.18.0.tar.bz2
\end_layout

\begin_layout LyX-Code
cd curl-7.18.0
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --enable-shared=yes --enable-st
atic=no --with-ssl
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Subsection
PostgreSQL
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:PostgreSQL-8.2.5"

\end_inset

.
\end_layout

\begin_layout Standard
Note: The GDAL configure script may fail to detect 
\emph on
libpg.dll
\emph default
 correctly.
 See further details in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:GDAL/OGR"

\end_inset

.
\end_layout

\begin_layout Subsection
MySQL
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:MySQL-bins"

\end_inset

.
\end_layout

\begin_layout Subsection

\color black
Xerces-C 2.8.0
\end_layout

\begin_layout Standard
Xerces is an XML parsing library necessary for WMS support in both GDAL
 and GRASS.
 Instructions for building on MinGW are also available here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://codesynthesis.com/projects/xsd/extras/build-windows.xhtml
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Download the file 
\emph on
xerces-c-src_2.8.0.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://xerces.apache.org/xerces-c/download.cgi
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
export XERCESCROOT=/src/xerces-c-src_2_8_0
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf xerces-c-src_2_8_0.tar.gz
\end_layout

\begin_layout LyX-Code
cd xerces-c-src_2_8_0/src/xercesc
\end_layout

\begin_layout LyX-Code
./runConfigure -p mingw-msys -c gcc -x g++ -n fileonly -r none -z -mno-cygwin
 -C --host=i686-mingw32
\end_layout

\begin_layout Standard
Before we can run 
\emph on
make
\emph default
, we need to fix some of the Makefiles a little bit (we need to add an extra
 colon in some places).
\end_layout

\begin_layout Standard
In file 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
xerces-c-src_2_8_0
\backslash
src
\backslash
xercesc
\backslash
Makefile.incl
\emph default
, near the top, change 
\end_layout

\begin_layout LyX-Code
ALL: all
\end_layout

\begin_layout Standard
to
\end_layout

\begin_layout LyX-Code
ALL:: all
\end_layout

\begin_layout Standard
In file 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
xerces-c-src_2_8_0
\backslash
src
\backslash
xercesc
\backslash
util
\backslash
Makefile.util.submodule
\emph default
, near the top, change 
\end_layout

\begin_layout LyX-Code
all: includes $(CPP_OBJECTS)
\end_layout

\begin_layout Standard
to
\end_layout

\begin_layout LyX-Code
all:: includes $(CPP_OBJECTS)
\end_layout

\begin_layout Standard
In file 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
xerces-c-src_2_8_0
\backslash
obj
\backslash
Makefile 
\emph default
you will find the following definition at line 104:
\end_layout

\begin_layout LyX-Code
all: ${FQ_REAL_NAME} ${FQ_REAL_DEPDOM}
\end_layout

\begin_layout Standard
Change it to read:
\end_layout

\begin_layout LyX-Code
all:: ${FQ_REAL_NAME} ${FQ_REAL_DEPDOM}
\end_layout

\begin_layout Standard
Now the source code can be compiled (There will be many warnings.
 You can safely ignore them):
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
This will create the Windows DLLs and copy them and all header files into
 
\emph on
/usr/local
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Important note: Whenever linking to Xerces-C fails with a lot of undefined
 symbols, chances are that you need to add 
\emph on
-DXML_LIBRARY
\emph default
 to the C flags! <- this was only true for the static version, but now we
 have a dynamic one!
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Expat 2.0.1
\begin_inset CommandInset label
LatexCommand label
name "sub:Expat"

\end_inset


\end_layout

\begin_layout Standard
Expat is another XML parser used by GDAL for its KML driver.
 It is also needed for the Quantum GIS GPS points (GPX) import plugin.
\end_layout

\begin_layout Standard
Dowload the file 
\emph on
expat-2.0.1.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/projects/expat/
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
tar -xzf expat-2.0.1.tar.gz
\end_layout

\begin_layout LyX-Code
cd expat-2.0.1
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --enable-static=no --enable-sha
red=yes
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libexpat.la
\end_layout

\begin_layout Subsection
ODBC
\end_layout

\begin_layout Standard
MinGW and Windows come with all libraries and header files needed for ODBC
 support (see also 
\begin_inset CommandInset ref
LatexCommand vref
reference "ODBC"

\end_inset

).
\end_layout

\begin_layout Subsection
ArcSDE
\end_layout

\begin_layout Standard
GDAL can be configured to support data stored in ESRI's ArcSDE spatial database
 software (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.esri.com
\end_layout

\end_inset

).
 As this is commercial, closed source software, it will not be discussed
 here.
\end_layout

\begin_layout Subsection
Oracle Calls Interface (OCI)
\end_layout

\begin_layout Standard
This can be used to connect GDAL with the commercial, closed source Oracle
 DBMS (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.oracle.com/technology/tech/oci/index.html
\end_layout

\end_inset

), a hyper-expensive software that will not be covered here.
\end_layout

\begin_layout Subsection
libXML 2.6.31
\begin_inset CommandInset label
LatexCommand label
name "sub:libXML"

\end_inset


\end_layout

\begin_layout Standard
LibXML provides functionality for parsing XML files.
 It is needed by the OPeNDAP Grid Client (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:OPeNDAP"

\end_inset

) and the GRASS predictive modelling extensions (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Predictive-Modelling,-Xtent,"

\end_inset

).
\end_layout

\begin_layout Standard
Download the file 
\emph on
libxml2-2.6.31.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://xmlsoft.org/downloads.html
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout Standard
Configure, compile and install libXML:
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf libxml2-2.6.31.tar.gz
\end_layout

\begin_layout LyX-Code
cd libxml2-2.6.31
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --disable-static --with-iconv=/usr
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Subsection

\color red
OPeNDAP Grid Client (DODS) 3.4
\color inherit

\begin_inset CommandInset label
LatexCommand label
name "sub:OPeNDAP"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: get this working!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
OPenDAP is a software framework for scientific data networking (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.opendap.org/
\end_layout

\end_inset

).
 It simplifies scientific data networking, allowing simple access to remote
 data.
 Local data can be made accessible to remote locations by using OPeNDAP
 servers.
\end_layout

\begin_layout Standard
Download the client library source code (file 
\emph on
ocapi-1.33.tar.gz
\emph default
) from here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.opendap.org/download/ocapi.html
\end_layout

\end_inset

.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
(or is it this one, GDAL needs: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.opendap.org/download/libdap++.html
\end_layout

\end_inset

:C ++ API?).
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
SQLite
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:SQLite"

\end_inset

.
\end_layout

\begin_layout Subsection
DWGDirect
\end_layout

\begin_layout Standard
DWGDirect (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://opendesign.com/
\end_layout

\end_inset

) is an API that provides access to CAD data formats (DWG and DXF).
 It's licensing terms are quite restrictive, so it will not be covered here.
\end_layout

\begin_layout Subsection
Panorama GIS
\end_layout

\begin_layout Standard
GDAL can be compiled to support the Panorama GIS (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.gisinfo.ru/index_en.htm
\end_layout

\end_inset

) file format.
 Since this is a closed source development, we will not consider it here.
\end_layout

\begin_layout Subsection
Informix DataBlade (IDB)
\end_layout

\begin_layout Standard
GDAL can be configured to support IBM's Informix DataBlade technology (see
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www-306.ibm.com/software/data/informix/blades/
\end_layout

\end_inset

).
 As this is closed source software, it will not be discussed here.
\end_layout

\begin_layout Subsection
GEOS
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:GEOS"

\end_inset

.
 GDAL also supports GEOS for topological operations.
\end_layout

\begin_layout Subsection
FME
\end_layout

\begin_layout Standard
FME (Feature Manipulation Engine; see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.safe.com/
\end_layout

\end_inset

) is a closed source development providing many geodata readers and writers
 which will not be discussed further here.
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Subsection
Perl
\begin_inset Note Note
status open

\begin_layout Plain Layout
Currently fails to create SWIG bindings
\end_layout

\end_inset


\end_layout

\begin_layout Standard
GDAL can be configured to create Perl bindings.
\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Python
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Python"

\end_inset

.
\end_layout

\begin_layout Standard
GDAL supports both an old (
\begin_inset Quotes eld
\end_inset

traditional
\begin_inset Quotes erd
\end_inset

) and a new (
\begin_inset Quotes eld
\end_inset

next generation
\begin_inset Quotes erd
\end_inset

) set of Python bindings, only one of which can be enabled at compilation
 time.
 The GDAL project itself recommends the new bindings, which we will also
 use here.
\end_layout

\begin_layout Standard
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Subsection
PHP
\end_layout

\begin_layout Standard
GDAL can be configured to create PHP bindings.
\end_layout

\begin_layout Subsection
Ruby
\end_layout

\begin_layout Standard
GDAL can be configured to create Ruby bindings.
\end_layout

\begin_layout Subsection
Visual Basic
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
GDAL and OGR Libraries 1.5.1 and Tools
\end_layout

\begin_layout Standard
In this section, we will look at how to configure, compile and install the
 actual GDAL (and OGR) libraries and tools using MinGW and MSYS.
\end_layout

\begin_layout Standard
IMPORTANT: This process is not smooth yet and you will probably need to
 make some adjustments and restart it several times, depending on your GDAL
 configuration.
 Therefore, you might want to read through this section once 
\emph on
in its entirety
\emph default
 before you actually do anything -- just so you know what is waiting for
 you and will not waste time trying to fix things that you cannot at this
 point.
\end_layout

\begin_layout Standard
Download 
\emph on
gdal-1.5.1.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://download.osgeo.org/gdal/
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzvf gdal-1.5.1.tar.gz
\end_layout

\begin_layout LyX-Code
cd gdal-1.5.1
\end_layout

\begin_layout Standard
The options to pass to the configure script depend on what features you
 want in GDAL/OGR.
 Generally, you need to add 
\emph on
--with-something
\emph default
 statements to the 
\emph on
configure
\emph default
 line.
 Use
\end_layout

\begin_layout LyX-Code
./configure --help
\end_layout

\begin_layout Standard
to see what you can add.
 Whatever you do, 
\emph on
do not
\emph default
 disable GDAL's 
\emph on
libtool
\emph default
 using 
\emph on
--without-libtool
\emph default
.
 Libtool does not work perfectly on MinGW, but without it, things are even
 much worse! Some things, such as JPEG and TIFF, are supported by GDAL internall
y and can be enabled by passing a 
\emph on
--with-something=internal
\emph default
 option to the 
\emph on
configure
\emph default
 script.
\end_layout

\begin_layout Standard
Any other external drivers must be present as dynamic link libraries (DLLs).
 Any static libraries will result in a static GDAL library, as well!
\end_layout

\begin_layout Standard

\color black
Unfortunately, the GDAL 
\emph on
configure
\emph default
 script has some flaws on MinGW which we need to correct immediately.
 Open 
\emph on
C:
\backslash
msys
\backslash
src
\backslash
gdal-1.5.1
\backslash
configure
\emph default
 in a text editor.
\end_layout

\begin_layout Standard
For Xerces-C support: the GDAL configure script will attempt to compile
 a little test program.
 There is a definition for LDFLAGS (ca.
 line 23492), which may include 
\emph on
-lpthread
\emph default
 (no matter whether it's actually installed on your system or not):
\end_layout

\begin_layout LyX-Code
xerces_lib_flags="-L$xerces_prefix/lib -lxerces-c -lpthread"
\end_layout

\begin_layout Standard
If you don't have the pthread library (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Pthreads-win32"

\end_inset

) installed, delete the corresponding item from the definition above.
\end_layout

\begin_layout Standard
For Expat support: again, we need to patch the configure script a little
 bit to allow the test program to compile successfully.
 After ca.
 line 23824, you should find the following sequence:
\end_layout

\begin_layout LyX-Code
EXPAT_CFLAGS=""
\end_layout

\begin_layout LyX-Code
EXPAT_LDFLAGS=""
\end_layout

\begin_layout LyX-Code
EXPAT_VERSION=""
\end_layout

\begin_layout Standard
Immediately after those statements, insert another line that reads:
\end_layout

\begin_layout LyX-Code
LIBS="$LIBS -L$expat_prefix/lib -lexpat"
\end_layout

\begin_layout Standard
Use the following line to configure a version that includes all capabilities
 mentioned in these instructions (provided that you have installed everything
 up to here):
\end_layout

\begin_layout LyX-Code
\begin_inset Note Note
status open

\begin_layout Plain Layout
whatever gets changed here also needs to be added to stage2!
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --host=mingw32 --with-cfitsio=/
usr --with-pcraster=internal --with-jasper=no --with-pg=/usr/local/bin/pg_config.
exe --with-mysql=/usr/local/mysql/scripts/mysql_config --with-xerces --with-odbc
=/mingw --with-sqlite3=/usr --with-geos=/usr/bin/geos-config --with-expat
 --with-curl --with-python --with-jasper=/usr --with-netcdf=/usr
\begin_inset Note Note
status open

\begin_layout Plain Layout
--with-threads=? --enable-static=no finally working?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Read the summary output produced at the end of the 
\emph on
configure
\emph default
 script run carefully.
 It will tell you whether all of the features you want will be built into
 GDAL.
\end_layout

\begin_layout LyX-Code
GDAL is now configured for i386-pc-mingw32
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  Installation directory:    /usr
\end_layout

\begin_layout LyX-Code
  C compiler:                mingw32-gcc -O2 
\end_layout

\begin_layout LyX-Code
  C++ compiler:              mingw32-g++ -O2 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  LIBTOOL support:           yes
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  LIBZ support:              external
\end_layout

\begin_layout LyX-Code
  GRASS support:             no
\end_layout

\begin_layout LyX-Code
  CFITSIO support:           external
\end_layout

\begin_layout LyX-Code
  PCRaster support:          internal
\end_layout

\begin_layout LyX-Code
  NETCDF support:            yes
\end_layout

\begin_layout LyX-Code
  LIBPNG support:            internal
\end_layout

\begin_layout LyX-Code
  LIBTIFF support:           internal (BigTIFF=yes)
\end_layout

\begin_layout LyX-Code
  LIBGEOTIFF support:        internal
\end_layout

\begin_layout LyX-Code
  LIBJPEG support:           internal
\end_layout

\begin_layout LyX-Code
  LIBGIF support:            internal
\end_layout

\begin_layout LyX-Code
  OGDI support:              no
\end_layout

\begin_layout LyX-Code
  HDF4 support:              no
\end_layout

\begin_layout LyX-Code
  HDF5 support:              no
\end_layout

\begin_layout LyX-Code
  KAKADU support:            no
\end_layout

\begin_layout LyX-Code
  JASPER support:            yes (GeoJP2=no)
\end_layout

\begin_layout LyX-Code
  ECW support:               no
\end_layout

\begin_layout LyX-Code
  MrSID support:             no
\end_layout

\begin_layout LyX-Code
  CURL support (wcs):        yes
\end_layout

\begin_layout LyX-Code
  POSTGRESQL support:        yes
\end_layout

\begin_layout LyX-Code
  MySQL support:             yes
\end_layout

\begin_layout LyX-Code
  XERCES support:            yes
\end_layout

\begin_layout LyX-Code
  ODBC support:              yes
\end_layout

\begin_layout LyX-Code
  PGEO support:              yes
\end_layout

\begin_layout LyX-Code
  OCI support:               no
\end_layout

\begin_layout LyX-Code
  SDE support:               no
\end_layout

\begin_layout LyX-Code
  DODS support:              no
\end_layout

\begin_layout LyX-Code
  SQLite support:            yes
\end_layout

\begin_layout LyX-Code
  DWGdirect support          no
\end_layout

\begin_layout LyX-Code
  PANORAMA GIS support:      no
\end_layout

\begin_layout LyX-Code
  INFORMIX DataBlade support:no
\end_layout

\begin_layout LyX-Code
  GEOS support:              yes
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  Old-gen python          no   
\end_layout

\begin_layout LyX-Code
  SWIG Bindings:          python  
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  Statically link PROJ.4:    no
\end_layout

\begin_layout LyX-Code
  enable OGR building:       yes
\end_layout

\begin_layout LyX-Code
  enable pthread support:    no
\end_layout

\begin_layout LyX-Code
  hide internal symbols:     no
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Unfortunately, this is not all.
 First, we need to fix the 
\emph on
libtool
\emph default
 a bit, as it is slightly broken on MinGW:
\end_layout

\begin_layout LyX-Code
mv libtool libtool.orig
\end_layout

\begin_layout LyX-Code
cat libtool.orig | sed 's/max_cmd_len=8192/max_cmd_len=32768/g' > libtool
\end_layout

\begin_layout Plain Layout
DO NOT APPLY THIS PATCH.
 It's floating around on the web, but it does only additional harm! Anyway,
 libtool will be re-written after the next configure run ...
\end_layout

\end_inset

In order to link the system ODBC libraries with GDAL, edit 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
gdal-1.5.1
\backslash
GDALmake.opt
\emph default
 and find the line that defines ``LIBS='' at the start of the file.
 After the item ``-L/mingw/lib'', delete the lib items `` -lodbc
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

-lodbcinst'' and add ``-lodbc32 -lodbccp32'' instead to correctly configure
 the ODBC libraries on MinGW (below is a part of the complete line):
\end_layout

\begin_layout LyX-Code
LIBS = ...
 -L/mingw -L/mingw/lib -lodbc32 -lodbccp32  ...
\end_layout

\begin_layout Standard

\emph on
Note: re-running the configure script will reset GDALmake.opt to its original
 contents, so the modification above must be repeated! Any changes to this
 file will cause GDAL to re-compile a lot of code.
 This is normal behaviour.
\end_layout

\begin_layout Standard
We also need to edit some of the Xerces-C related source code.
 Open 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
gdal-1.5.1
\backslash
ogr
\backslash
ogrsf_frmts
\backslash
ili
\backslash
iom
\backslash
iom_utilities.cpp
\emph default
 and rename the 
\emph on
_searchenv ()
\emph default
 function so it does not collide with MinGW's own version.
 Change the line (ca.
 67):
\end_layout

\begin_layout LyX-Code
static void _searchenv(const char *name, const char *envname, char *hitfile)
\end_layout

\begin_layout Standard
to:
\end_layout

\begin_layout LyX-Code
static void _searchenv2(const char *name, const char *envname, char *hitfile)
\end_layout

\begin_layout Standard
When all is fixed, compile the software:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
IMPORTANT: Towards the end, the compilation process will fail with this
 message (!):
\end_layout

\begin_layout LyX-Code
c:
\backslash
mingw
\backslash
bin
\backslash
..
\backslash
lib
\backslash
gcc
\backslash
mingw32
\backslash
3.4.5
\backslash
..
\backslash
..
\backslash
..
\backslash
..
\backslash
mingw32
\backslash
bin
\backslash
ld.exe: cannot find /src/gdal-1.5.0/frmts/o/.libs/EnvisatFile.o 
\end_layout

\begin_layout LyX-Code
collect2: ld returned 1 exit status 
\end_layout

\begin_layout LyX-Code
make[1]: *** [libgdal.la] Error 1 
\end_layout

\begin_layout LyX-Code
make[1]: Leaving directory `/src/gdal-1.5.0' 
\end_layout

\begin_layout LyX-Code
make: *** [check-lib] Error 2 
\end_layout

\begin_layout Standard
To fix this, open the file 
\emph on
C:
\backslash
msys
\backslash
src
\backslash
gdal-1.5.1
\backslash
GDALmake.opt
\emph default
 in a text editor.
\end_layout

\begin_layout Standard
Find the line that defines GDAL_ROOT at the very top of the file.
 This needs to be set to the absolute path of the folder in which the GDAL
 sources are stored on your system.
 Note, however, that the drive has to be specified Windows style (e.g., 
\begin_inset Quotes eld
\end_inset

c:
\begin_inset Quotes erd
\end_inset

) while the directory separators have to be Unix style (
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

).
 If you set up everything exactly as detailed in this text, it should be:
\end_layout

\begin_layout LyX-Code
GDAL_ROOT = c:/msys/1.0/src/gdal-1.5.1
\end_layout

\begin_layout Standard

\emph on
Note: re-running the configure script will reset GDALmake.opt to its original
 contents, so the change above must be repeated! If compiling GDAL for the
 first time, then this modification cannot be made before the compilation
 aborts for the first time.
 Otherwise, different object files will not be found!
\end_layout

\begin_layout Standard
Now continue with the build and install:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
In addition, you should delete the static libraries (note that it would
 be more elegant to configure GDAL using the --enable-static=no option,
 but this seems broken for MinGW at the moment and will result in compilation
 failure, complaining about not being able to create some Makefile rule)
\begin_inset Note Note
status open

\begin_layout Plain Layout
the gdal tools still get statically linked!
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libgdal.a
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libgdal.la
\end_layout

\begin_layout Standard
This is not it for GDAL yet! You will need to re-compile GDAL for GRASS
 support later, 
\emph on
after
\emph default
 you have completed compiling and installing GRASS GIS, as described in
 section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Configuration-and-Installation"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Section
Spatial Statistics
\end_layout

\begin_layout Subsection
R 2.6.0 from source
\end_layout

\begin_layout Standard

\color red
Note: R from source is a major task (see http://cran.r-project.org/doc/manuals/R-a
dmin.html#The-Windows-toolset) for hints.
 However, there are binaries that seem to work and can be integrated into
 the MSYS file structure (see next section).
 R from source needs to be explored further later.
 Currently, the make process aborts with a missing 
\emph on
psignal.h
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Needs properly configured iconv and readline support.
 
\end_layout

\begin_layout Plain Layout
Currently, NLS and iconv (gettext) are simply disabled.
\end_layout

\begin_layout Plain Layout
Also, skip the static libs.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Download the file 
\emph on
R-2.6.0.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.r-project.org
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf R-2.6.0
\end_layout

\begin_layout Standard
Note: there is a problem unpacking the archive under MSYS hat results in
 a number of error message about symlinks failing because of missing files.
 Instead, you have to copy the referenced files manually:
\end_layout

\begin_layout LyX-Code
cd R-2.6.0/src/library/Recommended/
\end_layout

\begin_layout LyX-Code
cp KernSmooth_2.22-21.tar.gz KernSmooth.tgz
\end_layout

\begin_layout LyX-Code
cp boot_1.2-29.tar.gz boot.tgz
\end_layout

\begin_layout LyX-Code
cp rcompgen_0.1-15.tar.gz rcompgen.tgz
\end_layout

\begin_layout LyX-Code
cp rpart_3.1-37.tar.gz rpart.tgz
\end_layout

\begin_layout LyX-Code
cp lattice_0.16-5.tar.gz lattice.tgz
\end_layout

\begin_layout LyX-Code
cp foreign_0.8-23.tar.gz foreign.tgz
\end_layout

\begin_layout LyX-Code
cp nlme_3.1-85.tar.gz nlme.tgz
\end_layout

\begin_layout LyX-Code
cp cluster_1.11.9.tar.gz cluster.tgz
\end_layout

\begin_layout LyX-Code
cp VR_7.2-36.tar.gz VR.tgz
\end_layout

\begin_layout LyX-Code
cp survival_2.32.tar.gz survival.tgz
\end_layout

\begin_layout LyX-Code
cp codetools_0.1-2.tar.gz codetools.tgz
\end_layout

\begin_layout Standard
Next, configure and compile R:
\end_layout

\begin_layout LyX-Code
cd /src/R-2.6.0
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --without-readline --with-iconv=no --with-x=no
 --disable-nls
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Subsection
R 2.6.0 from binaries
\begin_inset CommandInset label
LatexCommand label
name "sub:R-2.6.0-from-bins"

\end_inset


\end_layout

\begin_layout Standard
Download the file 
\emph on
R-2.6.0-win32.exe
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.r-project.org
\end_layout

\end_inset

 and save it to any folder.
 This is a binary installer file.
 Launch it to start the installation process.
\end_layout

\begin_layout Standard
Choose a full installation and disable all options for creating icons, associati
ng file extensions or writing version information to the registry (we want
 to create a 100% package-ready R that can be transferred to any other Windows
 systems w/o admin privileges).
\end_layout

\begin_layout Standard
Install everything into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
R
\emph default
.
 The entire R distribution including demos, docs, etc.
 will then be contained in 
\emph on
/usr/local/R
\emph default
 and can just stay in there.
\end_layout

\begin_layout Standard
In the folder 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
R
\backslash
share
\backslash
locale
\emph default
 you will find many subfolders with language localizations.
 If you want to prevent R from starting a GUI in foreign languages on non-Englis
h systems: delete all of them except the 
\emph on
en
\emph default
 folder.
\end_layout

\begin_layout Standard
Finally, copy the Perl modules to the system-wide folder:
\end_layout

\begin_layout LyX-Code
cd /usr/local/R
\end_layout

\begin_layout LyX-Code
cp share/perl/* /usr/lib/perl5/5.6/ -R
\end_layout

\begin_layout Standard
You may also want to add a line:
\end_layout

\begin_layout LyX-Code
export PATH="$PATH:/usr/local/R/bin"
\end_layout

\begin_layout Standard
to 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
etc
\backslash
profile 
\emph default
to make it more convenient for you to start the software from the MSYS shell.
\end_layout

\begin_layout Standard
Now, you can launch R from within an MSYS terminal window:
\end_layout

\begin_layout LyX-Code
Rgui.exe &
\end_layout

\begin_layout Standard
(Note: the 
\begin_inset Quotes eld
\end_inset

vanilla
\begin_inset Quotes erd
\end_inset

 
\emph on
R.exe
\emph default
 does not work very well under MSYS, there are many problems and crashes,
 works OK under cmd.exe, though).
\end_layout

\begin_layout Standard
Next, you need to install a number of additional R libraries.
 We will install those necessary for interfacing with GRASS and doing spatial
 statistics.
 You need a working internet connection for this.
\end_layout

\begin_layout Standard
In the GUI, select 
\emph on
Packages\SpecialChar \menuseparator
Install package(s)\SpecialChar \ldots{}

\emph default
, then choose a mirror site close to you.
\end_layout

\begin_layout Standard
In the list of packages, you can select multiple entries by holding down
 the 
\emph on
CTRL
\emph default
 key.
 Select the following packages:
\end_layout

\begin_layout LyX-Code
spgrass6
\begin_inset Note Note
status open

\begin_layout Plain Layout
this is the current one!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\SpecialChar \ldots{}
 and press 
\emph on
OK
\emph default
 to have R download and install the packages (and all their dependencies:
 
\emph on
sp, maptools, rgdal
\emph default
).
\end_layout

\begin_layout Standard
Establish a connection to GRASS to test the setup:
\end_layout

\begin_layout Standard

\emph on
Packages\SpecialChar \menuseparator
Load
\emph default
, select 
\emph on
spgrass6
\emph default
 and select 
\emph on
OK
\emph default
.
\end_layout

\begin_layout Standard
Now enter some GRASS interface commands in the R console:
\end_layout

\begin_layout LyX-Code
G<-gmeta6()
\end_layout

\begin_layout LyX-Code
G
\end_layout

\begin_layout Standard
This should dump some basic information about your current mapset on the
 screen.
\end_layout

\begin_layout Standard
Start the local HTML help browser:
\end_layout

\begin_layout LyX-Code
help.start()
\end_layout

\begin_layout Standard
To find additional information.
\end_layout

\begin_layout Standard
Look here for more pointers: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://grass.itc.it/statsgrass/grass6_r_install.html
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
GStat
\end_layout

\begin_layout Subsection
Starspan
\end_layout

\end_inset


\end_layout

\begin_layout Section
GRASS Dependencies
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: v.in.e00 also depends on avcimport being present: http://avce00.maptools.org/
\end_layout

\begin_layout Plain Layout
add 
\begin_inset Quotes eld
\end_inset

paste
\begin_inset Quotes erd
\end_inset

 to MSYS tools (r.regressionline).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note additional information on this topic can be found on 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://geog-pc40.ulb.ac.be/grass/wingrass
\end_layout

\end_inset

 and on 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wiki.qgis.org/qgiswiki/BuildingWindowsBinaryOnLinux
\end_layout

\end_inset

, the latter being instructions for cross-compilation of windows binaries.
 This section is mostly a synthesis of those two plus some extra detail.
\end_layout

\begin_layout Standard
Install or skip the components listed in the 
\begin_inset Quotes eld
\end_inset

Optional Dependencies
\begin_inset Quotes erd
\end_inset

 section according to how much functionality you need in GRASS.
\end_layout

\begin_layout Subsection
Mandatory Dependencies
\end_layout

\begin_layout Standard
All of the following libraries need to be installed (in addition to the
 things listed in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:MinGW-and-MSYS"

\end_inset

) in order for a basic version of GRASS 6.3 to compile.
\end_layout

\begin_layout Subsubsection
Proj4 4.6.0
\begin_inset CommandInset label
LatexCommand label
name "sub:Proj4"

\end_inset


\end_layout

\begin_layout Standard
Proj4 contains projection parameters and tools for geographic projection
 support in GRASS.
 The make process for shared libraries does not work very well on MinGW
 at this point, so some manual extra work is required.
\end_layout

\begin_layout Standard
Download the file 
\emph on
proj-4.6.0.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://proj.maptools.org
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzvf proj-4.6.0.tar.gz
\end_layout

\begin_layout LyX-Code
cd proj-4.6.0
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --enable-shared --disable-stati
c
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
Next, we need to make the shared Windows DLLs and re-link the Proj4 tools
 to them.
\end_layout

\begin_layout LyX-Code
rm ./src/*.exe
\end_layout

\begin_layout LyX-Code
rm /usr/lib/*proj*
\end_layout

\begin_layout LyX-Code
cd ./src/.libs/
\end_layout

\begin_layout LyX-Code
gcc -shared -s -o libproj.dll -lm *.o
\end_layout

\begin_layout LyX-Code
install libproj.dll /usr/lib
\end_layout

\begin_layout LyX-Code
cd ..
\end_layout

\begin_layout LyX-Code
gcc -s -g -O2 -o cs2cs.exe cs2cs.o gen_cheb.o p_series.o .libs/emess.o -L/usr/lib
 -lproj
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
gcc -s -g -O2 -o geod.exe geod.o geod_set.o geod_for.o geod_inv.o .libs/emess.o
 -L/usr/lib -lproj
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
gcc -s -g -O2 -o nad2bin.exe nad2bin.o
\end_layout

\begin_layout LyX-Code
gcc -s -g -O2 -o nad2nad.exe nad2nad.o .libs/emess.o -L/usr/lib -lproj
\end_layout

\begin_layout LyX-Code
gcc -s -g -O2 -o proj.exe proj.o gen_cheb.o p_series.o .libs/emess.o -L/usr/lib
 -lproj
\end_layout

\begin_layout LyX-Code
cp proj.exe invproj.exe
\end_layout

\begin_layout LyX-Code
cp geod.exe invgeod.exe
\end_layout

\begin_layout LyX-Code
for i in *.exe ; do install $i /usr/local/bin ; done
\end_layout

\begin_layout Subsubsection
XDRLib
\end_layout

\begin_layout Standard
This is a cross-platform library for abstraction of data and interchange.
\end_layout

\begin_layout Standard
You need to install a stripped-down version of Sun's XDRlib with networking
 code removed.
 Download this file: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wiki.qgis.org/qgiswiki/BuildingWindowsBinaryOnLinux?action=AttachFile&do=ge
t&target=xdr-4.0-mingw2.tar.gz
\end_layout

\end_inset

and save it to the source directory (
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
src
\emph default
).
 
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf xdr-4.1.0-mingw2.tar.gz
\end_layout

\begin_layout LyX-Code
cd xdr-4.0-mingw2
\end_layout

\begin_layout Standard
The package is missing a 
\emph on
config.guess
\emph default
 file that is required for the 
\emph on
config
\emph default
ure script to work.
 Just copy the one from Proj4 package you just installed:
\end_layout

\begin_layout LyX-Code
cp ../proj-4.5.0/config.guess .
\end_layout

\begin_layout Standard
Then continue as usual:
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
Finally, open 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
include
\backslash
rpc
\backslash
types.h
\emph default
 and delete the following two lines:
\end_layout

\begin_layout LyX-Code
#define FALSE (0) 
\end_layout

\begin_layout LyX-Code
#define TRUE (1)
\end_layout

\begin_layout Subsubsection
LibPNG
\end_layout

\begin_layout Standard
This allows GRASS to render maps in PNG image format.
 It is also needed for the GIS Manager GUI.
 The 
\emph on
configure
\emph default
 script does not set the right options to create Windows DLLs correctly
 on MinGW, so you need to download a version without a 
\emph on
configure
\emph default
 script and edit the 
\emph on
Makefile
\emph default
 manually a bit.
\end_layout

\begin_layout Standard
Download 
\emph on
libpng-1.2.25-no-config.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.libpng.org/pub/png/libpng.html
\end_layout

\end_inset

 and save it into the source folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xjf libpng-1.2.25-no-config.tar.bz2
\end_layout

\begin_layout LyX-Code
cd libpng-1.2.25
\end_layout

\begin_layout LyX-Code
cp scripts/makefile.mingw ./Makefile
\end_layout

\begin_layout Standard
Edit 
\emph on
Makefile
\emph default
 and make sure that it contains the following lines:
\end_layout

\begin_layout LyX-Code
# Where the zlib library and include files are located
\end_layout

\begin_layout LyX-Code
ZLIBLIB= /usr/lib
\end_layout

\begin_layout LyX-Code
ZLIBINC= /usr/include
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
pngtest-stat$(EXE): pngtest.o $(STATLIB)
\end_layout

\begin_layout LyX-Code
        $(CC) -shared $(CFLAGS) $< $(LDFLAGS) -o $@
\end_layout

\begin_layout Standard
Note: the last statement 
\begin_inset Quotes eld
\end_inset

tricks
\begin_inset Quotes erd
\end_inset

 the Makefile into producing a shared DLL instead of a static library.
\end_layout

\begin_layout Standard
For the same purpose, add another make target by adding these lines to the
 very end of 
\emph on
Makefile
\emph default
:
\end_layout

\begin_layout LyX-Code
libpng.dll: $(OBJS)
\end_layout

\begin_layout LyX-Code
        gcc -s -shared -o $@ $(OBJS) -L$(ZLIBLIB) -lz
\end_layout

\begin_layout Standard
IMPORTANT: the line starting with 
\begin_inset Quotes eld
\end_inset

gcc
\begin_inset Quotes erd
\end_inset

 
\emph on
must
\emph default
 be indented using exactly 
\emph on
one
\emph default
 real tabulator.
 Make sure to set your text editor to actually insert a real tabulator character
 (instead of some spaces) when you press the TAB key.
 For PSPad, the setting is in 
\begin_inset Quotes eld
\end_inset

Settings\SpecialChar \menuseparator
Program Settings\SpecialChar \ldots{}
\SpecialChar \menuseparator
Editor (part 2)
\begin_inset Quotes erd
\end_inset

.
 If you do not do this, then you will probably get a complaint about a 
\begin_inset Quotes eld
\end_inset

missing separator
\begin_inset Quotes erd
\end_inset

 when you start the make process later!
\end_layout

\begin_layout Standard
Finally, create a new text file 
\emph on
libpng.pc
\emph default
 and give it this content:
\end_layout

\begin_layout LyX-Code
prefix=/usr
\end_layout

\begin_layout LyX-Code
exec_prefix=/usr
\end_layout

\begin_layout LyX-Code
libdir=/usr/lib
\end_layout

\begin_layout LyX-Code
includedir=/usr/include
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
Name: libpng
\end_layout

\begin_layout LyX-Code
Description: Loads and saves PNG files
\end_layout

\begin_layout LyX-Code
Version: 1.2.25
\end_layout

\begin_layout LyX-Code
Libs: -L${libdir} -lpng -lz -lm
\end_layout

\begin_layout LyX-Code
Cflags: -I${includedir}
\end_layout

\begin_layout Standard
Note: this is a package description which will later be used by other software
 that needs LibPNG via the 
\begin_inset Quotes eld
\end_inset

pkg-config
\begin_inset Quotes erd
\end_inset

 tool (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Other-Tools"

\end_inset

).
\end_layout

\begin_layout Standard
Now build and install the PNG library:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make libpng.dll
\end_layout

\begin_layout LyX-Code
install libpng.dll /usr/lib
\end_layout

\begin_layout LyX-Code
install -m 644 png.h pngconf.h /usr/include
\end_layout

\begin_layout LyX-Code
cp libpng.pc /usr/lib/pkgconfig/
\end_layout

\begin_layout Subsubsection
GDAL/OGR as a GRASS Dependency
\end_layout

\begin_layout Standard
GDAL is essential for GRASS to be able to convert between different raster
 (GDAL) and vector (OGR) GIS file formats.
 The GDAL library itself is complex and will use a number of external tools
 and libraries to optionally support more fileformats.
 GDAL is also useful in itself (it comes with a number of command line tools)
 and in conjunction with many other packages, such as QGIS.
 Thus, there is a dedicated section on setting up GDAL (
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:GDAL/OGR"

\end_inset

) which you should work through next (if you have not done so at this point)
 in order to finish the mandatory setup for GRASS.
\end_layout

\begin_layout Standard
Also note that you have to re-compile GDAL after you finished compiling
 and installing GRASS, as described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Re-compiling-GDAL-with"

\end_inset

.
\end_layout

\begin_layout Subsection
Optional Dependencies
\end_layout

\begin_layout Standard
Install or skip the libraries in this section, according to how much functionali
ty you want in your GRASS 6.3 installation.
\end_layout

\begin_layout Subsubsection
LibJPEG 6b
\begin_inset CommandInset label
LatexCommand label
name "sub:LibJPEG"

\end_inset


\end_layout

\begin_layout Standard
LibJPEG allows GRASS to save maps as JPEG images.
 
\end_layout

\begin_layout Standard
The source for version 6b is available in file 
\emph on
jpegsrc.v6b.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.ijg.org/files/
\end_layout

\end_inset

.
 However, it is hard to compile this using MinGW as the sources need some
 patching.
 The easiest way is to use the MinGWport file from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435
\end_layout

\end_inset

.
 Download the file 
\emph on
jpeg-6b-mingwPORT.tar.bz2
\emph default
 from there and save it to the 
\emph on
source
\emph default
 folder.
 The package contains an install script 
\emph on
mingwPORT.sh
\emph default
 that makes it easy to download, patch and install LibJPEG under MSYS.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xjf jpeg-6b-mingwPORT.tar.bz2 
\end_layout

\begin_layout LyX-Code
cd jpeg-6b/mingwPORT
\end_layout

\begin_layout LyX-Code
sh mingwPORT.sh
\end_layout

\begin_layout Standard
This will start the install script.
 Answer the questions as follows from this transcript (note: you can go
 with the defaults except for 
\begin_inset Quotes eld
\end_inset

Installation directory
\begin_inset Quotes erd
\end_inset

):
\end_layout

\begin_layout LyX-Code
Download file? (Yes) y
\end_layout

\begin_layout LyX-Code
Download file URI? (ftp://ftp.uu.net/graphics/jpeg) 
\end_layout

\begin_layout LyX-Code
Archive file type?
\end_layout

\begin_layout LyX-Code
0) unknown
\end_layout

\begin_layout LyX-Code
1) tar.gz
\end_layout

\begin_layout LyX-Code
2) tgz
\end_layout

\begin_layout LyX-Code
3) tar.bz2
\end_layout

\begin_layout LyX-Code
4) tbz2
\end_layout

\begin_layout LyX-Code
5) zip
\end_layout

\begin_layout LyX-Code
Select a numeric value: (1) 
\end_layout

\begin_layout LyX-Code
Archive file? (jpegsrc.v6b.tar.gz) 
\end_layout

\begin_layout LyX-Code
Download to path? (/tmp) 
\end_layout

\begin_layout LyX-Code
Source path? (/usr/src/jpeg-6b) /usr/src/jpeg-6b
\end_layout

\begin_layout LyX-Code
Installation directory? (/mingw) /usr
\end_layout

\begin_layout LyX-Code
CFLAGS (-O3 -s -mms-bitfields -march=i686)
\end_layout

\begin_layout Standard
Now wait for the install script to download the source code, patch, compile
 and install it.
\end_layout

\begin_layout Subsubsection
LibTIFF 3.8.2
\begin_inset CommandInset label
LatexCommand label
name "sub:LibTIFF"

\end_inset


\end_layout

\begin_layout Standard
LibTIFF allows GRASS to save maps as TIFF images.
 
\end_layout

\begin_layout Standard
It needs LibJPEG (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:LibJPEG"

\end_inset

) to be built and installed first!
\end_layout

\begin_layout Standard
The source for version 3.8.2 is available in file 
\emph on
tiff-3.8.2.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.libtiff.org
\end_layout

\end_inset

.
 However, it is hard to compile this using MinGW as the sources need some
 patching.
 The easiest way is to use the MinGWport file from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/project/showfiles.php?group_id=2435
\end_layout

\end_inset

.
 Download the file 
\emph on
tiff-3.8.2-mingwPORT.tar.bz2
\emph default
 from there and save it to the 
\emph on
source
\emph default
 folder.
 The package contains a shell script that makes it easy to download, patch
 and install LibTIFF under MSYS.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xjf tiff-3.8.2-mingwPORT.tar.bz2
\end_layout

\begin_layout LyX-Code
cd tiff-3.8.2/mingwPORT
\end_layout

\begin_layout LyX-Code
sh mingwPORT.sh
\end_layout

\begin_layout Standard
This will start the install script.
 Answer the questions as follows from this transcript.
 The default options will not work for our installation of LibJPEG, so make
 sure to specify the C and C++ flags as shown below:
\end_layout

\begin_layout LyX-Code
Download file? (Yes) 
\end_layout

\begin_layout LyX-Code
Download file URI? (ftp://ftp.remotesensing.org/pub/libtiff) 
\end_layout

\begin_layout LyX-Code
Archive file type?
\end_layout

\begin_layout LyX-Code
0) unknown
\end_layout

\begin_layout LyX-Code
1) tar.gz
\end_layout

\begin_layout LyX-Code
2) tgz
\end_layout

\begin_layout LyX-Code
3) tar.bz2
\end_layout

\begin_layout LyX-Code
4) tbz2
\end_layout

\begin_layout LyX-Code
5) zip
\end_layout

\begin_layout LyX-Code
Select a numeric value: (1) 
\end_layout

\begin_layout LyX-Code
Archive file? (tiff-3.8.2.tar.gz) 
\end_layout

\begin_layout LyX-Code
Download to path? (/tmp) 
\end_layout

\begin_layout LyX-Code
Source path? (/usr/src/tiff-3.8.2) 
\end_layout

\begin_layout LyX-Code
Installation directory? (/mingw) /usr
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CFLAGS (-O3 -s -mms-bitfields -march=i686) -O3 -s -mms-bitfields -march=i686
 -I/usr/include -L/usr/lib -ljpeg
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CXXFLAGS (-O3 -s -mms-bitfields -march=i686) -O3 -s -mms-bitfields -march=i686
 -I/usr/include -L/usr/lib -ljpeg
\end_layout

\begin_layout Standard
Now wait for the install script to download the source code, patch, compile
 and install it.
\end_layout

\begin_layout Subsubsection
FreeType 2.3.5
\end_layout

\begin_layout Standard
This allows GRASS to use visually nicer TrueType Fonts for map labelling.
\end_layout

\begin_layout Standard
Download the file 
\emph on
freetype-2.3.5.tar.bz2
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://download.savannah.gnu.org/releases/freetype/
\end_layout

\end_inset

 and save it to the source folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xjf freetype-2.3.5.tar.bz2
\end_layout

\begin_layout LyX-Code
cd freetype-2.3.5
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --enable-shared --disable-static
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Next, we need to make and install the shared Windows DLLs
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libfreetype.*
\end_layout

\begin_layout LyX-Code
cd objs/.libs
\end_layout

\begin_layout LyX-Code
g++.exe -s -shared -o ./freetype.dll -L/usr/lib *.o
\end_layout

\begin_layout LyX-Code
install freetype.dll /usr/lib
\end_layout

\begin_layout LyX-Code
install freetype.dll /usr/local/bin
\end_layout

\begin_layout Plain Layout
-> not correct! A dll.a has been installed and the dll is in obj/.libs/libfreetype
-6.dll
\end_layout

\begin_layout Plain Layout
However, we could probably do:
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libfreetype.la
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Readline
\end_layout

\begin_layout Standard
Readline is a library that allows applications to make it more pleasant
 and efficient for the user to compose command line input.
 It is useful for many DBMS interface programs and GRASS command input.
\end_layout

\begin_layout Standard
Make sure that you have installed PDCurses as described in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:PDCurses"

\end_inset

!
\end_layout

\begin_layout Standard
See detailed instructions 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Readline"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection

\color red
Cairo 1.4.10
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
SKIPPED for now.
 Will include this one when it is clear how useful this currently is!
\end_layout

\begin_layout Plain Layout
LibZ is not detected correctly, disabling PDF output!
\end_layout

\begin_layout Plain Layout
Cairo has many more features, that are all disabled currently due to missing
 deps.
 See summary output of configure script.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color red
See notes here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://lars.ahlzen.com/cairograss/
\end_layout

\end_inset

.
 Is Cairo support now in CVS?
\end_layout

\begin_layout Standard
Cairo is a 2D graphics API that allows GRASS to render crips, anti-aliased
 maps to the screen, PDF or PS output file.
\end_layout

\begin_layout LyX-Code
export PKG_CONFIG_PATH="/usr/lib/pkgconfig"
\end_layout

\begin_layout LyX-Code
export png_REQUIRES="libpng.pc" 
\end_layout

\begin_layout LyX-Code
export png_CFLAGS="-I/usr/include"
\begin_inset Note Note
status open

\begin_layout Plain Layout
maybe not necessary
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
export png_LIBS="-L/usr/lib -lpng" 
\begin_inset Note Note
status open

\begin_layout Plain Layout
maybe not necessary
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Get 
\emph on
cairo-1.4.10.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://cairographics.org
\end_layout

\end_inset

 and save it in the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf cairo-1.4.10.tar.gz
\end_layout

\begin_layout LyX-Code
cd cairo-1.4.10
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --enable-shared=yes --enable-st
atic=no --enable-xlib=no
\end_layout

\begin_layout Standard
This should give support for Win32, PNG, PDF, PS and SVG renderers.
 Now compile it.
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Subsubsection
Tcl/Tk
\end_layout

\begin_layout Standard
Tcl/Tk is useful for the old GRASS GUI.
 If you have not installed it already (in order to have SQLite file DBMS
 support) and want the veteran module GUIs for GRASS, follow the instructions
 in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Tcl/Tk"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Ghostscript 8.61
\end_layout

\begin_layout Standard
Ghostscript is used by GRASS to create Postscript and PDF map output.
\end_layout

\begin_layout Standard
Download the file 
\emph on
gs861w32.exe
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pages.cs.wisc.edu/~ghost/doc/GPL/gpl861.htm
\end_layout

\end_inset

 and save it to any folder
\begin_inset Note Note
status open

\begin_layout Plain Layout
newest version 8.62 does not have win binaries yet and even unpacking the
 source on Win is a problem (symlinks)!
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Run the program and install Ghostscript into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
gs 
\emph default
(you can safely choose to also install the Ghostscript fonts)
\emph on
.
 
\end_layout

\begin_layout Standard
When the installation has finished, add the path to the Ghostscript executables
 to your MSYS 
\emph on
profile
\emph default
, so that the shell will be able to find them later.
 Open the file 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
etc
\backslash
profile
\emph default
 in a text editor.
 Towards the end of it, you will see a number of 
\begin_inset Quotes eld
\end_inset

export PATH=
\begin_inset Quotes erd
\end_inset

 statements.
 After the last one, add:
\end_layout

\begin_layout LyX-Code
export PATH="$PATH:/usr/local/gs/gs8.61/bin"
\end_layout

\begin_layout Standard
Finally, make a copy that will be easier to find for GRASS:
\end_layout

\begin_layout LyX-Code
cp /usr/local/gs/gs8.61/bin/gswin32c /usr/local/gs/gs8.61/bin/gs
\end_layout

\begin_layout Standard
For previewing Postscript files, you may also want to download and install
 GSview, available here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pages.cs.wisc.edu/~ghost/gsview/get49.htm
\end_layout

\end_inset

.
 Get 
\emph on
gsv49w32.exe
\emph default
 and run it.
 Please note that this is a Shareware that wants to be registered and not
 open source software!
\end_layout

\begin_layout Subsubsection

\color black
wxPython 2.8
\color inherit

\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Compilation from source:
\end_layout

\begin_layout Plain Layout

\color red
Detailed instructions are here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.mingw.org/cms/node/17
\end_layout

\end_inset

.
 This seems like a lot of effort.
\end_layout

\begin_layout Plain Layout

\color red
There are some development files here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://downloads.sourceforge.net/wxpython/wxPython2.8-win32-devel-2.8.6.0.tar.bz2
\end_layout

\end_inset

, but those seem to be for MS Visual C.
 However, see here: http://www.mingw.org/mingwfaq.shtml#faq-msvcdll).
\end_layout

\begin_layout Plain Layout

\color red
This may also be relevant: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pyopengl.sourceforge.net/
\end_layout

\end_inset

.
\end_layout

\begin_layout Plain Layout
Get the file wxPython-src-2.8.6.0.tar.bz2 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://downloads.sourceforge.net/wxpython
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Compiling and installing wxPython 2.8 from scratch on MinGW and MSYS is currently
 problematic, which is why we will simply use the binary distribution available
 here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.wxpython.org/download.php#binaries
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Download the file 
\emph on
wxPython2.8-win32-unicode-2.8.7.1-py25.exe
\emph default
 (Unicod enabled version) and save it to any folder.
 Run the exe file.
 The installer should correctly predict your Python installation path as
 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
python
\backslash
Lib
\backslash
site-packages
\emph default
.
 Select to do a 
\begin_inset Quotes eld
\end_inset

Full installation
\begin_inset Quotes erd
\end_inset

 with the default options.
 In the last screen, leave all options activated and select 
\begin_inset Quotes eld
\end_inset

Finish
\begin_inset Quotes erd
\end_inset

.
 Now simple wait a few moments until the wxPython installer has prepared
 your Python installation.
\end_layout

\begin_layout Subsubsection

\color black
BLAS and LAPACK
\end_layout

\begin_layout Standard
Note: LAPACK/BLAS support is intended for future module implementations,
 no need to use it at the present time!
\end_layout

\begin_layout Standard
BLAS (Basic Linear Algebra Subprograms) is a library that provides standard
 routines for basic vector and matrix operations.
\end_layout

\begin_layout Standard
LAPACK is a library that provides functions for solving systems of linear
 equations, matrix factorizations, solving eigenvalue and singular value
 problems.
 
\end_layout

\begin_layout Standard
The LAPACK library depends on BLAS, so we will compile and install both.
 More detailed instructions can be found here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.canerten.com/compile-lapack-and-blas-as-dll-on-windows/
\end_layout

\end_inset

.
 Both libraries are written in Fortran.
\end_layout

\begin_layout Standard
Get the file 
\emph on
lapack-lite-3.1.1.tgz
\emph default
 (i.e.
 the 
\begin_inset Quotes eld
\end_inset

light
\begin_inset Quotes erd
\end_inset

 package without all of the additional documentation) from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.netlib.org/lapack
\end_layout

\end_inset

.
 Save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf lapack-lite-3.1.1.tgz
\end_layout

\begin_layout LyX-Code
cd lapack-lite-3.1.1
\end_layout

\begin_layout LyX-Code
cp INSTALL/dlamch.f SRC/
\end_layout

\begin_layout LyX-Code
cp INSTALL/slamch.f SRC/
\end_layout

\begin_layout LyX-Code
g77.exe --shared -o blas.dll BLAS/SRC/*.f -O
\end_layout

\begin_layout Standard
Due to the hard limit of command line length in Win32, which also affects
 the MSYS shell, we need to compile the LAPACK library in pieces and stick
 them together at the end (note: this works for Windows XP, Windows 2000
 is even more restricted, so this may fail).
 We will use the Linux static library Makefile for this purpose, then create
 the DLL from the ouptut:
\end_layout

\begin_layout LyX-Code
cp INSTALL/make.inc.LINUX ./make.inc 
\end_layout

\begin_layout LyX-Code
cd SRC
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
g77 -funroll-all-loops -O3 -c dlamch.f -o dlamch.o
\end_layout

\begin_layout LyX-Code
g77 -funroll-all-loops -O3 -c slamch.f -o slamch.o
\end_layout

\begin_layout LyX-Code
cd ..
\end_layout

\begin_layout LyX-Code
g77 --shared SRC/*.o -o lapack.dll blas.dll
\end_layout

\begin_layout Standard
Finally, install the libraries into the MSYS system paths:
\end_layout

\begin_layout LyX-Code
install *.dll /usr/lib
\end_layout

\begin_layout Standard
Note: BLAS and LAPACK seem to have several C APIs.
 GRASS comes with its own set of C headers for both, so installing the DLLs
 should suffic.
\end_layout

\begin_layout Subsubsection
FFTW
\end_layout

\begin_layout Standard
FFTW is a C subroutine library for computing the discrete Fourier transform
 (DFT).
 Further instructions for compilation on Windows/MinGW and binaries are
 here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.fftw.org/install/windows.html
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Download the file 
\emph on
fftw-3.1.2.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.fftw.org/download.html
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf fftw-3.1.2.tar.gz
\end_layout

\begin_layout LyX-Code
cd fftw-3.1.2
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
./configure --with-our-malloc16 --with-windows-f77-mangling --enable-shared
 --disable-static --enable-threads --with-combined-threads --enable-portable-bin
ary --enable-sse2
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Subsubsection
FFMPEG
\begin_inset Note Note
status open

\begin_layout Plain Layout
http://www.webalice.it/marco.pasetti/temp/grass_wip/BuildFromSource.html#FFMPEG
\end_layout

\end_inset


\end_layout

\begin_layout Standard
FFMPEG is a library of multimedia encoders.
 It is used by GRASS (specifically NVIZ) to produce animations, like fly-through
s.
 The source code can be checked out from SVN, or, perhaps more conveniently,
 pickep up as a nightly snapshot.
\end_layout

\begin_layout Standard
Go to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://ffmpeg.mplayerhq.hu/download.html
\end_layout

\end_inset

 and download the 
\begin_inset Quotes eld
\end_inset

bare sources
\begin_inset Quotes erd
\end_inset

 (file 
\emph on
ffmpeg-export-snapshot.tar.bz2
\emph default
) and save the file to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
cd ffmpeg-export-
\emph on
<current-date>
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --enable-shared --disable-static --extra-cflags="-mno-c
ygwin -mms-bitfields" --extra-ldflags="-Wl,--add-stdcall-alias" --enable-memalig
n-hack --disable-ffserver --disable-ffplay
\end_layout

\begin_layout Subsubsection
Berkeley MPEG Encoder
\end_layout

\begin_layout Standard
This is a little utility (aka 
\emph on
ppmtompeg
\emph default
) used by 
\emph on
r.out.mpeg
\emph default
 to generate animated sequences of raster maps.
\end_layout

\begin_layout Standard
Unfortunately, the current code on the project's homepage 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://bmrc.berkeley.edu/frame/research/mpeg/mpeg_encode.html
\end_layout

\end_inset

 is not compatible with MinGW.
\end_layout

\begin_layout Standard
Thus, the easiest way to install this is to use the port of the 
\begin_inset Quotes eld
\end_inset

NetPbm for Windows
\begin_inset Quotes erd
\end_inset

 tools, of which 
\emph on
ppmtompeg
\emph default
 is a part.
 Go to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gnuwin32.sourceforge.net/packages/netpbm.htm
\end_layout

\end_inset

 and download the 
\begin_inset Quotes eld
\end_inset

Binaries
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Dependencies
\begin_inset Quotes erd
\end_inset

 zip files (
\emph on
netpbm-10.27-bin.zip
\emph default
 and 
\emph on
netpbm-10.27-dep.zip
\emph default
) to any folder.
 Extract the files 
\emph on
ppmtompeg.exe
\emph default
 and 
\emph on
libnetpbm10.dll
\emph default
 from the first zip file to 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin
\emph default
.
 Extract the file 
\emph on
jpeg62.dll
\emph default
 from the second zip file to 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin
\emph default
.
\end_layout

\begin_layout Section
GRASS 6.3
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\begin_layout Enumerate
Rename v.report in DUCKE.TGZ.
\end_layout

\begin_layout Enumerate
Create a little icon in the gis.m map window that directly outputs PDF, using
 ghostscript.
\end_layout

\begin_layout Enumerate
Create a non-crashing r.los as a wrapped r.cva.
\end_layout

\begin_layout Enumerate
Make a tool for wrapping all .sh scripts as .bat files.
\end_layout

\begin_layout Enumerate
Read through this: http://grass.gdf-hannover.de/wiki/WinGRASS_Current_Status
\end_layout

\begin_layout Enumerate
r.sim.water, r.sim.sediment crash after compilation
\end_layout

\begin_layout Enumerate
fix the i.* modules that need a sleep() and wait() func, using the Cygwin
 DLL
\end_layout

\begin_layout Enumerate
Something crashes in lib (OGSF?) seems to be related to libavcodec from
 FFMPEG !!! Maybe related to NVIZ crashes !!!
\end_layout

\begin_layout Plain Layout
Switch this to GRASS 6.3.0 release when available! BETTER: add a chapter for
 install from official release and leave in the CVS one as an option.
\end_layout

\begin_layout Plain Layout
Note Moritz' last email to grass-dev on Oct 24: he did something to rebuild
 the fonts after finishing the compile!
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Downloading from SVN
\end_layout

\begin_layout Standard
The current GRASS source code is now hosted on an SVN server, so you need
 to have the Subversion client installed (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Subversion"

\end_inset

).
 As with all builds from online repositories under active development, this
 is work in progress and there is no guarantee that the sources will fully
 compile on any given day.
 However, GRASS SVN code traditionally compiles more smoothly than many
 other projects.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
svn checkout https://svn.osgeo.org/grass/grass/trunk grass_trunk
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
UNTESTED:
\end_layout

\begin_layout Plain Layout
Note: If you are behind a company firewall that block SVN access, an easy
 work-around is to use an SSH tunnel for the checkout.
 Download 
\emph on
plink.exe
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html
\end_layout

\end_inset

 and save it to 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin
\emph default
.
 Then do:
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
echo -e '#!/bin/sh
\backslash
nssh -p 443 "$*"' > /usr/bin/ssh43
\end_layout

\begin_layout LyX-Code
chmod a+x /usr/bin/ssh43
\end_layout

\begin_layout LyX-Code
export CVS_RSH=/usr/bin/ssh443
\end_layout

\begin_layout LyX-Code
svn checkout https://svn.osgeo.org/grass/grass/trunk grass_trunk
\begin_inset Note Note
status open

\begin_layout Plain Layout
Of course, Subversion and CVS maintain information about the repository
 you'd checked out before arriving at the restrictive location.
 You can convince Subversion to use a different port with an existing workspace
 by setting an environment variable.
\end_layout

\begin_layout Plain Layout
set SVN_SSH=plink -P 443
\end_layout

\begin_layout Plain Layout
->plink.exe can be downloaded from http://www.chiark.greenend.org.uk/~sgtatham/putty/
download.html, but it crashes when called from MSYS!
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Choose to permanently accept the certificate and the client should then
 download the source code from the repository (more details here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://trac.osgeo.org/grass/wiki/DownloadSource
\end_layout

\end_inset

).
 There might be a considerable delay before the connection is made.
 Be patient.
\end_layout

\begin_layout Standard
Subsequent updates of the sources can be done like this:
\end_layout

\begin_layout LyX-Code
svn up
\begin_inset Note Note
status open

\begin_layout Plain Layout
The latest GRASS-AddOn source code is available from the OSGeo Subversion
 server:
\end_layout

\begin_layout Plain Layout
svn checkout https://svn.osgeo.org/grass/grass-addons grass-addons
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
GRASS 6.3 (stable)
\end_layout

\begin_layout Standard
Download the file 
\emph on
grass-6.3.0.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.grass.itc.it
\end_layout

\end_inset

 andd.
 save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout Subsection
Merging in Add-ons
\end_layout

\begin_layout Subsection
Configuration and Installation
\begin_inset CommandInset label
LatexCommand label
name "sub:Configuration-and-Installation"

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Not working: 
\end_layout

\begin_layout Plain Layout
1.
 lib/ogsf and NVIZ currently do not compile !!!
\end_layout

\begin_layout Plain Layout
2.
 GUI
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

X-Mons (no X!)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Module forms: even though the forms library compiles (see notes on Makefile
 problems), the interfaces don't come up!: NOTE: WORKS FINE WHEN STARTED
 THROUGH CMD.EXE!
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Module forms: percentage bars don't work too well: only jump to 100% when
 the module has finished!
\end_layout

\begin_layout Plain Layout
3.
 NVIZ
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

comes up, but crashes when trying to load vector points (Tcl 8.5)
\end_layout

\begin_layout Plain Layout
6.
 Monitors (any)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

needs cross-platform sockets: see here: http://discuss.fogcreek.com/joelonsoftware
3/default.asp?cmd=show&ixPost=73735
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

and here: http://www.mingw.org/MinGWiki/index.php/sockets
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

and here: http://www.mozilla.org/projects/nspr/#NSPRReference (!)
\end_layout

\begin_layout Plain Layout
4.
 CMD.EXE:
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

no tab completion on Windows 2000: http://support.microsoft.com/kb/244407
 (DISABLED BY DEFAULT! ARGH) needs registry hack: do that in grass63.bat
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

%HOMEPATH% seems to not get set for Domain Logins, so cmd.exe is started
 in wrong dir on network setups! USE %HOME% instead!
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

should export Windows Homepath to the shell so both work in same HOME dir!
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout
PYTHON
\end_layout

\begin_layout Plain Layout
Python support is enabled by default, no configure options need to be set.
\end_layout

\begin_layout Plain Layout
wxPython GUI can be started using 
\begin_inset Quotes eld
\end_inset

grass63 -wxpython
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

g.gui wxpython
\begin_inset Quotes erd
\end_inset

 (see /etc/wxpython/README).
\end_layout

\begin_layout Plain Layout
To compile the new digitizer, two options have to be set:
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before we run make, we need to copy some DLLs into places where Windows
 will be able to locate them (this is because some GRASS modules need to
 be run to output module interface descriptions right afer the compilation).
 Remember to do this everytime you compiled a new version of a DLL shared
 library that GRASS depends on, before you try to compile a new GRASS version!
\end_layout

\begin_layout LyX-Code
cp /usr/lib/libpng.dll /usr/bin/
\end_layout

\begin_layout LyX-Code
cp /usr/lib/libcfitsio.dll /usr/bin/
\end_layout

\begin_layout LyX-Code
cp /usr/lib/libjasper.dll /usr/bin/
\end_layout

\begin_layout LyX-Code
cp /usr/lib/libnetcdf.dll /usr/bin/
\end_layout

\begin_layout LyX-Code
cp /usr/local/lib/libxerces-c2_8_0.dll /usr/bin/
\end_layout

\begin_layout LyX-Code
cp /usr/lib/sqlite3.dll /usr/bin/sqlite3.dll
\end_layout

\begin_layout LyX-Code
cp /usr/lib/libproj.dll /usr/bin/
\end_layout

\begin_layout LyX-Code
cp /usr/lib/blas.dll /usr/bin/
\end_layout

\begin_layout LyX-Code
cp /usr/lib/lapack.dll /usr/bin/
\end_layout

\begin_layout Standard
Now, let's configure and compile GRASS itself.
\end_layout

\begin_layout Standard
Again, the precise syntax of the configure line will depend on what features
 you want to have installed.
 The example given here will create a full GRASS version with all the features
 discussed in this document.
\end_layout

\begin_layout Standard
Depending on whether you wish to work with an official GRASS release or
 an SVN copy, do either
\end_layout

\begin_layout LyX-Code
cd /src/grass6
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
cd /src/grass_trunk
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
./configure --with-cxx --with-includes=/usr/include --with-libs=/usr/lib
 --with-opengl=windows --without-x --disable-x11 --enable-shared --with-curses
 --with-postgres --with-sqlite --with-readline --with-freetype --with-freetype-i
ncludes=/usr/include/freetype2 --with-freetype-libs=/usr/lib --with-tcltk-includ
es=/usr/local/include --with-tcltk-libs=/usr/local/bin --with-mysql --with-mysql
-includes=/usr/local/mysql/include --with-mysql-libs=/usr/local/mysql/bin
 --with-nls --with-odbc --with-blas --with-lapack
\end_layout

\begin_layout LyX-Code
\begin_inset Note Note
status open

\begin_layout Plain Layout
Sort configure options according to configure script summary order!
\end_layout

\begin_layout Plain Layout
--enable-w11: for direct Win32 graphics (only useful once d.* runs on Win32,
 i.e the sockets support has been figured out)
\end_layout

\begin_layout Plain Layout
FFMPEG support currently crashes building OGSF lib and thus NVIZ:
\end_layout

\begin_layout Plain Layout
--with-ffmpeg --with-ffmpeg-includes="/usr/include/libavcodec /usr/include/libav
format" --with-ffmpeg-libs=/usr/bin
\end_layout

\begin_layout Plain Layout
BUT SEE HERE: http://www.webalice.it/marco.pasetti/temp/grass_wip/BuildFromSource.ht
ml#FFMPEG !!!
\end_layout

\begin_layout Plain Layout
Cairo: same as above
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This should result in an output like this:
\end_layout

\begin_layout LyX-Code
GRASS is now configured for:  i686-pc-mingw32
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
 Source directory:            /src/grass-6.3.0RC5
\end_layout

\begin_layout LyX-Code
 Build directory:             /src/grass-6.3.0RC5
\end_layout

\begin_layout LyX-Code
 Installation directory:      ${prefix}/grass-6.3.0RC5
\end_layout

\begin_layout LyX-Code
 Startup script in directory: ${exec_prefix}/bin
\end_layout

\begin_layout LyX-Code
 C compiler:                  gcc -g -O2 
\end_layout

\begin_layout LyX-Code
 C++ compiler:                c++ -g -O2
\end_layout

\begin_layout LyX-Code
 Building shared libraries:   yes
\end_layout

\begin_layout LyX-Code
 64bit support:               no
\end_layout

\begin_layout LyX-Code
 OpenGL platform:             Windows
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  NVIZ:                       yes
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  BLAS support:               yes
\end_layout

\begin_layout LyX-Code
  C++ support:                yes
\end_layout

\begin_layout LyX-Code
  DWG support:                no
\end_layout

\begin_layout LyX-Code
  FFMPEG support:             no
\end_layout

\begin_layout LyX-Code
  FFTW support:               yes
\end_layout

\begin_layout LyX-Code
  FreeType support:           yes
\end_layout

\begin_layout LyX-Code
  GDAL support:               yes
\end_layout

\begin_layout LyX-Code
  GLw support:                no
\end_layout

\begin_layout LyX-Code
  JPEG support:               yes
\end_layout

\begin_layout LyX-Code
  LAPACK support:             yes
\end_layout

\begin_layout LyX-Code
  Large File Support (LFS):   yes
\end_layout

\begin_layout LyX-Code
  Motif support:              no
\end_layout

\begin_layout LyX-Code
  MySQL support:              yes
\end_layout

\begin_layout LyX-Code
  NLS support:                yes
\end_layout

\begin_layout LyX-Code
  ODBC support:               yes
\end_layout

\begin_layout LyX-Code
  OGR support:                yes
\end_layout

\begin_layout LyX-Code
  OpenGL support:             yes
\end_layout

\begin_layout LyX-Code
  PNG support:                yes
\end_layout

\begin_layout LyX-Code
  PostgreSQL support:         yes
\end_layout

\begin_layout LyX-Code
  Python support:             no
\end_layout

\begin_layout LyX-Code
  Readline support:           yes
\end_layout

\begin_layout LyX-Code
  SQLite support:             yes
\end_layout

\begin_layout LyX-Code
  Tcl/Tk support:             yes
\end_layout

\begin_layout LyX-Code
  wxWidgets support:          no
\end_layout

\begin_layout LyX-Code
  TIFF support:               yes
\end_layout

\begin_layout LyX-Code
  X11 support:                no
\end_layout

\begin_layout LyX-Code
  MacOSX application:         no 
\end_layout

\begin_layout Standard
For ODBC support to work, you need to add the libraries and include files
 to the EXTRA_INC and LIBES items in 
\emph on
/src/grass6/db/drivers/odbc/Makefile
\emph default
:
\end_layout

\begin_layout LyX-Code
EXTRA_INC = -include windows.h $(ODBCINC) -I$(MODULE_TOPDIR)/lib/db/dbmi_driver
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
LIBES = -lodbc32 $(DBMIDRIVERLIB) $(DBMIBASELIB) $(DBMIEXTRALIB) $(DBSTUBSLIB)
 $(GISLIB) $(DATETIMELIB)
\end_layout

\begin_layout Standard
Check whether GRASS has all the needed features, then compile it:
\end_layout

\begin_layout LyX-Code
make 
\color red
USE_CAIRO=1
\end_layout

\begin_layout Standard
At the end of the compilation process, you will be presented with a list
 of modules that could not be compiled.
 Under MinGW, these currently are:
\end_layout

\begin_layout LyX-Code
/src/grass6/imagery/i.class
\end_layout

\begin_layout LyX-Code
/src/grass6/imagery/i.ortho.photo/photo.2image
\end_layout

\begin_layout LyX-Code
/src/grass6/imagery/i.ortho.photo/photo.2target
\end_layout

\begin_layout LyX-Code
/src/grass6/imagery/i.points
\end_layout

\begin_layout LyX-Code
/src/grass6/imagery/i.vpoints
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.daemon
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.edgedensity
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.patchdensity
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.patchnum
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.shape
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.simpson
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.shannon
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.mps
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.mpa
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.padcv
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.padsd
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.padrange
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.cwed
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.richness
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.li/r.li.dominance
\end_layout

\begin_layout LyX-Code
/src/grass6/raster/r.terraflow
\begin_inset Note Note
status open

\begin_layout Plain Layout
fixed using Glynn's latest patch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To install GRASS, enter:
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
This will install GRASS into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
grass-6.3.cvs
\emph default
.
\end_layout

\begin_layout Subsection
Re-compiling GDAL with GRASS support
\begin_inset CommandInset label
LatexCommand label
name "sub:Re-compiling-GDAL-with"

\end_inset


\end_layout

\begin_layout Standard
GDAL and GRASS have a circular dependency on each other: GRASS wants to
 be compiled with GDAL support and in order for GDAL to interface with GRASS,
 it needs to be compiled with GRASS support.
 
\end_layout

\begin_layout Standard
Thus, once compilation and installation of GRASS is completed, you need
 to re-compile GDAL to include GRASS support!
\end_layout

\begin_layout Standard
The following assumes that you are configuring GDAL for a GRASS SVN checkout.
 Otherwise, you need to adjust the 
\emph on
--with-grass=
\emph default
 option to point to the correct root directory of your GRASS installation.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
cd gdal-1.5.1
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --bindir=/usr/local/bin --host=mingw32 --with-cfitsio=/
usr --with-pcraster=internal --with-jasper=no --with-pg=/usr/local/bin/pg_config.
exe --with-mysql=/usr/local/mysql/scripts/mysql_config --with-xerces --with-odbc
=/mingw --with-sqlite3=/usr --with-geos=/usr/bin/geos-config --with-expat
 --with-curl --with-python --with-jasper=/usr --with-netcdf=/usr --with-grass=/u
sr/local/grass-6.3.0
\end_layout

\begin_layout LyX-Code
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Go back to GDAL stage 1 and make sure both lines are identical except for
 --with-grass= !
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Read the summary output produced at the end of the 
\emph on
configure
\emph default
 script run carefully.
 It will tell you whether all of the features you want will be built into
 GDAL.
\end_layout

\begin_layout LyX-Code
GDAL is now configured for i386-pc-mingw32
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  Installation directory:    /usr
\end_layout

\begin_layout LyX-Code
  C compiler:                mingw32-gcc -O2 
\end_layout

\begin_layout LyX-Code
  C++ compiler:              mingw32-g++ -O2 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  LIBTOOL support:           yes
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  LIBZ support:              external
\end_layout

\begin_layout LyX-Code
  GRASS support:             yes
\end_layout

\begin_layout LyX-Code
  CFITSIO support:           external
\end_layout

\begin_layout LyX-Code
  PCRaster support:          internal
\end_layout

\begin_layout LyX-Code
  NETCDF support:            yes
\end_layout

\begin_layout LyX-Code
  LIBPNG support:            internal
\end_layout

\begin_layout LyX-Code
  LIBTIFF support:           internal (BigTIFF=yes)
\end_layout

\begin_layout LyX-Code
  LIBGEOTIFF support:        internal
\end_layout

\begin_layout LyX-Code
  LIBJPEG support:           internal
\end_layout

\begin_layout LyX-Code
  LIBGIF support:            internal
\end_layout

\begin_layout LyX-Code
  OGDI support:              no
\end_layout

\begin_layout LyX-Code
  HDF4 support:              no
\end_layout

\begin_layout LyX-Code
  HDF5 support:              no
\end_layout

\begin_layout LyX-Code
  KAKADU support:            no
\end_layout

\begin_layout LyX-Code
  JASPER support:            yes (GeoJP2=no)
\end_layout

\begin_layout LyX-Code
  ECW support:               no
\end_layout

\begin_layout LyX-Code
  MrSID support:             no
\end_layout

\begin_layout LyX-Code
  CURL support (wcs):        yes
\end_layout

\begin_layout LyX-Code
  POSTGRESQL support:        yes
\end_layout

\begin_layout LyX-Code
  MySQL support:             yes
\end_layout

\begin_layout LyX-Code
  XERCES support:            yes
\end_layout

\begin_layout LyX-Code
  ODBC support:              yes
\end_layout

\begin_layout LyX-Code
  PGEO support:              yes
\end_layout

\begin_layout LyX-Code
  OCI support:               no
\end_layout

\begin_layout LyX-Code
  SDE support:               no
\end_layout

\begin_layout LyX-Code
  DODS support:              no
\end_layout

\begin_layout LyX-Code
  SQLite support:            yes
\end_layout

\begin_layout LyX-Code
  DWGdirect support          no
\end_layout

\begin_layout LyX-Code
  PANORAMA GIS support:      no
\end_layout

\begin_layout LyX-Code
  INFORMIX DataBlade support:no
\end_layout

\begin_layout LyX-Code
  GEOS support:              yes
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  Old-gen python          no   
\end_layout

\begin_layout LyX-Code
  SWIG Bindings:          python  
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  Statically link PROJ.4:    no
\end_layout

\begin_layout LyX-Code
  enable OGR building:       yes
\end_layout

\begin_layout LyX-Code
  enable pthread support:    no
\end_layout

\begin_layout LyX-Code
  hide internal symbols:     no
\end_layout

\begin_layout Standard
Next, open 
\emph on
GDALmake.opt
\emph default
 in a text editor.
\end_layout

\begin_layout Standard
Find the line that defines GDAL_ROOT at the very top of the file.
 This needs to be set to the absolute path of the folder in which the GDAL
 sources are stored on your system.
 Note, however, that the drive has to be specified Windows style (e.g., 
\begin_inset Quotes eld
\end_inset

c:
\begin_inset Quotes erd
\end_inset

) while the directory separators have to be Unix style (
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

).
 If you set up everything exactly as detailed in this text, it should be:
\end_layout

\begin_layout LyX-Code
GDAL_ROOT = c:/msys/1.0/src/gdal-1.5.1
\end_layout

\begin_layout Standard
In order to link the system ODBC libraries with GDAL, find the line that
 defines ``LIBS='' at the start of the file.
 After the item ``-L/mingw/lib'', delete the lib items `` -lodbc
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

-lodbcinst'' and add ``-lodbc32 -lodbccp32'' instead to correctly configure
 the ODBC libraries on MinGW (below is a part of the complete line):
\end_layout

\begin_layout LyX-Code
LIBS = ...
 -L/mingw -L/mingw/lib -lodbc32 -lodbccp32 
\end_layout

\begin_layout Standard

\emph on
Note: re-running the configure script will reset GDALmake.opt to its original
 contents, so the modification above must be repeated! Any changes to this
 file will cause GDAL to re-compile a lot of code.
 This is normal behaviour.
\end_layout

\begin_layout Standard
Now continue with the build:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
IMPORTANT: the GDAL building procedure is less than perfect at this point.
 If you have any problems, make sure to consult 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:GDAL/OGR"

\end_inset

.
\end_layout

\begin_layout Standard
In addition, you should delete the static libraries (note that it would
 be more elegant to configure GDAL using the --enable-static=no option,
 but this seems broken for MinGW at the moment and will result in compilation
 failure, complaining about not being able to create some Makefile rule):
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libgdal.a
\end_layout

\begin_layout LyX-Code
rm /usr/lib/libgdal.la
\end_layout

\begin_layout Subsection
Installing a minimal environment
\end_layout

\begin_layout Standard
Copy the entire 
\emph on
C:
\backslash
msys
\backslash
local
\backslash

\emph default
 folder to a new directory.
 This will be the base directory of the distribution.
 We will just call it 
\begin_inset Quotes eld
\end_inset

base
\begin_inset Quotes erd
\end_inset

 and assume it is 
\emph on
C:
\backslash
WinGRASS
\emph default
 for now.
\end_layout

\begin_layout Standard
Add a folder 
\emph on
C:
\backslash
WinGRASS
\backslash
share
\emph default
 and copy 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
share
\backslash
proj
\emph default
 into it.
\end_layout

\begin_layout Standard
Copy any additional executables and DLLs that you wish to use out of your
 MSYS distribution into 
\emph on
C:
\backslash
WinGRASS
\backslash
bin
\emph default
 and 
\emph on
C:
\backslash
WinGRASS
\backslash
lib
\emph default
, respectively.
 This especially regards the MSYS shell 
\emph on
sh.exe
\emph default
 and some Unix tools.
 If you want to be sure you have everything, just copy everything in 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin
\emph default
 to 
\emph on
C:
\backslash
WinGRASS
\backslash
bin.
 
\emph default
Also copy the folder 
\emph on
lib
\emph default
 and 
\emph on
share
\emph default
.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Really need to find a way to know what is strictly necessary!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you want to use R, copy the 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
R
\emph default
 to 
\emph on
C:
\backslash
WinGRASS
\backslash
R
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
ssh-support: copy c:
\backslash
msys
\backslash
1.0
\backslash
libexec
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Running GRASS through cmd.exe and sh.exe
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO:
\end_layout

\begin_layout Plain Layout
1.
 Finally figure out the right way to startup GRASS and don't start the Shell
 in the home dir by default (only when launched thru GIS Manager).
\end_layout

\begin_layout Plain Layout
2.
 Use LESS or MORE as pager?
\end_layout

\begin_layout Plain Layout
See this email:
\end_layout

\begin_layout Plain Layout
Seppo.Kaitala wrote:
\end_layout

\begin_layout Plain Layout
> > I have used GRASS6.2.* in FC 7 and in Ubuntu 7.04 and 7.10.
 (all from
\end_layout

\begin_layout Plain Layout
> > binaries).
\end_layout

\begin_layout Plain Layout
> > 
\end_layout

\begin_layout Plain Layout
> > Creation of new location goes smoothly in FC 7 but in both versions
 of
\end_layout

\begin_layout Plain Layout
> > Ubuntu (Gnome) I have had problems in creation of new location.
\end_layout

\begin_layout Plain Layout
> > When it asks for parameters and if I give an command LIST, it lists
 datum
\end_layout

\begin_layout Plain Layout
> > list, but I can't get back to the command prompt.
 The the programm fails
\end_layout

\begin_layout Plain Layout
> > and the location is created without proper definitions.
 Somebody might
\end_layout

\begin_layout Plain Layout
> > advise to run g.setproj, but if I remeber correctly the same problems
 here
\end_layout

\begin_layout Plain Layout
> > and actually it is easer for me to edit directly the file DEFAULT-WIND.
\end_layout

\begin_layout Plain Layout
My guess is that the Ubuntu package is following the Debian packaging policy
 of
\end_layout

\begin_layout Plain Layout
altering the GRASS code to use the system default pager (which is "less")
\end_layout

\begin_layout Plain Layout
instead of the one GRASS tries to use first (which is "more").
 To get out of
\end_layout

\begin_layout Plain Layout
"less" you press 'q' for quit.
 Personally I prefer to use "more" as the GRASS
\end_layout

\begin_layout Plain Layout
pager, as if you don't know what to do just bashing the space and enter
 keys
\end_layout

\begin_layout Plain Layout
gives you instant feedback and eventually gets you out of it.
 For "less" you
\end_layout

\begin_layout Plain Layout
need prior knowledge of what to do, which isn't very easy when you don't
 even
\end_layout

\begin_layout Plain Layout
know that you're in it.
\end_layout

\begin_layout Plain Layout
Anyway, to make GRASS use "more", put the following in a ~/.grass.bashrc file:
\end_layout

\begin_layout Plain Layout
export GRASS_PAGER=more
\end_layout

\begin_layout Plain Layout
Hamish
\end_layout

\end_inset


\end_layout

\begin_layout Standard
MSYS has real problems when being run as a windows shell (output buffering,
 not accepting command line arguments, problematic file name handling, concept
 of an additional Unix home dir, \SpecialChar \ldots{}
).
 The only feasible thing to do at the moment seems to be using Windows'
 cmd.exe to start GRASS commands from there 
\color red
(first running sh.exe inside the Windows console to get a decent shell)
\color inherit
.
\end_layout

\begin_layout Standard
Note: this is currently also the only way to get NVIZ and forms GUI working!
\end_layout

\begin_layout Standard
The startup script is in 
\emph on
C:
\backslash
msys
\backslash
local
\backslash
bin
\backslash
grass.bat
\emph default
.
 We need to set some vars so that all DLLs and EXEs can be found correctly:
\end_layout

\begin_layout LyX-Code

\color red
rem #########################################################################
\end_layout

\begin_layout LyX-Code

\color red
rem #
\end_layout

\begin_layout LyX-Code

\color red
rem #           GRASS Initialization
\end_layout

\begin_layout LyX-Code

\color red
rem #
\end_layout

\begin_layout LyX-Code

\color red
rem #########################################################################
\end_layout

\begin_layout LyX-Code

\color red
rem *******Environment variables***********
\end_layout

\begin_layout LyX-Code

\color red
rem Uncomment and set the following values if they differ from the indicated
 default
\end_layout

\begin_layout LyX-Code

\color red
rem Directory where your .grassrc6 file will be stored
\end_layout

\begin_layout LyX-Code

\color red
rem set HOME=%USERPROFILE%
\end_layout

\begin_layout LyX-Code

\color red
rem Name of the wish (Tk) executable
\end_layout

\begin_layout LyX-Code

\color red
rem set GRASS_WISH=wish.exe
\end_layout

\begin_layout LyX-Code

\color red
rem Path to the shell command 
\end_layout

\begin_layout LyX-Code

\color red
rem (adjust to where you installed msys or another shell)
\end_layout

\begin_layout LyX-Code

\color red
rem set GRASS_SH=c:
\backslash
msys
\backslash
1.0
\backslash
bin
\backslash
sh.exe
\end_layout

\begin_layout LyX-Code

\color red
rem Path to utilities used by some scripts, such as awk, sed, etc
\end_layout

\begin_layout LyX-Code

\color red
rem (adjust to where you installed msys, gnuwin32, or other similar utilises)
\end_layout

\begin_layout LyX-Code

\color red
rem set PATH=%PATH%;c:
\backslash
msys
\backslash
1.0
\backslash
bin;c:
\backslash
msys
\backslash
1.0
\backslash
lib
\end_layout

\begin_layout LyX-Code

\color red
rem Path to your web browser
\end_layout

\begin_layout LyX-Code

\color red
rem set GRASS_HTML_BROWSER=%SYSTEMDRIVE%
\backslash
PROGRA~1
\backslash
INTERN~1
\backslash
IEXPLORE.EX
\end_layout

\begin_layout LyX-Code

\color red
rem Path to the proj files (notably the epsg projection list)
\end_layout

\begin_layout LyX-Code

\color red
rem set GRASS_PROJSHARE=c:
\backslash
grass
\backslash
share
\backslash
proj
\end_layout

\begin_layout LyX-Code

\color red
set WINGISBASE=/usr/local/grass-6.3.0RC6
\end_layout

\begin_layout LyX-Code

\color red
"%WINGISBASE%
\backslash
etc
\backslash
init.bat" %*
\end_layout

\begin_layout Standard
Next, we create a little batch file 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
grass-6.3.cvs
\backslash
bin/winterm.bat
\emph default
 with the following content:
\end_layout

\begin_layout LyX-Code

\color red
PASTE HERE
\end_layout

\begin_layout Standard
And 
\emph on
welcome.bat
\emph default
 to create the familiar GRASS welcome message and start an sh.exe:
\end_layout

\begin_layout LyX-Code

\color red
PASTE HERE
\end_layout

\begin_layout Standard
Next, we edit 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
grass-6.3.cvs
\backslash
etc
\backslash
init.bat
\emph default
, around line 97, so that the GIS Manager will get started in the background
 and we can have a command terminal window
\begin_inset Note Note
status open

\begin_layout Plain Layout
Update this
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code

\color red
if %errorlevel% == 1 goto exitinit
\end_layout

\begin_layout LyX-Code

\color red
 
\end_layout

\begin_layout LyX-Code

\color red
if not "%GRASS_WISH%"=="" (
\end_layout

\begin_layout LyX-Code

\color red
  start "GIS Manager" "%GRASS_WISH%" "%WINGISBASE%
\backslash
etc
\backslash
gm
\backslash
gm.tcl"
\end_layout

\begin_layout LyX-Code

\color red
) else (
\end_layout

\begin_layout LyX-Code

\color red
  start "GRASS 6.3" "%WINGISBASE%
\backslash
etc
\backslash
gm
\backslash
gm.tcl"
\end_layout

\begin_layout LyX-Code

\color red
)
\end_layout

\begin_layout Standard

\color red
At the very end of the 
\emph on
init.bat
\emph default
 file add:
\end_layout

\begin_layout LyX-Code

\color red
set PATH=%SAVEPATH%
\end_layout

\begin_layout LyX-Code

\color red
set SAVEPATH=
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\color red
winterm.bat
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\color red
exit /b
\end_layout

\begin_layout Standard
We will also add a menu entry to 
\emph on
gis.m
\emph default
 to facilitate launching new command line windows.
 Edit the file 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
grass-6.3.cvs
\backslash
etc
\backslash
gm
\backslash
gmmenu.tcl 
\emph default
around line 185 so that it reads this:
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This needs to be made platform-independent!
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
        {separator}
\end_layout

\begin_layout LyX-Code

\size scriptsize
        {command {[G_msg "WinGRASS Shell"]} {} "Start a command line window"
 {} -command { exec winterm.bat & }}
\end_layout

\begin_layout LyX-Code

\size scriptsize
        {separator}
\end_layout

\begin_layout LyX-Code

\size scriptsize
        {command {[G_msg "Georectify"]} {} "Georectify raster map in XY
 location" {} -command { GRMap::startup }}
\end_layout

\begin_layout Standard
From the Windows terminal window, you can start GRASS commands or another
 terminal (cmd.exe) in the background via the Windows 
\emph on
start
\emph default
 command:
\end_layout

\begin_layout LyX-Code
start r.buffer.exe
\end_layout

\begin_layout Standard
Start a new command line window:
\end_layout

\begin_layout LyX-Code
winterm
\end_layout

\begin_layout Standard
You can change terminal windows fonts, colours etc., by right-clicking on
 the Window title.
\end_layout

\begin_layout Standard
Restart the main GUI:
\end_layout

\begin_layout LyX-Code
gis.m
\end_layout

\begin_layout Subsection
Merging with QGIS
\end_layout

\begin_layout Standard
Problems:
\end_layout

\begin_layout Standard
Need to compile a QGIS with the GRASS libs here from scratch, because the
 0.9 binary version from www.qgis.org is not compatible with these!
\end_layout

\begin_layout Section
GRASS 6.3 Add-ons
\end_layout

\begin_layout Standard
This section shows you how to add more modules to GRASS which are not part
 of the official GRASS 6.3 distribution.
 For this to work, you need to have a copy of the GRASS 6.3 sources in your
 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout Subsection
GRASS add-on repository
\end_layout

\begin_layout Subsection
Archaeology extensions
\end_layout

\begin_layout Standard
These are some additional GRASS modules of special interest to archaeologists.
\end_layout

\begin_layout Subsubsection
GSL
\end_layout

\begin_layout Standard

\color red
Should really compile an external version of Gnu Scientific Library and
 link the GeneralStatistics Extension to that!
\end_layout

\begin_layout Subsubsection
Predictive Modelling, Xtent, r.cva, etc.
\begin_inset CommandInset label
LatexCommand label
name "sub:Predictive-Modelling,-Xtent,"

\end_inset


\end_layout

\begin_layout Standard
Make sure that LibXML has been installed (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:libXML"

\end_inset

).
\end_layout

\begin_layout Standard

\color red
TODO
\end_layout

\begin_layout Standard

\color red
BUGS in r.cva: option layer=1 crashes it.
 g.region res=50 crashes it (BECAUSE this results in imperfect cell size???).
 Option input=height@PERMANENT (i.e.
 fully qualified) crashes it.
 It seems to be leaking memory.
\end_layout

\begin_layout Standard

\color red
There is a v.report.bat in GRASS 6.3!
\end_layout

\begin_layout Standard
Download the file 
\emph on
DUCKE.tgz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.quantarch.org
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
 This archive contains a number of additional GRASS modules that we will
 integrate into the GRASS source code tree and Makefile system.
 When you re-compile and re-install GRASS, these modules will automatically
 be part of the new GRASS installation.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
mv DUCKE.tgz grass6/
\end_layout

\begin_layout LyX-Code
cd grass6
\end_layout

\begin_layout LyX-Code
tar -xzf DUCKE.tgz
\end_layout

\begin_layout Standard
This creates a new subfolder DUCKE within the GRASS directory.
 You need to add that folder to the list of targets in GRASS' Makefile.
 Open the 
\emph on
Makefile
\emph default
 in 
\emph on
/src/grass6
\emph default
 with your text editor.
\end_layout

\begin_layout Standard
Find the part that lists the directories to be included and add the directory
 
\emph on
DUCKE
\emph default
, so that the list looks like this:
\end_layout

\begin_layout LyX-Code
SUBDIRS = 
\backslash

\end_layout

\begin_layout LyX-Code
        lib 
\backslash

\end_layout

\begin_layout LyX-Code
        db 
\backslash

\end_layout

\begin_layout LyX-Code
        display 
\backslash

\end_layout

\begin_layout LyX-Code
        doc 
\backslash

\end_layout

\begin_layout LyX-Code
        gem 
\backslash

\end_layout

\begin_layout LyX-Code
        general 
\backslash

\end_layout

\begin_layout LyX-Code
        gui 
\backslash

\end_layout

\begin_layout LyX-Code
        imagery 
\backslash

\end_layout

\begin_layout LyX-Code
        misc 
\backslash

\end_layout

\begin_layout LyX-Code
        ps 
\backslash

\end_layout

\begin_layout LyX-Code
        raster 
\backslash

\end_layout

\begin_layout LyX-Code
        raster3d 
\backslash

\end_layout

\begin_layout LyX-Code
        scripts 
\backslash

\end_layout

\begin_layout LyX-Code
        sites 
\backslash

\end_layout

\begin_layout LyX-Code
        tools 
\backslash

\end_layout

\begin_layout LyX-Code
        vector 
\backslash

\end_layout

\begin_layout LyX-Code
        visualization 
\backslash

\end_layout

\begin_layout LyX-Code
        man 
\backslash

\end_layout

\begin_layout LyX-Code
        macosx 
\backslash

\end_layout

\begin_layout LyX-Code
        DUCKE
\end_layout

\begin_layout Standard
Now recompile and install GRASS:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
This starts the compilation from the top GRASS directory, regenerating the
 HTML manual page index.
 Should you need to only compile sources in DUCKE, this would be much faster:
\end_layout

\begin_layout LyX-Code
cd DUCKE
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
cd ..
\end_layout

\begin_layout Standard
In any case, you now need to be back in the top level directory of the GRASS
 source tree, before you install:
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Subsubsection
Landscape Analysis Tools and LDA
\end_layout

\begin_layout Standard
Michael Barton's homepage!
\end_layout

\begin_layout Subsection
R.param.scale
\end_layout

\begin_layout Standard
Jo Wood's homepage!
\end_layout

\begin_layout Standard
\begin_inset Branch work-in-progress
status collapsed

\begin_layout Section
Paraview 3
\end_layout

\end_inset


\end_layout

\begin_layout Section
Quantum QGIS
\begin_inset CommandInset label
LatexCommand label
name "sec:Quantum-QGIS"

\end_inset


\end_layout

\begin_layout Standard
Complete instructions for compiling Quantum GIS (QGIS) can be found here:
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wiki.qgis.org/qgiswiki/BuildingFromSource
\end_layout

\end_inset

.
 These instructions explain how to compile QGIS from current SVN head sources
 on different platforms.
 Here, we will look into how this works for our specific setup.
 
\end_layout

\begin_layout Subsection
Qt 4.3.4
\begin_inset CommandInset label
LatexCommand label
name "sub:Qt"

\end_inset


\end_layout

\begin_layout Standard
Qt provides the graphical user interface toolkit (GUI) functions for Quantum
 GIS.
 We will use the binary version of Qt.
 This already supports the MinGW compiler.
\end_layout

\begin_layout Standard
Download Qt 4.3.2 open source binaries for Windows from here 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.trolltech.com/developer/downloads/qt/windows
\end_layout

\end_inset

 and save it to any folder.
 Start the installation by launching 
\emph on
qt-win-opensource-4.3.4-mingw.exe
\emph default
.
 
\end_layout

\begin_layout Standard
As Install Location choose 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
Qt
\backslash
4.3.4
\emph default
.
\end_layout

\begin_layout Standard
When asked for the MinGW location, point the installer to the previously
 installed software in 
\emph on
C:
\backslash
MinGW 
\emph default
and
\emph on
 
\emph default
press 
\begin_inset Quotes eld
\end_inset

Install
\begin_inset Quotes erd
\end_inset

.
 Ignore the warning about a wrong version of 
\emph on
w32api.h
\emph default
 (you should have a more current version than the suggested 3.2 against which
 the Qt 4.3.4 binaries were apparently built) and answer 
\begin_inset Quotes eld
\end_inset

Yes
\begin_inset Quotes erd
\end_inset

 to go ahead.
\end_layout

\begin_layout Standard
After the installation finishes, edit 
\emph on
C:
\backslash
msys
\backslash
local
\backslash
Qt
\backslash
4.3.4
\backslash
bin
\backslash
qtvars.bat
\emph default
 and add a %PATH% to the first line thats set the PATH variable so that
 the line reads:
\end_layout

\begin_layout LyX-Code
set PATH=%PATH%;C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
Qt
\backslash
4.3.4
\backslash
bin
\end_layout

\begin_layout Standard
also add another PATH statement line to include more directories in the
 search path:
\end_layout

\begin_layout LyX-Code
set PATH=%PATH%;C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
lib
\end_layout

\begin_layout Standard
Also, you may want to add 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
Qt
\backslash
4.3.4
\backslash
bin
\backslash

\emph default
 to your Environment Variables Path in the Windows system preferences to
 make your life easier when compiling applications with Qt support.
\end_layout

\begin_layout Standard
You may also want to add the lines:
\end_layout

\begin_layout LyX-Code
export PATH="$PATH:/usr/local/Qt/4.3.4/bin"
\end_layout

\begin_layout LyX-Code
export QTDIR=/usr/local/Qt/4.3.4
\end_layout

\begin_layout Standard
to 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
etc
\backslash
profile 
\emph default
to make it more convenient for you to start the software from the MSYS shell
 and compile Qt programs.
\end_layout

\begin_layout Standard
Close any open MSYS shells and restart them before you try to configure
 and compile Qt software, so that the paths will be set up correctly.
\end_layout

\begin_layout Subsection
Python
\end_layout

\begin_layout Standard
Quantum GIS has great Python scripting support.
 Make sure you have it installed at this point (refer to 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Python"

\end_inset

).
\end_layout

\begin_layout Subsubsection
SIP 4.7.4
\begin_inset CommandInset label
LatexCommand label
name "sub:SIP"

\end_inset


\end_layout

\begin_layout Standard
SIP is a tool to create Python bindings.
 You need it for creating Python extensions for Quantum GIS.
\end_layout

\begin_layout Standard
Download 
\emph on
sip-4.7.4.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.riverbankcomputing.com/Downloads/sip4/
\end_layout

\end_inset

 and save it in the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzvf sip-4.7.4.tar.gz
\end_layout

\begin_layout LyX-Code
cd sip-4.7.4
\end_layout

\begin_layout LyX-Code
python configure.py -p win32-g++
\end_layout

\begin_layout Standard
Unfortunately, the generated Makefiles won't work for the MSYS shell (they
 contain Windows style path descriptions that the MinGW C compiler can't
 correctly resolve).
 Open 
\emph on
siplib/Makefile
\emph default
 in a text editor and make sure that the two lines setting the CPPFLAGS
 and LIBS read:
\end_layout

\begin_layout LyX-Code
CPPFLAGS = -DUNICODE -DQT_LARGEFILE_SUPPORT -I.
 -I/usr/local/python/include
\end_layout

\begin_layout LyX-Code
LIBS = -L/usr/local/python/libs -lpython25
\end_layout

\begin_layout Standard
Now, compile the library:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
Now, install the library manually into the local Python installation:
\end_layout

\begin_layout LyX-Code
mkdir /usr/local/python/Lib/site-packages
\end_layout

\begin_layout LyX-Code
cp sipgen/sip.exe /usr/local/python/
\end_layout

\begin_layout LyX-Code
cp siplib/sip.pyd /usr/local/python/Lib/site-packages/
\end_layout

\begin_layout LyX-Code
strip /usr/local/python/Lib/site-packages/sip.pyd
\end_layout

\begin_layout LyX-Code
cp -f siplib/sip.h /usr/local/python/include/
\end_layout

\begin_layout LyX-Code
cp -f sipconfig.py /usr/local/python/Lib/site-packages/  
\end_layout

\begin_layout LyX-Code
cp -f sipdistutils.py /usr/local/python/Lib/site-packages/
\end_layout

\begin_layout Subsubsection
PyQt 4.3.3
\begin_inset CommandInset label
LatexCommand label
name "sub:PyQt"

\end_inset


\end_layout

\begin_layout Standard
PyQt is a set of Python bindings for the Qt GUI toolkit.
 You need it for creating interactive Python extensions for Quantum GIS.
\end_layout

\begin_layout Standard
Download 
\emph on
PyQt-win-gpl-4.3.3.zip
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.riverbankcomputing.com/Downloads/PyQt4/GPL
\end_layout

\end_inset

 and unzip its contents to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout Standard
The installation process for PyQt 
\emph on
has
\emph default
 to be run through 
\emph on
cmd.exe
\emph default
 instead of the MSYS shell (there is an interactive part in 
\emph on
configure.py
\emph default
 which does not work through MSYS, effectively hanging the configure script)!
\end_layout

\begin_layout LyX-Code
cd c:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
PyQt-win-gpl-4.3.3
\end_layout

\begin_layout LyX-Code
c:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
Qt
\backslash
4.3.4
\backslash
bin
\backslash
qtvars.bat
\end_layout

\begin_layout LyX-Code
python configure.py
\end_layout

\begin_layout Standard
Accept the GPL license by answering 
\emph on
yes
\emph default
 and the configure script should run through and generate a bunch of Makefiles.
 
\end_layout

\begin_layout Standard
Now, take a look into designer
\backslash
python.pro to make sure that the path to the Python DLL is configured correctly.
 It should read:
\end_layout

\begin_layout LyX-Code
LIBS        += -L"c:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
python" -lpython25
\end_layout

\begin_layout Standard
Finally, compile and install into the local Python directory:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Subsection
GNU Scientific Library (GSL) 1.10
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Creates a DLL file in .libs that needs to be copied that one to /usr/bin!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a library with functions for scientific data processing and statistics.
 You need GSL to compile the Quantum GIS Georeferencer plugin.
\end_layout

\begin_layout Standard
Download 
\emph on
gsl-1.10.tar.g
\emph default
z from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.gnu.org/software/gsl/
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xzf gsl-1.10.tar.gz
\end_layout

\begin_layout LyX-Code
cd gsl-1.10
\end_layout

\begin_layout LyX-Code
./configure --prefix=/usr --enable-shared --disable-static --bindir=/usr/local/bi
n
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout LyX-Code
install .libs/libgsl-0.dll /usr/bin
\end_layout

\begin_layout Subsection
Expat
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
NOTE: Creates a dll file in .libs that needs to be copied to /usr/bin!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Expat is an XML parser library.
 It is needed for the Quantum GIS GPS points (GPX) import plugin.
 If you have not installed it yet, see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Expat"

\end_inset

 for instructions.
\end_layout

\begin_layout Subsection
CMake 2.4.8
\begin_inset CommandInset label
LatexCommand label
name "sub:CMake"

\end_inset


\end_layout

\begin_layout Standard
CMake is the build system used by Quantum GIS.
 Download the binary distribution for Windows, 
\emph on
cmake-2.4.8-win32-x86.exe,
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.cmake.org
\end_layout

\end_inset

.
 Launch the installer.
 For easier usage, choose to 
\begin_inset Quotes eld
\end_inset

Add CMake to the system PATH for the current user
\begin_inset Quotes erd
\end_inset

.
 Basically, you can install it to wherever you want, but to keep things
 neatly packaged, I recommend you install into 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
cmake
\emph default
.
\end_layout

\begin_layout Standard
You should also add another
\end_layout

\begin_layout LyX-Code
export PATH=$PATH:/usr/local/cmake/bin
\end_layout

\begin_layout Standard
statement to 
\emph on
/etc/profile
\emph default
 if you plan to use CMake from the MSYS shell regularly.
\end_layout

\begin_layout Subsection
QGIS Stable Release (0.10.0)
\begin_inset CommandInset label
LatexCommand label
name "sub:QGIS (stable)"

\end_inset


\end_layout

\begin_layout Standard
In case the CMake binaries are not in your MSYS binaries path yet, add the
 folder where you installed it now:
\end_layout

\begin_layout LyX-Code
export PATH=$PATH:/usr/local/cmake/bin
\end_layout

\begin_layout Standard
The following will describe how to create QGIS binaries based on the latest
 stable release.
 If you want to compile the latest cutting-edge version (SVN head), follow
 the instructions in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:QGIS-SVN"

\end_inset

 instead.
\end_layout

\begin_layout Standard
Download the file 
\emph on
qgis_0.10.0.tar.gz
\emph default
 from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.qgis.org
\end_layout

\end_inset

 and save it to the 
\emph on
source
\emph default
 folder.
\end_layout

\begin_layout Standard
Be sure to have installed GRASS GIS and GDAL (with GRASS support!) as described
 in sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Configuration-and-Installation"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:GDAL/OGR"

\end_inset

, unless you wish to create a version of QGIS without GRASS support (an
 option which will not be covered here).
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
tar -xvf qgis_0.10.0.tar.gz
\end_layout

\begin_layout LyX-Code
cd qgis_0.10.0
\end_layout

\begin_layout LyX-Code
mkdir build
\end_layout

\begin_layout LyX-Code
cd build
\end_layout

\begin_layout Standard
For the source code configuration, you can now use the CMake frontend:
\end_layout

\begin_layout LyX-Code
CMakeSetup ..
\end_layout

\begin_layout Standard
This should present you with the graphical user interface for the CMake
 build configuration.
\end_layout

\begin_layout Standard
Choose 
\begin_inset Quotes eld
\end_inset

Configure
\begin_inset Quotes erd
\end_inset

.
 and 
\begin_inset Quotes eld
\end_inset

Build for: MSYS Makefiles
\begin_inset Quotes erd
\end_inset

, then click on 
\begin_inset Quotes eld
\end_inset

OK
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Depending on where you chose to install all dependencies, there might be
 some errors about CMake not being able to find certain things.
 Just click 
\begin_inset Quotes eld
\end_inset

OK
\begin_inset Quotes erd
\end_inset

.
 You can select the correct paths later.
\end_layout

\begin_layout Standard
Check the result screen.
 You will probably need to specify some paths.
 Then press 
\begin_inset Quotes eld
\end_inset

Configure
\begin_inset Quotes erd
\end_inset

 again and wait for the results again.
 Do this until there are no more items marked in red and you are sure that
 all settings make sense.
 Then press 
\begin_inset Quotes eld
\end_inset

OK
\begin_inset Quotes erd
\end_inset

 to finish the configuration.
\end_layout

\begin_layout Standard
You may have to tick 
\begin_inset Quotes eld
\end_inset

Show Advanced Values
\begin_inset Quotes erd
\end_inset

 in order to see all of the settings (especially for the Python and GRASS
 configuration).
\end_layout

\begin_layout Standard
Important settings (note: in alphabetical order -- will not appear on the
 screen like this!) are these:
\end_layout

\begin_layout LyX-Code
BINDINGS_GLOBAL_INSTALL ON
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
for Python development
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
BISON_EXECUTABLE     C:/msys/1.0/bin/bison.exe
\end_layout

\begin_layout LyX-Code
EXPAT_INCLUDE_DIR    C:/msys/1.0/include
\end_layout

\begin_layout LyX-Code
EXPAT_LIBRARY        C:/msys/1.0/bin/libexpat-1.dll
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
otherwise, final setup stage will complain!
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
FLEX_EXECUTABLE      C:/msys/1.0/bin/flex.exe
\end_layout

\begin_layout LyX-Code
GDAL_INCLUDE_DIR     C:/msys/1.0/include
\end_layout

\begin_layout LyX-Code
GDAL_LIBRARY         C:/msys/1.0/lib/libgdal.dll.a
\end_layout

\begin_layout LyX-Code
GEOS_INCLUDE_DIR     C:/msys/1.0/include
\end_layout

\begin_layout LyX-Code
GEOS_LIBRARY         C:/msys/1.0/lib/libgeos.dll.a
\end_layout

\begin_layout LyX-Code
GRASS_INCLUDE_DIR    C:/msys/1.0/local/grass-6.3.0/include
\end_layout

\begin_layout LyX-Code
GRASS_PREFIX         C:/msys/1.0/local/grass-6.3.0
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
depends on GRASS install!
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
GSLCBLAS_LIB         C:/msys/1.0/lib/libgslcblas.dll.a
\end_layout

\begin_layout LyX-Code
GSL_INCLUDE_DIR      C:/msys/1.0/include
\end_layout

\begin_layout LyX-Code
GSLCBLAS_LIB         C:/msys/1.0/lib/libgsl.dll.a
\end_layout

\begin_layout LyX-Code
POSTGRES_INCLUDE_DIR C:/msys/1.0/include
\end_layout

\begin_layout LyX-Code
POSTGRES_LIBRARY     C:/msys/1.0/lib/libpq.dll
\end_layout

\begin_layout LyX-Code
POSTGRESQL_PREFIX    C:/msys/1.0/usr
\end_layout

\begin_layout LyX-Code
PROJ_INCLUDE_DIR     C:/msys/1.0/include
\end_layout

\begin_layout LyX-Code
PROJ_LIBRARY         C:/msys/1.0/lib/libproj.dll
\end_layout

\begin_layout LyX-Code
PYTHON_INCLUDE_PATH  C:/msys/1.0/local/python/include
\end_layout

\begin_layout LyX-Code
PYTHON_LIBRARY       C:/msys/1.0/local/python/python25.dll
\end_layout

\begin_layout LyX-Code
SQLITE3_INCLUDE_DIR  C:/msys/1.0/include
\end_layout

\begin_layout LyX-Code
SQLITE3_LIBRARY      C:/msys/1.0/lib/sqlite3.dll
\end_layout

\begin_layout LyX-Code
WITH_BINDINGS        ON
\end_layout

\begin_layout LyX-Code
WITH_GRASS           ON
\end_layout

\begin_layout Standard
I advise you to also change the installation path to a path without whitespace
 to avoid trouble with GRASS scripts later on.
 For these instructions, we assume 
\emph on
C:
\backslash
qgis0.10.0
\emph default
 as installation path:
\end_layout

\begin_layout LyX-Code
CMAKE_INSTALL_PREFIX C:/qgis0.10.0
\end_layout

\begin_layout Standard
Press 
\begin_inset Quotes eld
\end_inset

OK
\begin_inset Quotes erd
\end_inset

 once you are sure that everything has been configured correctly.
 This should generate the final configuration and exit the graphical interface.
 Now, compile and install QGIS:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
After installation, as a minium setup, you need to copy all necessary DLL
 files into the installation Path:
\end_layout

\begin_layout LyX-Code
cp /usr/local/bin/*.dll /c/qgis0.10.0/
\end_layout

\begin_layout LyX-Code
cp /usr/local/grass-6.3.cvs/lib/*.dll /c/qgis0.10.0/
\end_layout

\begin_layout LyX-Code
cp /usr/local/bin/libz.dl* /c/qgis0.10.0/
\end_layout

\begin_layout Standard
You should now be able to launch QGIS:
\end_layout

\begin_layout LyX-Code
/c/qgis0.10.0/qgis.exe &
\end_layout

\begin_layout Subsubsection
Building with cmd.exe
\end_layout

\begin_layout Standard
As an alternative, you can also use 
\emph on
CMakeSetup.exe
\emph default
 from Windows' own 
\emph on
cmd.exe
\emph default
 if you prefer to do the compilation without MSYS.
 This will, however only work on Windows XP (and probably also Vista, but
 this is untested), 
\emph on
not
\emph default
 Windows 2000 (you will get an error message about command lines being too
 long at some point).
\end_layout

\begin_layout Standard
Make sure all the tools you need (CMake, SVN, Qt, Python) are in the System
 PATH, so they can be easily run from 
\emph on
cmd.exe
\emph default
.
 Start a 
\emph on
cmd.exe
\emph default
 window.
 Create a development directory and move into it:
\end_layout

\begin_layout LyX-Code
c:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
Qt
\backslash
4.3.4
\backslash
bin
\backslash
qtvars.bat
\end_layout

\begin_layout LyX-Code
cd c:
\backslash
msys
\backslash
1.0
\backslash
src
\backslash
qgis-0.10.0
\end_layout

\begin_layout LyX-Code
md build
\end_layout

\begin_layout LyX-Code
cd build
\end_layout

\begin_layout LyX-Code
CMakeSetup ..
\end_layout

\begin_layout Standard
Choose to 
\begin_inset Quotes eld
\end_inset

Build for: MinGW Makefiles
\begin_inset Quotes erd
\end_inset

 and continue as described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:QGIS-SVN"

\end_inset

.
\end_layout

\begin_layout Subsection
Making a release
\end_layout

\begin_layout Standard
Note: this is a very rough draft.
\end_layout

\begin_layout Standard
Install QGIS into a path without spaces.
\end_layout

\begin_layout Standard
Create a folder 
\begin_inset Quotes eld
\end_inset

msys
\begin_inset Quotes erd
\end_inset

 inside the QGIS install folder.
 Copy 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
bin
\emph default
 directly into there.
\end_layout

\begin_layout Standard
Copy 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
lib
\backslash
libpq.dll
\emph default
 into 
\emph on
bin
\emph default
, as well.
\end_layout

\begin_layout Standard
Copy 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash

\backslash
lib
\backslash
libz.*
\emph default
 into 
\emph on
bin
\emph default
, as well.
\end_layout

\begin_layout Standard
Copy 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
lib
\backslash
libz.*
\emph default
 into 
\emph on
bin
\emph default
, as well.
\end_layout

\begin_layout Standard
Copy 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
bin
\backslash
libmysql.dll
\emph default
 into 
\emph on
bin
\emph default
, as well.
\end_layout

\begin_layout Standard
Copy 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
etc 
\emph default
into 
\emph on
bin
\emph default
 as well
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Don't actually need the whole thing, only /etc/profile and could adapt that,
 as well!
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Copy 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
Qt
\backslash
4.3.4
\backslash
bin
\backslash
*.dll
\emph default
 into 
\emph on
bin
\emph default
 as well.
\begin_inset Note Note
status open

\begin_layout Plain Layout
probably do not need all of these!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Copy 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
python
\backslash
python25.dll
\emph default
 into 
\emph on
bin
\emph default
 as well.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
will complain about missing SIP support on startup
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Copy all the contents of 
\emph on
C:
\backslash
msys
\backslash
1.0
\backslash
local
\backslash
grass-6.3.0
\emph default
 into the folder 
\emph on
grass
\emph default
 in the QGIS install directory.
\end_layout

\begin_layout Standard
Create a launcher script qgis.bat inside the QGIS install folder with the
 following content:
\end_layout

\begin_layout LyX-Code
Rem This is used to launch QGIS and set a few exec paths so we can keep
 
\end_layout

\begin_layout LyX-Code
Rem the file structure neat.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
set PATH=%PATH%;%CD%
\backslash
msys
\backslash
bin 
\end_layout

\begin_layout LyX-Code
set PATH=%PATH%;%CD%
\backslash
grass
\backslash
lib 
\end_layout

\begin_layout LyX-Code
set GRASS_PAGER="less"
\end_layout

\begin_layout LyX-Code
set GRASS_MESSAGE_FORMAT="gui"
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Rem Launch QGIS 
\end_layout

\begin_layout LyX-Code
start qgis.exe /B
\end_layout

\begin_layout Standard
Note: the variable GRASS_PAGER needs to get exported for some reason! GRASS_MESS
AGE_FORMAT is set, so that we get some kind of working status display in
 the shell, even if it is not pretty.
\end_layout

\begin_layout Subsection
Building QGIS from SVN head
\begin_inset CommandInset label
LatexCommand label
name "sub:QGIS-SVN"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
PROBLEM:
\end_layout

\begin_layout Plain Layout
CMakeFiles/qgis_core.dir/qgsgeometry.obj:qgsgeometry.cpp:(.text+0xbf5): undefined
 reference to `geos::io::WKTReader::WKTReader(geos::geom::GeometryFactory
 const*)' 
\end_layout

\begin_layout Plain Layout
\SpecialChar \ldots{}
 and plenty more of those.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will create a binary based on the latest, daily sources of QGIS in
 the SVN head branch.
 Note: there is no guarantee that these sources will compile on any given
 day due to the development in progress.
\end_layout

\begin_layout Standard
In case the CMake binaries are not in your MSYS binaries path yet, add the
 folder where you installed it now:
\end_layout

\begin_layout LyX-Code
export PATH=$PATH:/usr/local/cmake/bin
\end_layout

\begin_layout Standard
Create a new directory and check out the current sources from SVN head:
\end_layout

\begin_layout LyX-Code
cd /src
\end_layout

\begin_layout LyX-Code
mkdir qgis-head
\end_layout

\begin_layout LyX-Code
cd qgis-head
\end_layout

\begin_layout LyX-Code
svn co https://svn.qgis.org/repos/qgis/trunk/qgis
\end_layout

\begin_layout Standard
Note: you may have to tell the SVN client to accept the QGIS SVN fingerprint.
\end_layout

\begin_layout Standard
Once the SVN client has finished downloading all the source files, you need
 to configure them:
\end_layout

\begin_layout LyX-Code
cd qgis
\end_layout

\begin_layout LyX-Code
mkdir build
\end_layout

\begin_layout LyX-Code
cd build
\end_layout

\begin_layout LyX-Code
CMakeSetup ..
\end_layout

\begin_layout Standard
This should present you with the graphical user interface for the CMake
 build configuration.
 Now continue as described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:QGIS-SVN"

\end_inset

.
\end_layout

\begin_layout Section
Clean-up Notes
\end_layout

\begin_layout Standard
To prevent annoyances when compiling GRASS, copy the following DLLs from
 c:
\backslash
msys
\backslash
lib to c:
\backslash
msys
\backslash
bin: libgdal.dll libpng.dll libproj.dll libz.dll.1.2.3 libz.dll.1.2.3.dll
\end_layout

\begin_layout Subsection
Minimum stuff
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Look into QGIS' bundled MSYS dir and the GRASS dev mailing list to complete
 this stuff.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To get a working shell:
\end_layout

\begin_layout LyX-Code
etc/profile
\begin_inset Note Note
status open

\begin_layout Plain Layout
Need to edit this for R and Python!?
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
bin/sh.exe
\end_layout

\begin_layout LyX-Code
bin/cat.exe
\end_layout

\begin_layout LyX-Code
bin/chmod.exe
\end_layout

\begin_layout LyX-Code
bin/cp.exe
\end_layout

\begin_layout LyX-Code
bin/date.exe
\end_layout

\begin_layout LyX-Code
bin/dirname.exe
\end_layout

\begin_layout LyX-Code
bin/env.exe
\end_layout

\begin_layout LyX-Code
bin/envsubst.exe
\end_layout

\begin_layout LyX-Code
bin/expr.exe
\end_layout

\begin_layout LyX-Code
bin/false.exe
\end_layout

\begin_layout LyX-Code
bin/gawk.exe
\end_layout

\begin_layout LyX-Code
bin/grep.exe
\end_layout

\begin_layout LyX-Code
bin/head.exe
\end_layout

\begin_layout LyX-Code
bin/less.exe
\end_layout

\begin_layout LyX-Code
bin/ln.exe
\end_layout

\begin_layout LyX-Code
bin/ls.exe
\end_layout

\begin_layout LyX-Code
bin/mkdir.exe
\end_layout

\begin_layout LyX-Code
bin/mv.exe
\end_layout

\begin_layout LyX-Code
bin/ps.exe
\end_layout

\begin_layout LyX-Code
bin/rm.exe
\end_layout

\begin_layout LyX-Code
bin/rmdir.exe
\end_layout

\begin_layout LyX-Code
bin/sed.exe
\end_layout

\begin_layout LyX-Code
bin/sleep.exe
\end_layout

\begin_layout LyX-Code
bin/sort.exe
\end_layout

\begin_layout LyX-Code
bin/tee.exe
\end_layout

\begin_layout LyX-Code
bin/touch.exe
\end_layout

\begin_layout LyX-Code
bin/true.exe
\end_layout

\begin_layout LyX-Code
bin/uname.exe
\end_layout

\begin_layout LyX-Code
bin/uniq.exe
\end_layout

\begin_layout Standard
Some tools:
\end_layout

\begin_layout LyX-Code
bin/find.exe
\end_layout

\begin_layout LyX-Code
bin/gunzip.exe
\end_layout

\begin_layout LyX-Code
bin/gzip.exe
\end_layout

\begin_layout LyX-Code
bin/split.exe
\end_layout

\begin_layout LyX-Code
bin/tar.exe
\end_layout

\begin_layout Standard
GRASS stuff:
\end_layout

\begin_layout LyX-Code
bin/perl.exe
\end_layout

\begin_layout LyX-Code
lib/perl5
\end_layout

\begin_layout LyX-Code
lib/gdal_plugins
\end_layout

\begin_layout LyX-Code
lib/postgresql
\end_layout

\begin_layout LyX-Code
share/proj
\end_layout

\begin_layout LyX-Code
share/gdal
\begin_inset Note Note
status open

\begin_layout Plain Layout
???
\end_layout

\end_inset


\end_layout

\begin_layout Section
Using GRASS Modules with QGIS
\end_layout

\begin_layout Standard
The easiest way to use GRASS GIS on the Windows desktop is via the QGIS
 software.
 QGIS is a user-friendly desktop GIS.
 It comes with a plug-in by Radim Blazek that allows you to use GRASS modules
 seamlessly from the QGIS GUI.
\end_layout

\begin_layout Standard
This software distribution includes version 0.8 of QGIS, which you can also
 download from www.qgis.org.
 I recommend you install the software to c:
\backslash
qgis or some similar path.
 Expect trouble with the GRASS plugin if the installation path you chose
 contains spaces or special characters!
\end_layout

\begin_layout Standard
After installation, you have a complete GIS working environment, consisting
 of QGIS, GRASS and MSYS in the directory that you chose for installation.
\end_layout

\begin_layout Standard
[some pointer to more extensive documentation for QGIS and GRASS]
\end_layout

\end_body
\end_document
