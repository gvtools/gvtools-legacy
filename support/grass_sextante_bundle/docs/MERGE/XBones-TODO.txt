Current limitations
===================

+ numeric labels and point IDs only
	- conversion of alphanumeric labels/IDs will have
	  unwanted results.


Features for the next version
=============================

+ add a 3D stick figures mode: heads = spheres, bones = cylinders
+ some way to produce joints (as spheres? only some modes?)
	- setup joining points for individual bones
	- use a special code in the CSV file to join a bone
	  to a joining point of the next higher bone type
	- could also explicitly code disarticulated bones and e.g.
	  use a separatte lines layer to visualize the connections


+ filtering of Crossbones point and output of a CSV file that
  has all but those points
+ alphanumeric bone labels and check for valid label names
	- case-sensitive?
	- only if a flag is given, otherwise throw an error
	  if a skeleton ID contains non-numeric characters




VisIt vs. ParaView vs. MayVi
============================

VisIt:
+ easy labelling, dynamic, clutter free
+ reads Shapefiles and handles text attributes
+ lots of stereo modes readily available
+ easy generation of discrete color scales with N colors
+ high quality image output (also stereo)
- difficult user interface with strange defaults
- very complex software
- does not accept point Shapefiles generated by v.out.ogr
- GUI "smears" on Linux
- color scales can be exported but not imported (???)
- no simple single-color mode for geometries (???)
- user guide costs money (???)
- big (300 MB installed)

ParaView:
+ easy-to-use
+ clean, modern GUI
+ import and export of color scales via XML files
+ very flexible volume visualization
- stereo rendering only via command line switch
- stereo rendering not working on Windows
- labelling is difficult, only via selections, no dynamic uncluttering
- hard to generate discrete, random color scales
- user guide costs money
- sort of big (150 MB installed)

MayaVI
+ small! (36 MB installed)
+ user guide available as HTML
-


Useful sample data is in "data".
Crossbones Java code is in "xbones-code".
Other Crossbones related stuff is in "Crossbones".
Updated GRASS modules are in "GRASS".
The VisIt software is in "visit" (Linux binaries).


Stereo Viewing Notee -- Anaglyphs
=================================

en.wikipedia.org/wiki/Anaglyph_image
http://nzphoto.tripod.com/sterea
cjoke.com/3D-Bilder/3D-Bilder.asp

Essence:

red/green is monochrome, ghosting on CRT screens
red/blue is also monochrome but reduces ghosting
cyan/red preserves colour best but is patented; 
red/cyan used to circumvent patent.

Create mono red/green images:

1. greyscale left image and copy to red channel
2. greyscale right image and copy to green channel
3. black blue channel

Create mono red/blue images:

1. greyscale left image and copy to red channel
2. greyscale right image and copy to blue channel
3. black green channel

It can be hard to get the stereo base right (angular difference in position between
left and right images). VisIt can export left/right images with good base (see below).

--> See VisIt notes for colour red/cyan anaglyph production
(NOTE: this is taken from grass.osgeo.org/wiki/Stereo_anaglyphs, where it is presumed
to be red/green, which it is not!)

--> There is also a Compiz Anaglyph Plug-in around!
http://wodor.org

--> VTK has a red/cyan stereo mode defined in vtkRenderWindow.h:

VTK_STEREO_ANAGLYPH  7

However, this does not seem to be the default for Paraview and does not even
show up in VisIt's options.



VisIt
=====
Homepage is https://wci.llnl.gov/codes/visit/home.html

Download the version that's NOT compiled against the Intel proprietary runtime libs.

If, on startup, the splash screen hangs at 32% ("Starting metadata server"): this has something to do with VisIt trying to connect to servers. Open the XML config file ~/.visit/config. 

Edit it and remove the Host Profile List object:

            <Object name="HostProfileList">
		...
                <Field name="activeProfile" type="int">0</Field>
            </Object>

Startup should work OK now. However, the program will crash when selecting "Options->Host profiles"!
In any case, VisIt can skip reading the configuration on startup:

./visit -noconfig

Exporting images in high quality: Use "File -> Set Save Options". Use PNG format for good
compression ratio.

Exporting Stereo images: Use "File -> Set Save Options" and enable "Stereo".
VisIt will export a left and a right image. Convert them to ppm.

  convert visit0001.png visit0001.ppm
  convert visit0002.png visit0002.ppm

Now extract RGB channels from left and right image:

  ppmtorgb3 visit0001.ppm
  ppmtorgb3 visit0002.ppm
  
... and recombine to create anaglyph image:

  rgb3toppm visit0001.red visit0002.grn visit0002.blu > anaglyph.ppm
  
Finally, convert back to PNG:

  convert anaglyph.ppm anaglyph.png
  
This works with red/green glasses but works better with red/cyan!


ParaView
========

ParaView does not support stereo rendering in Windows!

USE DISCRETE COLOUR SCALES PROVIDED FOR PROXIMITY ANALYSIS

Proximity analysis: It is possible that the "from" and "to" datasets have different ranges.
The only possibility is for the "from" objects (artefacts) to have a smaller range than the "to" objects
(e.g. Pyramids). Thus, we need to avoid scaling colours to the data range of "from". And we really need to use discrete colours!

Activate the "to" (e.g. pyramids) layer.

1. On the "Display" tab: "Edit Color Map...". The "Color Scale Editor" comes up.
Click "Choose Preset" to select one of the provided discrete, random schemes (use "Import" if it is not available
yet and import the XML file with the scheme: random-256.xml, ...).
Deactivate (!) the "Automatically Rescale..." option.
Activate (!) the "Use discrete Colors" option.
Click "Rescale to Data Range" ONCE. It will update the "Minimum and Maximum" data values.
For Resolution, choose the maximum number of colours in the scale (in this case: 256).

[NOTE]: These settings are per color scale, NOT per object (layer)! So leave them alone now, they will be applied
to all object that use this scale in exactly the same way!

The colours shown will now tell you which artefact belongs to which skeleton. The results can look counter-intuitive,
but that's because it is easy to be visually misguided by a 2D representation of 3D space.


DISPLAY SKELETON/ARTEFACT IDs

ParaView will only display scalar values for selected objects.
It will not display text attributes.

From the main menu, activate "View Selection Inspector"
In the "Selection Inspector" menu:
1. First you need to select at least one object to be labelled (otherwise all options in the "Selection Inspector" remain greyed out). 
Use the "Select Cells On" tool (either via the "Edit" menu on the main
toolbar or the same on the icon bar). Alternatively, just press "s" to get into selection mode.
Make a selection by clicking on a skeleton in the 3D view. NOTE: the selection tool will be automatically deactivated
after one selection). If you want to select multiple objects: hold down STRG, then click to add to the selection.
Under "Active selection", you can also manually add/remove objects from the selection list (NOTE: the numbers here always refer
to ParaView's internal object IDs).
You can also use the "Select Cells Through" tool to drag a rectangle in the 3D view and select everything inside.
2. Under "Active Selection": make sure that "Selected:" shows the object you wish to label (otherwise acitvate that object
in the "Pipeline Browser". "Selection Type:" is set to "IDs". "Field Type" is set to "CELL".
3. Under "Display Style": On the tab "Selection" you may want to prefer a different colour and/or decrease both line width
and opacity to make the highlighting a bit more subtle.
On the tab "Cell Label": Select "Visible". Set "Label Mode" to the variable you are interested in. You may want to adjust the
"Style" settings, as well to make the labels more clear.
4. Modify your selection as needed.


USING THRESHOLDS TO EXTRACT SKELETONS

It's easier if there are no large gaps in the ID numbering scheme!

EXTRACT SUBSETS
??? The "extract subset" tool is grayed out. Why?

HINTS

You can drag and drop the Pipeline Inspector, Object Browser etc. to anywhere you like, also outside the main program window!

DXF
===
An absolute crap format.
Documented here: http://usa.autodesk.com/adsk/servlet/item?siteID=123112&id=12272454&linkID=10809853
A very good Wikipedia entry: http://en.wikipedia.org/wiki/AutoCAD_DXF


Crossbones
==========
The file "build.xml" is the Makefile. Use "ant" to compile, "java -jar" to run the executable.
It abuses the following DXF tags to store information:

"layer" = Skeleton ID
"handle" = Bone class ID
"label" = an auto-incremented ID that gets counted up by "1" for each new assemblage
"colour" = this always gets set to "256"

Added a "Points" type output to export the original surveying points.

GRASS
=====
Just use an XY location to import the Crossbones DXF files.
Some changes needed to be made to v.in.dxf to support all the information that Crossbones puts in there.

Importing is always the same (all objects into one layer and integer type labels):

  v.in.dxf lines.dxf -1 --o output=lines -n
  ...

Dump the database to see if all attributes were read correctly:

  db.select lines
  ...

Exporting to Shapefiles depends on geometry type:

  v.out.ogr input=points type=point dsn=. lco="SHPT=POINTZ"
  v.out.ogr input=lines type=line dsn=. lco="SHPT=ARCZ"
  v.out.ogr input=darts type=face dsn=. lco="SHPT=POLYGONZ"
  v.out.ogr input=planes_v type=face dsn=. lco="SHPT=POLYGONZ"
  v.out.ogr input=planes_h type=face dsn=. lco="SHPT=POLYGONZ"
  v.out.ogr input=pyramids type=face dsn=. lco="SHPT=POLYGONZ"

Triangulate the pit 3D TIN:

  v.in.ogr dsn=. output=pitpts layer=3D_edited_pit_121006 -z
  v.delaunay input=pitpts output=pit
  v.out.ogr input=pit type=area dsn=. lco="SHPT=POLYGONZ"

Proximity analysis:

Use the "Points" type output in Crossbones. This will dump the original measurement points to a DXF file.
Import the small finds:

  v.in.ogr dsn=. output=small_finds layer=3D_Small_find_SK_points_121006 -z

[NOTE: the small finds, in combination with pit TIN are actually a very impressive exampe of why 3D viewing
 helps to see patterns better!]

Add a column that allows to store the ID of the closest skeleton ensemble and bone type:

   v.db.addcol map=small_finds col="unit_id INT"
   v.db.addcol map=small_finds col="bone_id INT"

Now run v.distance (this can only take point maps as "from" map):

  v.distance from=small_finds to=points upload=to_attr to_column=unit_id column=unit_id
  v.distance from=small_finds to=points upload=to_attr to_column=bone_id column=bone_id

This will calculate the distances from all small finds to all bones (in this case the points representation, but could be any other), and store the ensemble ID of the closest bone in the column "label" of the small finds.
[NOTE: while the "from" map needs to be points or centroids, the "to" map can also be lines, boundaries and areas; kernels and faces are not supported 
(even though this calculates actual 3D distances! So e.g. the "pyramids" representation will not work. Best use lines!) ]

Now export to a Shapefile:

  v.out.ogr input=small_finds type=point dsn=. lco="SHPT=POINTZ"

[NOTE: unfortunately, VisIt does not accept 3D point Shapefiles exported by v.out.ogr, but we can export directly as VTK format:]

  v.out.vtk input=small_finds output=small_finds.vtk type=point -n

[NOTE: export of scalar values (attributes): there must be a value for each entity. NULL values (missing data) are not handled by
the VTK ASCII file format. Either make sure all attributes are complete or drop all unneccesary fields from the attribute table using
v.db.dropcol before exporting. If you have incomplete scalars, you will get an error message from ParaView and it will not read
the following scalars correctly.]

This can now be visualized in VisIt along with the bones. If the same colour scale is chosen for both, it will be easy to see at a glance, which small finds are closest to which bones. The result is correct in 3D space. From a 2D perspective, this would be hard or even impossible to figure out (remember that the monitor image is always just a 2D slice through 3D data space. It takes a lot of zooming, rotating and moving around to create a 2D slice that is informative).

v.in.dxf
========
Added support for parsing the 'handle' field, which allows us to store some useful numeric data in the DXF file.

The patch is against trunk in SVN:

  diff -urB old new > v.in.dxf.patch



------------------------------

Visualization Notes for VisIt

------------------------------

Pseudocolour plots do not allow for choice of line width.

Mesh plots let you set line width, but only one colour.

Solution: Use Pseudocolour plot for heads (pyramids) only and Mesh plot for all bones.
This results in a very "readable" output. Make sure to apply threshold only for the 
pyramids VTK objects (deselect "Apply [ ] operators ... to all plots) option at bottom
of main control panel!

User can still plot individual skeletons in individual colours using Mesh plots with
threshold filters for only specific Unit or Skeleton IDs.


Colour schemes
--------------

Colour schemes are managed globally, not via the individual plot settings.
To define a new scheme are alter an existing one, choose:

"Controls->Color table".

There are two types of colour schemes:
(a) "Continuous": for measured data (elevation, weight, width,...); this will "stretch"
a colour ramp over the value range of the variable, interpolating colour values in-between.
The result will be that similar values share similar colours.
(b) "Discrete": for integer data (counts, categories, IDs); this allows the user to pick
an individual colour for every distinct value of the variable. If the number of picked
colours is smaller than the number of distinct values, then the colour schemes will be repeated
as often as necessary.

If you wish to create a new scheme from scratch, then FIRST enter a new name into the
field "Name" (located under the "Export" button) and click on "New".

Choose whether it should be continuots or discrete. You can then adjust the colours
by using the functions in the "Editor" area. 

For continuous colour schemes: set the
number of colours to a a low value at first (e.g. "10"). That will make it easier
to understand how the editing works: each colour is actually a "breakpoint" in a
continuous palette range, which you can individually shift and set to a different
colour. An "infinite" number of intermediate colours will automatically be calculated
between each pair of neighbouring breakpoints, providing a smooth gradient.

For discrete colour schemes:
Simply set the number of colours you need and adjust the RGB values of each entry
individually if you like.

Click on "Apply" and your colour scheme will be available in all plots. You can
then "Dismiss" the "Color tables" window.


Plotting objects
----------------

For single colour plots: use a Mesh plot. For multicolour, use a Pseudocolour plot.
Double-click the entry in the list of "Active plots" to get to the plot attributes.
The following refers to the plot attributes settings unless stated otherwise.

Mesh plot
---------
This will plot only the shapes (meshes) of objects. To control the colours of outlines
and "faces" (polygon areas), deselect the "Use foreground" and "Use background" options
and make your own colour choices. For visualizing points, select a "Point Type". You may
have to increase the "Point size" as well to make symbols such as spheres look good.

Pseudocolor plot
----------------
This plots shapes and colours them according to the value of a variable (=attribute) attached
to each object. 

For Crossbones output, the most convenient variable to use is "unit_id", as
it starts at "1" for the first skeleton and gets incremented by "1" for each following skeleton,
providing a smooth value range for colour schemes. This is a discrete (integer) type variable.
The default for VisIt will be to try and stretch a red-green-blue colour ramp over it, which
will not be desirable. So create a discrete colour scheme with a decent number of distinguishable
colours (30-40 should do); as described above. Then assign that colour scheme using the
"Color table" selector button.










