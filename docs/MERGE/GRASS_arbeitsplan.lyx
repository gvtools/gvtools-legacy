#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass scrbook
\language ngerman
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

Allgemeine Benutzerfreundlichkeit
\layout Standard

Es sollten weitere Umgebungsvariablen eingeführt werden, mit denen sich
 steuern lässt, ob GRASS eher naive oder erfahrene Benutzer voraussetzt:
\layout Enumerate

Beim Importieren von Daten
\begin_deeper 
\layout Enumerate

neue Karten zum GIS-Manager hinzufügen
\layout Enumerate

Region auf die neue Karte setzen
\layout Enumerate

Karte anzeigen
\end_deeper 
\layout Enumerate

Beim Anzeigen von Karten
\begin_deeper 
\layout Enumerate

Monitor automatisch starten
\end_deeper 
\layout Standard

Bereits im Eingangsdialog könnte man Benutzer in verschiedene Kategorien
 trennen und eine entsprechende Belegung der Umgebungsvariablen durchführen.
\layout Standard

Bei der Einstellung der Default-Region eine Anzeige einblenden, die den
 Benutzer darüber aufklärt, dass es nicht schlimm ist, die Abmessungen z.B.
 auf 1000 x 1000 zu stellen, weil sich später alles ändern lässt (evtl.
 eine einfache Voreinstellung mit 1000x1000x25 wählen).
\layout Standard

How about a wizard in the main menu which takes a file and renders it, creating
 a new project with the display range drawn from the file itself? With a
 project loaded, the same wizard menu item could allow you to import a new
 file to the same project, and provide you with the option to either, keep
 the region the same, or set the region according to the limits of the new
 file.
\layout Standard

(Könnte sowohl im Startdialog als auch im GIS-Manager erscheinen).
\layout Chapter

GRASS-GUI
\layout Standard

Die 
\begin_inset Quotes eld
\end_inset 

Tile
\begin_inset Quotes erd
\end_inset 

-Erweiterung für Tk kann benutzt werden, um die Optik zu verbessern.
 Ab Tcl/Tk 8.5 soll Tile im Standard-Toolkit enthalten sein.
 Man kann aber auch mit der alten Engine optisch wesentlich bessere GUIs
 machen, als momentan der Fall (s.
 z.B.
 TkDVD: http://savannah.nongnu.org/projects/tkdvd/).
\layout Standard

Ziel sollte es sein, einen GIS-Manager zu haben, der sich weitgehend beim
 Start die Menüeinträge zusammensucht, je nachdem welche Module im System
 installiert sind.
\layout Standard

KLEINERE SCHRIFTGROESSE.
 BESSERE BUTTONS.
\layout Standard

WENN EIN MODUL FERTIG IST, SOLLTE DIES DEUTLICH SICHTBAR SEIN.
\layout Section

Runtime-GUIs
\begin_inset LatexCommand \label{sec:Runtime-GUIs}

\end_inset 


\layout Standard

Es ist nicht immer gut zu erkennen, ob ein Modul seine Arbeit beendet hat.
 Es sollte jedesmal eine Meldung erscheinen wie 
\begin_inset Quotes eld
\end_inset 

MODUL HAS EXITED
\begin_inset Quotes erd
\end_inset 

.
 Noch hübscher wäre, wenn die Eingabefelder alle ausgegraut werden, solange
 gearbeitet wird.
\layout Standard

Obwohl der Vorgabewert für die Type-Option 
\begin_inset Quotes eld
\end_inset 

all
\begin_inset Quotes erd
\end_inset 

 ist, sind die einzelnen Typen standardmäßig alle nicht selektiert.
\layout Standard

Die Modul-Beschreibungen und Titel müssen vereinheitlicht werden: 3.
 Person Singular, kein Punkt am Ende.
\layout Standard

Wie genau funktioniert die Variable 
\emph on 
GRASS_MESSAGE_FORMAT=gui
\emph default 
 ?
\layout Quotation

g.manual variables GRASS_MESSAGE_FORMAT should NOT be set in init script,
 it should only be set if a module is run from GUI, which is capable to
 handle GUI output format, i.e.
 currently ONLY the autogenerated GUI.
 
\layout Standard

Neue Options-Typen für Datei- und Kartennamen, so dass RTG-Formulare einen
 Dateibrowser/Kartenbrowser anzeigen können.
 Der Kartenbrowser sollte die GRASS-Datenbankhierarchie voll unterstützen.
\layout Standard

ZUM TEIL SCHON IMPLEMENTIERT: SIEHE d.vect und r.patch (multiple) !!!
\layout Standard

GRASS 5.7 KENNT STANDARDOPTIONEN, z.B: 
\layout LyX-Code

vectin = G_define_standard_option(G_OPT_V_INPUT);
\layout Standard

Mehrfachselektionen sind durch option->multiple=
\begin_inset Quotes erd
\end_inset 

YES
\begin_inset Quotes erd
\end_inset 

 gekennzeichnet.
\layout Standard

Was macht option->gisprompt? VERM.
 TEXT FUER ALTEN INTERAKTIVEN MODUS IN TEXTKONSOLE.
\layout Standard

Hierauf müsste man aufbauen!
\layout Standard

Alternative: eine ASCII-Datei pro Modul, welche die Parameter beschreibt.
 Aus diesen Beschreibungen können die GUI-Formulare generiert werden.
 Es muss so nicht der Quelltext aller Module geändert werden und Verbesserungen
 der GUI-Kapazitäten können einfach implementiert werden.
\layout LyX-Code

NAME        TYPE        FORMAT                TOOLTIP        
\layout LyX-Code

map         input!*     raster        
\layout LyX-Code

outmap      output!     vector        
\layout LyX-Code

parm1       option      number        
\layout LyX-Code

parm2       option      string        
\layout LyX-Code

parm3       flag?        -             
\layout LyX-Code

logfile     output      ascii         
\layout LyX-Code

method      parm        choice:one,two,...
\layout Standard

Nicht jeder Parameter muss beschrieben werden, nur die, für welche das GUI
 besondere Vorkehrungen treffen soll, z.B.
 Dateiauswahldialoge anzeigen.
\layout Standard

Parameter können vom Typ 
\begin_inset Quotes eld
\end_inset 

input
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

output
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

option
\begin_inset Quotes erd
\end_inset 

 oder 
\begin_inset Quotes eld
\end_inset 

flag
\begin_inset Quotes erd
\end_inset 

 sein.
 Wenn ein 
\begin_inset Quotes eld
\end_inset 

!
\begin_inset Quotes erd
\end_inset 

 hinter dem Namen steht, ist die entsprechende Option erforderlich, 
\begin_inset Quotes eld
\end_inset 

*
\begin_inset Quotes erd
\end_inset 

 bedeutet Mehrfachselektion, 
\begin_inset Quotes eld
\end_inset 

?
\begin_inset Quotes erd
\end_inset 

 eine Option, die keinen Einfluss auf das Rechenergebnis hat (im wesentlichen
 Formatierung der Bildschirmausgabe).
 Reihenfolge egal.
\layout Standard

Parameter vom Typ 
\begin_inset Quotes eld
\end_inset 

input
\begin_inset Quotes erd
\end_inset 

 und 
\begin_inset Quotes eld
\end_inset 

output
\begin_inset Quotes erd
\end_inset 

 lassen sich im Rahmen eines Flussdiagramm-GUIs nutzen.
 Sie sollten im GUI besonders hervorgehoben und zusammen gruppiert werden.
\layout Standard

Vielleicht könnte man die RT-Formulare auch mit Karteireitern organisieren:
\layout Enumerate


\begin_inset Quotes eld
\end_inset 

required
\begin_inset Quotes erd
\end_inset 


\layout Enumerate


\begin_inset Quotes eld
\end_inset 

options
\begin_inset Quotes erd
\end_inset 


\layout Enumerate


\begin_inset Quotes eld
\end_inset 

flags
\begin_inset Quotes erd
\end_inset 


\layout Standard

Parameter mit Format 
\begin_inset Quotes eld
\end_inset 

choice
\begin_inset Quotes erd
\end_inset 

 lassen eine Liste von Werten zur Auswahl erscheinen, die im 
\begin_inset Quotes eld
\end_inset 

Format
\begin_inset Quotes erd
\end_inset 

-Feld definiert werden können.
\layout Standard

Außerdem:
\layout Itemize

Vorgabewerte für die Größe des Formulars
\layout Itemize

Hier könnte auch stehen, wo sich das Modul im GUI einordnen will (=Kategorie,
 sollte so funktionieren, wie Software-Installation by PalmOS: ungültige
 oder fehlende Einträge landen im Menü 
\begin_inset Quotes eld
\end_inset 

Unsorted
\begin_inset Quotes erd
\end_inset 

->
\begin_inset Quotes erd
\end_inset 

Raster, Vector, Display
\begin_inset Quotes erd
\end_inset 

 etc.).
 Jeder Kategorie kann eine Farbe zugeordnet werden, mit welcher die Titelzeile
 des GUI-Dialogs unterlegt wird, so lassen sich zusammengehörige Fenster
 besser zuordnen
\layout Itemize

Ein Icon, welches neben dem Namen des Moduls angezeigt wird und per D'n'D
 zur Menüleiste des GIS-Managers hinzugefügt werden kann.
 Für Icons sollte es Vorlagen geben, die Farbgebung sich an die entsprechende
 Kategorie anlehnen.
\layout Standard

Mehrfach-Auswahl mit Wildcard-Unterstütung und entspr.
 Dateiauswahldialog.
 Ähnlich wie die Felderauswahl bei Access: links die Dateien/Karten, rechts
 die Liste der ausgewählten Einträge.
 Mit einem Knopf 
\begin_inset Quotes eld
\end_inset 

->
\begin_inset Quotes erd
\end_inset 

 können Dateien/Karten in die rechte Liste übernommen werden.
 Einträge können aus dieser auch wieder entfernt werden.
 Außerdem ein Hinzufügen/Entfernen mittels Wildcards.
 Mehrfachselektionen mit Shift/Strg in beiden Fenstern.
\layout Standard

Ein- und Ausgabeparameter sollten als solche mit Typ (raster, vektor, ASCII)
 deklariert werden, so dass sich später Verbindungen zwischen der Ausgabe
 des einen und der Eingabe des anderen Moduls herstellen lassen.
\layout Standard

Vor dem Start des eigentlichen Moduls sollten alle Parameter soweit möglich
 auf gültige Eingaben geprüft werden.
 Wenn ungültige Eingaben vorliegen, sollte der betroffene Parameterbezeichner
 rot angezeigt und eine aussagekräftige Fehlermeldung ausgegeben werden.
 Vielleicht sollte der Check direkt in g.parser () integriert werden.
\layout Standard

Formulare sollten vernünftige Vorgaben für Abmessungen bekommen.
 Momentan scheint es so, dass die horizontale Größe der längsten Options-Beschre
ibung entspricht.
 Da die 
\begin_inset Quotes eld
\end_inset 

where
\begin_inset Quotes erd
\end_inset 

-Option ziemlich umständlich beschrieben ist, werden alle Felder viel zu
 lang! Die Standardbeschriftungen sind sowieso ziemlich übel und sollten
 überarbeitet werden.
\layout Standard

Vom Benutzer gemachte Änderungen speichern und Formular beim nächsten Mal
 in derselben Größe anzeigen.
 Die letzen 
\begin_inset Formula $n$
\end_inset 

 Werte für Parameter speichern und eine Drop-down-Liste für jeden Parameter
 anbieten, aus der diese wieder hergestellt werden können.
 Außerdem alle Parameterfelder mit den zuletzt benutzten Werten füllen.
\layout Standard

Mittels eines 
\begin_inset Quotes eld
\end_inset 

Clean
\begin_inset Quotes erd
\end_inset 

-Knopfes können die Vorgabewerte wieder hergestellt werden.
\layout Standard

Alle Module müssen daraufhin überprüft werden, ob entweder die Runtime-GUIs
 voll funktionsfähig sind oder das Modul sowieso nur interaktiv nutzbar
 ist.
\layout Standard

Die Textausgabe sollte gefärbt werden, wenn Warnungen/Fehler erscheinen.
\layout Standard

TOOLTIPS FÜR OPTIONEN.
\layout Section

GIS-Manager
\layout Standard

Der GIS-Manager soll sich selbst organisieren.
 Die Formulare im GIS-Manager sollten den RTG-Formularen entsprechen.
 Es sollte keine speziellen GIS-Manager-Formulare für die einzelnen Module
 mehr geben, sondern nur die RTGs auferufen werden.
 Jedes GRASS-Modul sollte Informationen mitbringen, wo es sich in der Menüstrukt
ur einhängen möchte (Kategorie).
\layout Standard

Oder besser: dies sollte aus dem Namen hervorgehen.
 Der GIS-Manager kann dann die Menüs beim Start selbst zusammenbauen!
\layout Section

Display Manager
\layout Standard

Option, um Farbskalierungen für Vektorkarten einzustellen.
\layout Section

Hilfesystem
\layout Standard

Schön wäre ein besserer 
\begin_inset Quotes eld
\end_inset 

Helpbrowser
\begin_inset Quotes erd
\end_inset 

 für GRASS.
\layout Standard

Vielleicht gibt es eine leichtgewichtere HTML-Lösung für Tcl/Tk, so dass
 nicht immer gleich der ganze fette Webbrowser geladen werden muss? Es gibt
 eine HTML-Bibliothek für Tcl/Tk: http://noucorp.com/tcl/utilities/htmllib/
\layout Standard

Außerdem wäre ein Vorteil, wenn man einen strukturierten Index zu den Modulenanb
ieten könnte, sowie eine einfache Suchfunktion? SO ETWAS KANN MAN AUCH Z.B.
 ALS JAVA SCRIPT in die HTML-Struktur einbetten.
\layout Standard

Die Hilfe-Seiten müssen neu strukturiert werden, um das Auffinden von funktional
 zusammengehörenden Modulen (Kategorien) zu erleichtern.
\layout Section

XDRIVER
\layout Subsection

Allgemein
\layout Standard

Re-Implementation als Tcl/Tk-Canvas.
\layout Standard

Transparente Überlagerung von Karten.
\layout Standard

Fadenkreuz-Cursor mit Koordinatenleisten im Fensterrahmen.
\layout Standard

Anti-Aliasing von Vektoren: kann als Full-scene oder Pixelweise implementiert
 werden.
\layout Standard

D'n'D einer einzelnen Karte aus dem GIS-Manager oder einer Datei aus dem
 Explorer:
\layout Itemize

Einzelkarte: Anzeige löschen, Karte anzeigen, evtl.
 Fragen, ob die Region der Karte angepasst werden soll.
\layout Itemize

einzelne Datei: Konvertieren nach GRASS Raster oder Vektor, fragen ob temporär
 abspeichern und nur anzeigen oder neue GRASS-Karte erstellen (am besten
 Dialog mit Checkbox anzeigen: anzeigen, speichern, Region setzen).
\layout Itemize

bei mehreren Dateien oder Karten: gleiches Vorgehen, aber beim Anzeigen
 transparent (-o) einschalten.
\layout Subsection

Statusleiste
\layout Standard

Anzeige von Koordinaten und Maßstab
\layout Standard

Zoom der näheren Umgebung.
\layout Subsection

Navigatorfenster
\layout Standard

Übersicht der aktuellen Gesamtregion mit Kennzeichnung der ausgewählten
 Region.
\layout Section

Graphische Modellierung
\layout Standard

Erstellung von Modellen in einem Diagramm ähnlich OpenDX oder Idrisi.
 Tcl mit seiner 
\begin_inset Quotes eld
\end_inset 

glue
\begin_inset Quotes erd
\end_inset 

-Fähigkeit könnte benutzt werden, um die Module zu koppeln.
 Um die Aufgabe zu erleichteren können Ein- und Ausgabeparameter als solche
 mit Format gekennzeichnet werden, wie im Abschnitt 
\begin_inset LatexCommand \ref{sec:Runtime-GUIs}

\end_inset 

 beschrieben.
\layout Standard

Die zur Modellierung verwendbaren Knoten sind die GRASS Module, die nach
 ihren Kategorien sortiert angezeigt werden.
 Zusätzlich die folgenden Knoten:
\layout Itemize

Laden von Vektor, Raster, ASCII
\layout Itemize

Mapcalc
\layout Itemize

Speichern von Vektor, Raster, ASCII
\layout Standard

Über die Kanten werden die Daten in Form von temporären Dateien geschickt.
 Die Arbeit der Knoten kann mit Parametern beeinflusst werden (alle, die
 kein 
\begin_inset Quotes eld
\end_inset 

?
\begin_inset Quotes erd
\end_inset 

 nachgestellt haben).
 Module mit 
\begin_inset Quotes eld
\end_inset 

*
\begin_inset Quotes erd
\end_inset 

-Parametern können mehrere Ein- oder Ausgänge haben.
\layout Standard

Außerdem einfache Knoten zur Flusssteuerung:
\layout Itemize

If ...
 Then
\layout Itemize

Switch
\layout Itemize

Loop
\layout Subsection

Implementierung
\layout Standard

Das Diagramm kann auf einem Tk-Canvas erstellt werden, die einzelnen Knoten
 sind Widgets, die zu diesem Canvas gehören.
\layout Chapter

GRASS-Erweiterungen
\layout Section

Erweiterungsmanager
\layout Standard

Ein neues Programm 
\emph on 
g.install
\emph default 
, das Erweiterungen aus dem Internet laden, kompilieren und im GRASS-Binärverzei
chnis installieren kann.
\layout Section

DST-Programme
\layout Standard

Umstieg von DST auf TBM
\layout Section

Räumliche Statistik
\layout Subsection

Punktmusteranalyse
\layout Standard

Benutze R-Funktionen mittels RServe.
\layout Subsection

Nachbarschaftsanalyse
\layout Standard

Schreibe eine Bibliothek mit Funktionen zur Nachbarschaftsanalyse.
 Schaue, was ArcGIS in dem Punkt zu bieten hat.
\layout Standard

get_raster_neighbours (): gibt die Werte aller Zellen innerhalb einer Nachbarsch
aft in einer Liste zurück.
\layout Standard

get_points_neighbour (): gibt alle Punkte innerhalb einer Nachbarschaft
 zurück.
\layout Standard

get_areas_neighbour (): gibt alle Polygone, die vollständig oder mit dem
 Zentrum oder einem ihrer Punkte in der Nachbarschaft liegen, zurück.
\layout Standard

Die Nachbarschaft kann in ihrer Form frei definiert werden (ein Polygon,
 dessen Zenturm auf den betrachteten Punkt gesetzt wird), oder ein einfaches
 Polygon (Kreis oder Rechteck) sein.
 Die Nachbarschaft kann außerdem als cost-surface auf einem Raster definiert
 werden, dessen Grenzen innerhalb eines gegeben Kostenbereiches vom Punkt
 aus gegeben sind.
 
\layout Subsection

Voronoi-Diagramme
\layout Section

Geophysik-Erweiterung
\layout Section

Bayes-Modelle
\layout Section

Vectorkarten-Algebra
\layout Standard

Eine räumlich arbeitende Algebra ähnlich den Nachbarschaftsfunktionen für
 Rasterkarten dürfte ziemlich komplex werden.
 Für den Anfang wäre es aber schon nützlich genug, die Grundrechenarten
 und logischen Operatoren auf der Liste der Attribute und Kategorien ausführen
 zu können.
 Zusätzlich könnte man Kartenoperationen einführen, welche die aktuelle
 Attributliste verändern können, so dass nur Attribute von Polygonen mit
 bestimmten topologischen Eigenschaften bearbeitet werden können.
 Kartenoperationen könnten Vektorkarten laden und verschneiden.
 Die Attributliste wäre dann einfach immer die Liste der Attribute der Ergebnisk
arte.
\layout Standard

Alle im Eingabestring vorkommenden Bezeichner sind etweder Namen von Vekorkarten
 (bei Kartenoperatoren) oder Namen von Attributen bzw.
 Kategorien.
\layout Standard

Am besten wäre es, die Syntax und den Algebra-Parser von 
\emph on 
r.mapcalc
\emph default 
 soweit möglich zu übernehmen.
\layout Section

Landschaftsarchäologie
\layout Standard

Module zu den Themen:
\layout Standard

Fundstellenbildungs- und Erhaltungsprozesse (plow zone...)
\layout Standard

Siedlungsmusteranalyse
\layout Standard

Predictive Modelling
\layout Standard

Klassifikation (Shelter classes ...)
\layout Standard

Site catchment
\layout Chapter

GRASS-Makro- und Batchfähigkeit
\layout Standard

Ein einfacher Editor, um Shell-Skripte mit sequentiellen GRASS-Befehlen
 zusammen zu klicken, inkl.
 Abfragen auf Erfolg eines Kommandos, Wildcards und Schleifen.
\layout Section

Tcl/Tk als Skriptingsprache
\layout Standard

Wäre es möglich, auf Tcl-Basis eine High-Level-Modellierungssprache für
 GRASS zu kreieren?
\layout Standard

Tcl kann C-Calls in eine eigene, vereinheitlichte API übernehmen: der Tcl-Interp
reter kann nach Belieben erweitert werden!
\layout Standard

Tcl-Strings können Tcl-Kommandos enthlaten (Kap.
 7.4.2)!
\layout Standard

Tcl kann sogar auf Prompts reagieren und Tastaturcodes senden: interaktive
 Module können auf diese Weise auch ein GUI verpasst bekommen.
\layout Chapter

GRASS und Datenbanken
\layout Standard

Eine enge Anbindung an PostgreSQL.
 PgAccess benutzt ein interface mit Tcl/Tk, dieses könnte auch
\layout Standard

benutzt werden, um einfache Datenbankfunktionen ala MapInfo zu implementieren!
 
\layout Standard

www.pgaccess.org
\layout Standard

PgAccessAPI ermöglicht es, High-Level-Komponenten direkt zu verwenden!
\layout Standard

Ein großer Teil der Komplexität von GRASS6 SQL/Vektor-Interaktion könnte
 gekapselt werden.
\layout Chapter

Sonstige Programme
\layout Section

Raster
\layout Standard

wo ist r.support? [in Arbeit, CVS]
\layout Subsection

Hilfsprogramme
\layout Subsubsection

r.categorise
\layout Standard

Statt eine neue Rasterkarte auszugeben, sollten als Option (oder sogar Voreinste
llung?) Regeln für 
\emph on 
r.reclass
\emph default 
 order 
\emph on 
r.recode
\emph default 
 erzeugt werden können.
 Das erstere hat den Vorteil, dass nicht extra eine neue Rasterkarte erzeugt
 wird, sondern nur eine Reklassifizierung der Originaldaten gespeichert
 wird.
\layout Standard

Implementation der wichtigsten Algorithmen: Percentile und Quantile, Natural
 Breaks etc.
\layout Standard

Eine neuer Name wäre wohl auch fällig.
\layout Subsubsection

r.move
\layout Standard

Ein Kommando, um eine Rasterkarte schnell auf die aktuelle Region zu georeferenz
ieren.
\layout Standard

Benutze: r.region.
\layout Subsubsection

r.overlay
\layout Standard

Überlagere mehrere Rasterkarten mit wählbarer Transparenz und speichere
 als neue Karte.
\layout Standard

Inwieweit kann r.blend hierzu benutzt werden?
\layout Subsubsection

r.pointcount (oder in v.to.rast einfügen, s.u.)
\layout Standard

Speichere die Zahl von Vektorpunkten, die in eine Zelle fallen, als Integer-Wert
 in einer Rasterkarte.
\layout Subsubsection

r.normalise
\layout Standard

Normalisiere die Werte einer Rasterkarte in den Bereich zwischen zwei benutzerde
finierten Limits (Default 0 und 1), skaliere Graustufen auf Standardabweichungen.
\layout Subsubsection

r.shade
\layout Standard

Ein einfaches Frontend für r.his und r.composite, um schnell ein Hillshading
 für eine Karte zu erzeugen.
 Optionen, um Farbton/Intensität/Sättigung der entsprechenden Eingabekarten
 zu verstärken bzw.
 abzuschwächen.
\layout Section

Vektor
\layout Subsection

Statistik
\layout Subsubsection

v.areastats
\layout Standard

Äquivalent zu ArcGIS: berechnet statistische Maße für die Rasterzellen unter
 einer Karte mit Polygonen (beliebigen Typs).
 Die Statistiken können in Attributen der Vektorobjekte gespeichert werden
 und/oder auf dem Bildschirm ausgegeben werden.
\layout Standard

Benutze: v.to.rast um Polygone in temp Raster zu konvertieren.
 Die abzufragende Rasterkarte wird dann mit dieser Karte maskiert (alte
 Maske evtl.
 vorher sichern) und in eine zweite temp Karte gespeichert.
 Mit dieser Karte lassen sich die Funktione der GRASSToolkit-Bibliothek
 benutzen.
\layout Standard

In dieser Bibliothek einige Funktionen implementieren, um einfache Statistiken
 zu berechnen, für FP und INT Karten: mean/median, percentiles, min, max,
 var, std, kurtosis, Moran's G etc (was kann ArcGIS alles?).
\layout Subsubsection

v.points.report
\layout Subsubsection

v.points.sample
\layout Standard

Unterschiedliche Strategien: clustered, stratified etc.
\layout Subsection

Farben
\layout Standard

Vektorpunkte müssen ebenfalls die RGB-Spalte berücksichtigen!
\layout Paragraph

v.rastcol
\layout Standard

Vergleiche Farbwerte einer Rasterkarte mit den Werten eines Vektorattributes
 und schreibe einen identischen Farbweintrag in das RGB-Attribut.
\layout Subsection

Hilfsprogramme
\layout Subsubsection

v.in.shape, mif etc.
\layout Standard

Ein einfacher wrapper für v.in.ogr
\layout Subsubsection

v.to.rast
\layout Standard

Option, um die Zahl der Punkte, die in eine Zelle fallen, im Raster zu kodieren.
\layout Standard

In GRASS 5.4 ist es möglich, zahlreiche Statistiken in Site-Attributen zu
 berechenen, u.
 a.
 auch
\layout Standard


\begin_inset Quotes eld
\end_inset 

sum
\begin_inset Quotes erd
\end_inset 

.
 Wenn ein Attribute für jede Site auf 
\begin_inset Quotes eld
\end_inset 

1
\begin_inset Quotes erd
\end_inset 

 gesetzt wird, ist die Summe dieser Attribute die Zahl der Sites pro Zelle.
 Danach kann s.to.rast benutzt werden, um dieses Attribut zu kodieren.
\layout Standard

Option, um den Umfang/die Fläche von Objekten im Raster zu kodieren.
\layout LyX-Code

Upload area sizes of each polygon to attribute table: 
\layout LyX-Code

v.to.db map=soils type=area option=area col=area_size unit=h
\layout Chapter

BUGS
\layout Paragraph

v.category
\layout Standard

does not handle mapset for input map correctly.
 Mapset has to be specified map@mapset.
\layout Paragraph

v.to.db
\layout Standard

ignoriert die 
\begin_inset Quotes eld
\end_inset 

col
\begin_inset Quotes erd
\end_inset 

 option, holt immer nur die Werte aus der ersten Kategorie.
\layout Paragraph

v.in.ascii
\layout Standard

Programm ist nicht in der Lage, Leerzeilen und Textzeilen zu überspringen
 (auch nicht am Dateianfang oder Dateiende)
\layout Paragraph

d.what.vect
\layout Standard

Das GUI kommt nach ein paar Aufrufen nicht mehr wieder und nur die Ausgabe
 auf der Textkonsole funktioniert noch
\layout Paragraph

v.in.ogr
\layout Standard

Segfault beim Versuch, IKAW-Karte zu importieren: Shape ebenso wie MapInfo.
 Der Dialog für diese Formate ist viel zu umständlich, man sollte sie viel
 direkter aus dem Dateimenü des GIS-Managers öffnen können.
\layout Paragraph

r.in.ascii
\layout Standard

Hat Probleme mit längeren Labels und gbit ziemlich nutzlose Fehlermeldungen.
\layout Paragraph

GIS Manager
\layout Standard

Query-Funktion klappt nicht mit mehreren Karten (?).
 Zeigt manchmal sehr merkwürdige Werte an.
\the_end
