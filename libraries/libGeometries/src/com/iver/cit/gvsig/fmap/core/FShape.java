package com.iver.cit.gvsig.fmap.core;


import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.io.Serializable;

import org.cresques.cts.ICoordTrans;


/**
 * <p>The interface <code>FShape</code> extends <code>Shape</code> adding shape types, and allowing
 *  to work with it as a geometry.</p>
 */
public interface FShape extends Shape, Serializable {
	/**
	 * Unknown or not defined type. 
	 */
	public final static int NULL = 0;
	/**
	 * A geometric element that has zero dimensions and a location determinable by an ordered set
	 *  of coordinates
	 */
	public final static int POINT = 1;
	/**
	 * A straight or curved geometric element that is generated by a moving point and that has extension
	 *  only along the path of the point.
	 */
	public final static int LINE = 2;
	/**
	 * A closed plane figure bounded by straight lines.
	 */
	public final static int POLYGON = 4;
	/**
	 * Solids in 3D
	 */
	public final static int SOLID = 8;
	/**
	 * Words, symbols and form of a written or printed work.
	 */
	public final static int TEXT = 16;
	/**
	 * A set that can contain points, lines and polygons.
	 */
	public final static int MULTI = 32;
	/**
	 * A set of points.
	 */
	public final static int MULTIPOINT = 64;
	/**
	 * A set of lines.
	 */
	public final static int MULTIPOLYLINE = 128;
	/**
	 * A set of polygons.
	 */
	public final static int MULTIPOLYGON = 256;	
	/**
	 * A set of solids.
	 */
	public final static int MULTISOLID = 512;	
	/**
	 * A closed plane curve every point of which is equidistant from a fixed point within the curve.
	 */
	public final static int CIRCLE = 1024;
	/**
	 * A continuous portion (as of a circle or ellipse) of a curved line.
	 */
	public final static int ARC = 2048;
	/**
	 *  A closed plane curve generated by a point moving in such a way that the sums of its distances
	 *   from two fixed points is a constant : a plane section of a right circular cone that is a closed
	 *   curve.
	 */
	public final static int ELLIPSE=4096;
	/**
	 * Indicates third coordinate. And can be combined with other geometries via the bits enabled.
	 */
	public final static int Z=8192;
	/**
	 * Gets the geometry type of this shape.
	 *
	 * @return int the geometry type of this shape.
	 */
	public int getShapeType();

	/**
	 * Creates and returns a shape equal and independent of this one.
	 *
	 * @return the new shape.
	 */
	public FShape cloneFShape();
	/**
	 * Re-projects this shape using transformation coordinates. 
	 *
	 * @param ct the transformation coordinates
	 */
	public void reProject(ICoordTrans ct);

	/**
	 * Returns the handlers they utilized to stretch the geometries.
	 *
	 * @return Handlers the handlers used to stretch the geometries
	 */
	public Handler[] getStretchingHandlers();

	/**
	 * Returns the handlers used to select the geometries.
	 *
	 * @return Handlers the handlers used to select the geometries
	 */
	public Handler[] getSelectHandlers();
	/**
	 * Executes a 2D transformation on this shape, using six parameters.
	 * 
	 * @param at object that allows execute the affine transformation
	 * 
	 * @see AffineTransform
	 */
	public void transform(AffineTransform at);
}
